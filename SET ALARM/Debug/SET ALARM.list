
SET ALARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1e8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c54  0800b2f8  0800b2f8  0000c2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf4c  0800bf4c  0000d1f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bf4c  0800bf4c  0000cf4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf54  0800bf54  0000d1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf54  0800bf54  0000cf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf58  0800bf58  0000cf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800bf5c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  200001f8  0800c154  0000d1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  0800c154  0000da0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aab  00000000  00000000  0000d221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300e  00000000  00000000  00020ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00023ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eeb  00000000  00000000  00024fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a007  00000000  00000000  00025ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d2c  00000000  00000000  0003feda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008faf5  00000000  00000000  00055c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e56fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c0  00000000  00000000  000e5740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000eb800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b2e0 	.word	0x0800b2e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800b2e0 	.word	0x0800b2e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <Send_cmd>:
#define Cmd_Len    0x06
#define Feedback   0x00    // If need for Feedback: 0x01, No Feedback: 0x00

// Gửi lệnh tới DFPlayer qua UART
static void Send_cmd(UART_HandleTypeDef *huart, uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	70fb      	strb	r3, [r7, #3]
 8000f56:	460b      	mov	r3, r1
 8000f58:	70bb      	strb	r3, [r7, #2]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	707b      	strb	r3, [r7, #1]
    uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	78bb      	ldrb	r3, [r7, #2]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	4413      	add	r3, r2
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	787b      	ldrb	r3, [r7, #1]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f203 1305 	addw	r3, r3, #261	@ 0x105
 8000f76:	82fb      	strh	r3, [r7, #22]
    Checksum = 0 - Checksum;
 8000f78:	8afb      	ldrh	r3, [r7, #22]
 8000f7a:	425b      	negs	r3, r3
 8000f7c:	82fb      	strh	r3, [r7, #22]

    uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8000f7e:	237e      	movs	r3, #126	@ 0x7e
 8000f80:	733b      	strb	r3, [r7, #12]
 8000f82:	23ff      	movs	r3, #255	@ 0xff
 8000f84:	737b      	strb	r3, [r7, #13]
 8000f86:	2306      	movs	r3, #6
 8000f88:	73bb      	strb	r3, [r7, #14]
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	743b      	strb	r3, [r7, #16]
 8000f92:	78bb      	ldrb	r3, [r7, #2]
 8000f94:	747b      	strb	r3, [r7, #17]
 8000f96:	787b      	ldrb	r3, [r7, #1]
 8000f98:	74bb      	strb	r3, [r7, #18]
 8000f9a:	8afb      	ldrh	r3, [r7, #22]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	74fb      	strb	r3, [r7, #19]
 8000fa4:	8afb      	ldrh	r3, [r7, #22]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	753b      	strb	r3, [r7, #20]
 8000faa:	23ef      	movs	r3, #239	@ 0xef
 8000fac:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(huart, CmdSequence, 10, 1000);
 8000fae:	f107 010c 	add.w	r1, r7, #12
 8000fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb6:	220a      	movs	r2, #10
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f006 fd1d 	bl	80079f8 <HAL_UART_Transmit>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <DF_Init>:

// Khởi tạo context cho DFPlayer
void DF_Init(DFPlayer_Context *ctx, UART_HandleTypeDef *huart, uint8_t volume)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71fb      	strb	r3, [r7, #7]
    ctx->huart = huart;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	601a      	str	r2, [r3, #0]
    ctx->state = DF_INIT;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	711a      	strb	r2, [r3, #4]
    ctx->volume = volume;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	79fa      	ldrb	r2, [r7, #7]
 8000fe4:	715a      	strb	r2, [r3, #5]
    ctx->is_playing = 1;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	741a      	strb	r2, [r3, #16]
    ctx->is_paused = 0;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	745a      	strb	r2, [r3, #17]
    ctx->delay_start = 0;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
    ctx->delay_duration = 0;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <DF_Update>:

// Hàm cập nhật trạng thái của DFPlayer
void DF_Update(DFPlayer_Context *ctx)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    switch (ctx->state)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	791b      	ldrb	r3, [r3, #4]
 8001014:	2b08      	cmp	r3, #8
 8001016:	f200 80d0 	bhi.w	80011ba <DF_Update+0x1b2>
 800101a:	a201      	add	r2, pc, #4	@ (adr r2, 8001020 <DF_Update+0x18>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	080011c3 	.word	0x080011c3
 8001024:	08001045 	.word	0x08001045
 8001028:	0800106d 	.word	0x0800106d
 800102c:	080010af 	.word	0x080010af
 8001030:	080010cf 	.word	0x080010cf
 8001034:	08001103 	.word	0x08001103
 8001038:	0800116b 	.word	0x0800116b
 800103c:	08001193 	.word	0x08001193
 8001040:	08001137 	.word	0x08001137
            // Không làm gì, chờ yêu cầu
            break;

        case DF_INIT:
            // Bắt đầu chọn nguồn (TF card)
            Send_cmd(ctx->huart, 0x3F, 0x00, Source);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	2302      	movs	r3, #2
 800104a:	2200      	movs	r2, #0
 800104c:	213f      	movs	r1, #63	@ 0x3f
 800104e:	f7ff ff79 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3308      	adds	r3, #8
 8001056:	4619      	mov	r1, r3
 8001058:	2032      	movs	r0, #50	@ 0x32
 800105a:	f000 f8ef 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2232      	movs	r2, #50	@ 0x32
 8001062:	60da      	str	r2, [r3, #12]
            ctx->state = DF_INIT_SOURCE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2202      	movs	r2, #2
 8001068:	711a      	strb	r2, [r3, #4]
            break;
 800106a:	e0af      	b.n	80011cc <DF_Update+0x1c4>

        case DF_INIT_SOURCE:
            // Chờ delay hoàn tất trước khi đặt âm lượng
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_duration))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4619      	mov	r1, r3
 8001076:	4610      	mov	r0, r2
 8001078:	f000 f8ee 	bl	8001258 <is_delay_ms_complete>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 80a1 	beq.w	80011c6 <DF_Update+0x1be>
            {
                Send_cmd(ctx->huart, 0x06, 0x00, ctx->volume);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	795b      	ldrb	r3, [r3, #5]
 800108c:	2200      	movs	r2, #0
 800108e:	2106      	movs	r1, #6
 8001090:	f7ff ff58 	bl	8000f44 <Send_cmd>
                delay_ms_nonblocking(100, &ctx->delay_start);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3308      	adds	r3, #8
 8001098:	4619      	mov	r1, r3
 800109a:	2064      	movs	r0, #100	@ 0x64
 800109c:	f000 f8ce 	bl	800123c <delay_ms_nonblocking>
                ctx->delay_duration = 100;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2264      	movs	r2, #100	@ 0x64
 80010a4:	60da      	str	r2, [r3, #12]
                ctx->state = DF_INIT_VOLUME;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	711a      	strb	r2, [r3, #4]
            }
            break;
 80010ac:	e08b      	b.n	80011c6 <DF_Update+0x1be>

        case DF_INIT_VOLUME:
            // Chờ delay hoàn tất, sau đó chuyển về trạng thái IDLE
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_duration))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f000 f8cd 	bl	8001258 <is_delay_ms_complete>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 8082 	beq.w	80011ca <DF_Update+0x1c2>
            {
                ctx->state = DF_IDLE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	711a      	strb	r2, [r3, #4]
            }
            break;
 80010cc:	e07d      	b.n	80011ca <DF_Update+0x1c2>

        case DF_PLAY:
            // Phát nhạc từ đầu
            Send_cmd(ctx->huart, 0x03, 0x00, 0x01);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	2200      	movs	r2, #0
 80010d6:	2103      	movs	r1, #3
 80010d8:	f7ff ff34 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3308      	adds	r3, #8
 80010e0:	4619      	mov	r1, r3
 80010e2:	2032      	movs	r0, #50	@ 0x32
 80010e4:	f000 f8aa 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2232      	movs	r2, #50	@ 0x32
 80010ec:	60da      	str	r2, [r3, #12]
            ctx->is_playing = 1;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	741a      	strb	r2, [r3, #16]
            ctx->is_paused = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	745a      	strb	r2, [r3, #17]
            ctx->state = DF_IDLE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	711a      	strb	r2, [r3, #4]
            break;
 8001100:	e064      	b.n	80011cc <DF_Update+0x1c4>

        case DF_PAUSE:
            // Tạm dừng nhạc
            Send_cmd(ctx->huart, 0x0E, 0x00, 0x00);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	2200      	movs	r2, #0
 800110a:	210e      	movs	r1, #14
 800110c:	f7ff ff1a 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3308      	adds	r3, #8
 8001114:	4619      	mov	r1, r3
 8001116:	2032      	movs	r0, #50	@ 0x32
 8001118:	f000 f890 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2232      	movs	r2, #50	@ 0x32
 8001120:	60da      	str	r2, [r3, #12]
            ctx->is_playing = 0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	741a      	strb	r2, [r3, #16]
            ctx->is_paused = 1;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	745a      	strb	r2, [r3, #17]
            ctx->state = DF_IDLE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	711a      	strb	r2, [r3, #4]
            break;
 8001134:	e04a      	b.n	80011cc <DF_Update+0x1c4>

        case DF_PLAYBACK:
            // Tiếp tục phát nhạc
            Send_cmd(ctx->huart, 0x0D, 0x00, 0x00);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	2300      	movs	r3, #0
 800113c:	2200      	movs	r2, #0
 800113e:	210d      	movs	r1, #13
 8001140:	f7ff ff00 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3308      	adds	r3, #8
 8001148:	4619      	mov	r1, r3
 800114a:	2032      	movs	r0, #50	@ 0x32
 800114c:	f000 f876 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2232      	movs	r2, #50	@ 0x32
 8001154:	60da      	str	r2, [r3, #12]
            ctx->is_playing = 1;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	741a      	strb	r2, [r3, #16]
            ctx->is_paused = 0;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	745a      	strb	r2, [r3, #17]
            ctx->state = DF_IDLE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	711a      	strb	r2, [r3, #4]
            break;
 8001168:	e030      	b.n	80011cc <DF_Update+0x1c4>

        case DF_NEXT:
            // Chuyển bài tiếp theo
            Send_cmd(ctx->huart, 0x01, 0x00, 0x00);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	2300      	movs	r3, #0
 8001170:	2200      	movs	r2, #0
 8001172:	2101      	movs	r1, #1
 8001174:	f7ff fee6 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3308      	adds	r3, #8
 800117c:	4619      	mov	r1, r3
 800117e:	2032      	movs	r0, #50	@ 0x32
 8001180:	f000 f85c 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2232      	movs	r2, #50	@ 0x32
 8001188:	60da      	str	r2, [r3, #12]
            ctx->state = DF_IDLE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	711a      	strb	r2, [r3, #4]
            break;
 8001190:	e01c      	b.n	80011cc <DF_Update+0x1c4>

        case DF_PREVIOUS:
            // Quay lại bài trước
            Send_cmd(ctx->huart, 0x02, 0x00, 0x00);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	2200      	movs	r2, #0
 800119a:	2102      	movs	r1, #2
 800119c:	f7ff fed2 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3308      	adds	r3, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	2032      	movs	r0, #50	@ 0x32
 80011a8:	f000 f848 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2232      	movs	r2, #50	@ 0x32
 80011b0:	60da      	str	r2, [r3, #12]
            ctx->state = DF_IDLE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	711a      	strb	r2, [r3, #4]
            break;
 80011b8:	e008      	b.n	80011cc <DF_Update+0x1c4>

        default:
            ctx->state = DF_IDLE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	711a      	strb	r2, [r3, #4]
            break;
 80011c0:	e004      	b.n	80011cc <DF_Update+0x1c4>
            break;
 80011c2:	bf00      	nop
 80011c4:	e002      	b.n	80011cc <DF_Update+0x1c4>
            break;
 80011c6:	bf00      	nop
 80011c8:	e000      	b.n	80011cc <DF_Update+0x1c4>
            break;
 80011ca:	bf00      	nop
    }
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <DF_PlayFromStart>:

// Yêu cầu phát nhạc từ đầu
void DF_PlayFromStart(DFPlayer_Context *ctx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    if (ctx->state == DF_IDLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <DF_PlayFromStart+0x16>
    {
        ctx->state = DF_PLAY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2204      	movs	r2, #4
 80011e8:	711a      	strb	r2, [r3, #4]
    }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <DF_Pause>:

// Yêu cầu tạm dừng
void DF_Pause(DFPlayer_Context *ctx)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    if (ctx->state == DF_IDLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	791b      	ldrb	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <DF_Pause+0x16>
    {
        ctx->state = DF_PAUSE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2205      	movs	r2, #5
 8001208:	711a      	strb	r2, [r3, #4]
    }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <delay_init>:
#include "delay.h"

extern TIM_HandleTypeDef htim1;  // TIM1 được khai báo trong main.c

// Khởi tạo delay không chặn
void delay_init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    // Đảm bảo TIM1 đã được cấu hình (Prescaler = 7, ARR = 999 để ngắt mỗi 1ms)
    HAL_TIM_Base_Start_IT(&htim1);
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <delay_init+0x10>)
 800121a:	f005 fffb 	bl	8007214 <HAL_TIM_Base_Start_IT>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000026c 	.word	0x2000026c

08001228 <get_tick_ms>:
//        tick_us += 1000;  // Tăng biến đếm micro giây (1000 µs = 1 ms)
//    }
//}

// Lấy giá trị tick hiện tại (mili giây)
uint32_t get_tick_ms(void) {
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
    return tick_ms;
 800122c:	4b02      	ldr	r3, [pc, #8]	@ (8001238 <get_tick_ms+0x10>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	200003d4 	.word	0x200003d4

0800123c <delay_ms_nonblocking>:
    // Kết hợp tick_ms và giá trị hiện tại của TIM1 counter để tính micro giây
    return (tick_ms * 1000) + __HAL_TIM_GET_COUNTER(&htim1);
}

// Bắt đầu độ trễ mili giây (non-blocking)
void delay_ms_nonblocking(uint32_t ms, uint32_t *start) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
    *start = get_tick_ms();
 8001246:	f7ff ffef 	bl	8001228 <get_tick_ms>
 800124a:	4602      	mov	r2, r0
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <is_delay_ms_complete>:
void delay_us_nonblocking(uint32_t us, uint32_t *start) {
    *start = get_tick_us();
}

// Kiểm tra xem độ trễ mili giây đã hoàn tất chưa
bool is_delay_ms_complete(uint32_t start, uint32_t ms) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    return (get_tick_ms() - start >= ms);
 8001262:	f7ff ffe1 	bl	8001228 <get_tick_ms>
 8001266:	4602      	mov	r2, r0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	bf94      	ite	ls
 8001272:	2301      	movls	r3, #1
 8001274:	2300      	movhi	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <DS1307_Init>:

/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <DS1307_Init+0x1c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f806 	bl	80012a0 <DS1307_SetClockHalt>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000214 	.word	0x20000214

080012a0 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <DS1307_SetClockHalt+0x14>
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	e000      	b.n	80012b6 <DS1307_SetClockHalt+0x16>
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 f83d 	bl	8001338 <DS1307_GetRegByte>
 80012be:	4603      	mov	r3, r0
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4619      	mov	r1, r3
 80012d4:	2000      	movs	r0, #0
 80012d6:	f000 f811 	bl	80012fc <DS1307_SetRegByte>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 f826 	bl	8001338 <DS1307_GetRegByte>
 80012ec:	4603      	mov	r3, r0
 80012ee:	11db      	asrs	r3, r3, #7
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	b2db      	uxtb	r3, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}

080012fc <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af02      	add	r7, sp, #8
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	4613      	mov	r3, r2
 800130a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	733b      	strb	r3, [r7, #12]
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <DS1307_SetRegByte+0x38>)
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	f107 020c 	add.w	r2, r7, #12
 800131c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2302      	movs	r3, #2
 8001324:	21d0      	movs	r1, #208	@ 0xd0
 8001326:	f002 fdfd 	bl	8003f24 <HAL_I2C_Master_Transmit>
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000214 	.word	0x20000214

08001338 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af02      	add	r7, sp, #8
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <DS1307_GetRegByte+0x40>)
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	1dfa      	adds	r2, r7, #7
 8001348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2301      	movs	r3, #1
 8001350:	21d0      	movs	r1, #208	@ 0xd0
 8001352:	f002 fde7 	bl	8003f24 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8001356:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <DS1307_GetRegByte+0x40>)
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	f107 020f 	add.w	r2, r7, #15
 800135e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	21d0      	movs	r1, #208	@ 0xd0
 8001368:	f002 feda 	bl	8004120 <HAL_I2C_Master_Receive>
	return val;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000214 	.word	0x20000214

0800137c <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8001380:	2003      	movs	r0, #3
 8001382:	f7ff ffd9 	bl	8001338 <DS1307_GetRegByte>
 8001386:	4603      	mov	r3, r0
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f963 	bl	8001654 <DS1307_DecodeBCD>
 800138e:	4603      	mov	r3, r0
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}

08001394 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8001398:	2004      	movs	r0, #4
 800139a:	f7ff ffcd 	bl	8001338 <DS1307_GetRegByte>
 800139e:	4603      	mov	r3, r0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f957 	bl	8001654 <DS1307_DecodeBCD>
 80013a6:	4603      	mov	r3, r0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	bd80      	pop	{r7, pc}

080013ac <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 80013b0:	2005      	movs	r0, #5
 80013b2:	f7ff ffc1 	bl	8001338 <DS1307_GetRegByte>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f94b 	bl	8001654 <DS1307_DecodeBCD>
 80013be:	4603      	mov	r3, r0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 80013ca:	2010      	movs	r0, #16
 80013cc:	f7ff ffb4 	bl	8001338 <DS1307_GetRegByte>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	0091      	lsls	r1, r2, #2
 80013dc:	461a      	mov	r2, r3
 80013de:	460b      	mov	r3, r1
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80013e6:	2006      	movs	r0, #6
 80013e8:	f7ff ffa6 	bl	8001338 <DS1307_GetRegByte>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f930 	bl	8001654 <DS1307_DecodeBCD>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	4413      	add	r3, r2
 80013fc:	b29b      	uxth	r3, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff ff94 	bl	8001338 <DS1307_GetRegByte>
 8001410:	4603      	mov	r3, r0
 8001412:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f91b 	bl	8001654 <DS1307_DecodeBCD>
 800141e:	4603      	mov	r3, r0
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd80      	pop	{r7, pc}

08001424 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ff85 	bl	8001338 <DS1307_GetRegByte>
 800142e:	4603      	mov	r3, r0
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f90f 	bl	8001654 <DS1307_DecodeBCD>
 8001436:	4603      	mov	r3, r0
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}

0800143c <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff ff79 	bl	8001338 <DS1307_GetRegByte>
 8001446:	4603      	mov	r3, r0
 8001448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f900 	bl	8001654 <DS1307_DecodeBCD>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}

0800145a <DS1307_GetTimeZoneHour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t DS1307_GetTimeZoneHour(void) {
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_HR);
 800145e:	2008      	movs	r0, #8
 8001460:	f7ff ff6a 	bl	8001338 <DS1307_GetRegByte>
 8001464:	4603      	mov	r3, r0
 8001466:	b25b      	sxtb	r3, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}

0800146c <DS1307_GetTimeZoneMin>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
 8001470:	2009      	movs	r0, #9
 8001472:	f7ff ff61 	bl	8001338 <DS1307_GetRegByte>
 8001476:	4603      	mov	r3, r0
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}

0800147c <DS1307_GetTime>:


DS1307_TIME DS1307_GetTime(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

	DS1307_TIME time;

	time.Date = DS1307_GetDate();
 8001484:	f7ff ff86 	bl	8001394 <DS1307_GetDate>
 8001488:	4603      	mov	r3, r0
 800148a:	733b      	strb	r3, [r7, #12]
	time.Month = DS1307_GetMonth();
 800148c:	f7ff ff8e 	bl	80013ac <DS1307_GetMonth>
 8001490:	4603      	mov	r3, r0
 8001492:	737b      	strb	r3, [r7, #13]
	time.Year = DS1307_GetYear();
 8001494:	f7ff ff96 	bl	80013c4 <DS1307_GetYear>
 8001498:	4603      	mov	r3, r0
 800149a:	81fb      	strh	r3, [r7, #14]
	time.DoW = DS1307_GetDayOfWeek();
 800149c:	f7ff ff6e 	bl	800137c <DS1307_GetDayOfWeek>
 80014a0:	4603      	mov	r3, r0
 80014a2:	743b      	strb	r3, [r7, #16]
	time.Hour = DS1307_GetHour();
 80014a4:	f7ff ffaf 	bl	8001406 <DS1307_GetHour>
 80014a8:	4603      	mov	r3, r0
 80014aa:	747b      	strb	r3, [r7, #17]
	time.Minute = DS1307_GetMinute();
 80014ac:	f7ff ffba 	bl	8001424 <DS1307_GetMinute>
 80014b0:	4603      	mov	r3, r0
 80014b2:	74bb      	strb	r3, [r7, #18]
	time.Second = DS1307_GetSecond();
 80014b4:	f7ff ffc2 	bl	800143c <DS1307_GetSecond>
 80014b8:	4603      	mov	r3, r0
 80014ba:	74fb      	strb	r3, [r7, #19]
	time.TimeZoneHour = DS1307_GetTimeZoneHour();
 80014bc:	f7ff ffcd 	bl	800145a <DS1307_GetTimeZoneHour>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	753b      	strb	r3, [r7, #20]
	time.TimeZoneMin = DS1307_GetTimeZoneMin();
 80014c6:	f7ff ffd1 	bl	800146c <DS1307_GetTimeZoneMin>
 80014ca:	4603      	mov	r3, r0
 80014cc:	757b      	strb	r3, [r7, #21]

	return time;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	461a      	mov	r2, r3
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	cb03      	ldmia	r3!, {r0, r1}
 80014d8:	6010      	str	r0, [r2, #0]
 80014da:	6051      	str	r1, [r2, #4]
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	8113      	strh	r3, [r2, #8]
}
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f8c5 	bl	8001684 <DS1307_EncodeBCD>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4619      	mov	r1, r3
 80014fe:	2003      	movs	r0, #3
 8001500:	f7ff fefc 	bl	80012fc <DS1307_SetRegByte>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f000 f8b3 	bl	8001684 <DS1307_EncodeBCD>
 800151e:	4603      	mov	r3, r0
 8001520:	4619      	mov	r1, r3
 8001522:	2004      	movs	r0, #4
 8001524:	f7ff feea 	bl	80012fc <DS1307_SetRegByte>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f8a1 	bl	8001684 <DS1307_EncodeBCD>
 8001542:	4603      	mov	r3, r0
 8001544:	4619      	mov	r1, r3
 8001546:	2005      	movs	r0, #5
 8001548:	f7ff fed8 	bl	80012fc <DS1307_SetRegByte>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4a10      	ldr	r2, [pc, #64]	@ (80015a4 <DS1307_SetYear+0x50>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	b29b      	uxth	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4619      	mov	r1, r3
 800156e:	2010      	movs	r0, #16
 8001570:	f7ff fec4 	bl	80012fc <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <DS1307_SetYear+0x50>)
 8001578:	fba2 1203 	umull	r1, r2, r2, r3
 800157c:	0952      	lsrs	r2, r2, #5
 800157e:	2164      	movs	r1, #100	@ 0x64
 8001580:	fb01 f202 	mul.w	r2, r1, r2
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f87a 	bl	8001684 <DS1307_EncodeBCD>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	2006      	movs	r0, #6
 8001596:	f7ff feb1 	bl	80012fc <DS1307_SetRegByte>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	51eb851f 	.word	0x51eb851f

080015a8 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f862 	bl	8001684 <DS1307_EncodeBCD>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4619      	mov	r1, r3
 80015c4:	2002      	movs	r0, #2
 80015c6:	f7ff fe99 	bl	80012fc <DS1307_SetRegByte>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f850 	bl	8001684 <DS1307_EncodeBCD>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4619      	mov	r1, r3
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff fe87 	bl	80012fc <DS1307_SetRegByte>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 8001600:	f7ff fe6f 	bl	80012e2 <DS1307_GetClockHalt>
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8001608:	79fa      	ldrb	r2, [r7, #7]
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	4313      	orrs	r3, r2
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f837 	bl	8001684 <DS1307_EncodeBCD>
 8001616:	4603      	mov	r3, r0
 8001618:	4619      	mov	r1, r3
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff fe6e 	bl	80012fc <DS1307_SetRegByte>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <DS1307_SetTimeZone>:
 * @brief Sets UTC offset.
 * @note  UTC offset is not updated automatically.
 * @param hr UTC hour offset, -12 to 12.
 * @param min UTC minute offset, 0 to 59.
 */
void DS1307_SetTimeZone(int8_t hr, uint8_t min) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_UTC_HR, hr);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4619      	mov	r1, r3
 800163c:	2008      	movs	r0, #8
 800163e:	f7ff fe5d 	bl	80012fc <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_UTC_MIN, min);
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	4619      	mov	r1, r3
 8001646:	2009      	movs	r0, #9
 8001648:	f7ff fe58 	bl	80012fc <DS1307_SetRegByte>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	b2da      	uxtb	r2, r3
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	b2db      	uxtb	r3, r3
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800168e:	79fa      	ldrb	r2, [r7, #7]
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <DS1307_EncodeBCD+0x40>)
 8001692:	fba3 1302 	umull	r1, r3, r3, r2
 8001696:	08d9      	lsrs	r1, r3, #3
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	4907      	ldr	r1, [pc, #28]	@ (80016c4 <DS1307_EncodeBCD+0x40>)
 80016a8:	fba1 1303 	umull	r1, r3, r1, r3
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	b2db      	uxtb	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	cccccccd 	.word	0xcccccccd

080016c8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af04      	add	r7, sp, #16
 80016ce:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4aa5      	ldr	r2, [pc, #660]	@ (800196c <HAL_UART_RxCpltCallback+0x2a4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	f040 8144 	bne.w	8001964 <HAL_UART_RxCpltCallback+0x29c>
    {
        switch (current_state)
 80016dc:	4ba4      	ldr	r3, [pc, #656]	@ (8001970 <HAL_UART_RxCpltCallback+0x2a8>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b07      	cmp	r3, #7
 80016e2:	f200 8129 	bhi.w	8001938 <HAL_UART_RxCpltCallback+0x270>
 80016e6:	a201      	add	r2, pc, #4	@ (adr r2, 80016ec <HAL_UART_RxCpltCallback+0x24>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	0800170d 	.word	0x0800170d
 80016f0:	08001749 	.word	0x08001749
 80016f4:	08001767 	.word	0x08001767
 80016f8:	08001799 	.word	0x08001799
 80016fc:	08001833 	.word	0x08001833
 8001700:	08001851 	.word	0x08001851
 8001704:	0800187f 	.word	0x0800187f
 8001708:	080018c1 	.word	0x080018c1
        {
            case IDLE:
                if (rxData == 'S') // 'S' for START
 800170c:	4b99      	ldr	r3, [pc, #612]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b53      	cmp	r3, #83	@ 0x53
 8001712:	f040 8113 	bne.w	800193c <HAL_UART_RxCpltCallback+0x274>
                {
                    // Reset set_time and bounds when starting new input
                    set_time.Hour = 0;
 8001716:	4b98      	ldr	r3, [pc, #608]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
                    set_time.Minute = 0;
 800171c:	4b96      	ldr	r3, [pc, #600]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 800171e:	2200      	movs	r2, #0
 8001720:	705a      	strb	r2, [r3, #1]
                    set_time_to_mins = 0;
 8001722:	4b96      	ldr	r3, [pc, #600]	@ (800197c <HAL_UART_RxCpltCallback+0x2b4>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
                    lower_bound_mins = 0;
 8001728:	4b95      	ldr	r3, [pc, #596]	@ (8001980 <HAL_UART_RxCpltCallback+0x2b8>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
                    upper_bound_mins = 0;
 800172e:	4b95      	ldr	r3, [pc, #596]	@ (8001984 <HAL_UART_RxCpltCallback+0x2bc>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
                    current_state = SET_HOUR;
 8001734:	4b8e      	ldr	r3, [pc, #568]	@ (8001970 <HAL_UART_RxCpltCallback+0x2a8>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Transmit(&huart1, (uint8_t*)"PRESS [SET HOUR]\r\n", strlen("PRESS [SET HOUR]\r\n"), UART_TIMEOUT);
 800173a:	2364      	movs	r3, #100	@ 0x64
 800173c:	2212      	movs	r2, #18
 800173e:	4992      	ldr	r1, [pc, #584]	@ (8001988 <HAL_UART_RxCpltCallback+0x2c0>)
 8001740:	4892      	ldr	r0, [pc, #584]	@ (800198c <HAL_UART_RxCpltCallback+0x2c4>)
 8001742:	f006 f959 	bl	80079f8 <HAL_UART_Transmit>
                }
                break;
 8001746:	e0f9      	b.n	800193c <HAL_UART_RxCpltCallback+0x274>

            case SET_HOUR:
                if (rxData == 'H') // 'H' for SET HOUR
 8001748:	4b8a      	ldr	r3, [pc, #552]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b48      	cmp	r3, #72	@ 0x48
 800174e:	f040 80f7 	bne.w	8001940 <HAL_UART_RxCpltCallback+0x278>
                {
                    HAL_UART_Transmit(&huart1, (uint8_t*)"Enter H (0-23)\r\n", strlen("Enter H (0-23)\r\n"), UART_TIMEOUT);
 8001752:	2364      	movs	r3, #100	@ 0x64
 8001754:	2210      	movs	r2, #16
 8001756:	498e      	ldr	r1, [pc, #568]	@ (8001990 <HAL_UART_RxCpltCallback+0x2c8>)
 8001758:	488c      	ldr	r0, [pc, #560]	@ (800198c <HAL_UART_RxCpltCallback+0x2c4>)
 800175a:	f006 f94d 	bl	80079f8 <HAL_UART_Transmit>
                    current_state = SET_HOUR_INPUT;
 800175e:	4b84      	ldr	r3, [pc, #528]	@ (8001970 <HAL_UART_RxCpltCallback+0x2a8>)
 8001760:	2202      	movs	r2, #2
 8001762:	701a      	strb	r2, [r3, #0]
                }
                break;
 8001764:	e0ec      	b.n	8001940 <HAL_UART_RxCpltCallback+0x278>

            case SET_HOUR_INPUT:
                if (rxData >= '0' && rxData <= '2') // First digit of hour (0-2)
 8001766:	4b83      	ldr	r3, [pc, #524]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b2f      	cmp	r3, #47	@ 0x2f
 800176c:	f240 80ea 	bls.w	8001944 <HAL_UART_RxCpltCallback+0x27c>
 8001770:	4b80      	ldr	r3, [pc, #512]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b32      	cmp	r3, #50	@ 0x32
 8001776:	f200 80e5 	bhi.w	8001944 <HAL_UART_RxCpltCallback+0x27c>
                {
                    set_time.Hour = rxData - '0'; // Convert ASCII to integer
 800177a:	4b7e      	ldr	r3, [pc, #504]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	3b30      	subs	r3, #48	@ 0x30
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b7d      	ldr	r3, [pc, #500]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 8001784:	701a      	strb	r2, [r3, #0]
                    current_state = SET_HOUR_TENS; // Always wait for second digit
 8001786:	4b7a      	ldr	r3, [pc, #488]	@ (8001970 <HAL_UART_RxCpltCallback+0x2a8>)
 8001788:	2203      	movs	r2, #3
 800178a:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Receive_IT(&huart1, &rxData, 1); // Wait for next digit
 800178c:	2201      	movs	r2, #1
 800178e:	4979      	ldr	r1, [pc, #484]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 8001790:	487e      	ldr	r0, [pc, #504]	@ (800198c <HAL_UART_RxCpltCallback+0x2c4>)
 8001792:	f006 f9bc 	bl	8007b0e <HAL_UART_Receive_IT>
                }
                break;
 8001796:	e0d5      	b.n	8001944 <HAL_UART_RxCpltCallback+0x27c>

            case SET_HOUR_TENS:
                if (set_time.Hour == 2 && rxData >= '0' && rxData <= '3') // Second digit for 20-23
 8001798:	4b77      	ldr	r3, [pc, #476]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d120      	bne.n	80017e2 <HAL_UART_RxCpltCallback+0x11a>
 80017a0:	4b74      	ldr	r3, [pc, #464]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80017a6:	d91c      	bls.n	80017e2 <HAL_UART_RxCpltCallback+0x11a>
 80017a8:	4b72      	ldr	r3, [pc, #456]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b33      	cmp	r3, #51	@ 0x33
 80017ae:	d818      	bhi.n	80017e2 <HAL_UART_RxCpltCallback+0x11a>
                {
                    set_time.Hour = (set_time.Hour * 10) + (rxData - '0');
 80017b0:	4b71      	ldr	r3, [pc, #452]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b6d      	ldr	r3, [pc, #436]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3b30      	subs	r3, #48	@ 0x30
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 80017cc:	701a      	strb	r2, [r3, #0]
                    current_state = SET_MIN;
 80017ce:	4b68      	ldr	r3, [pc, #416]	@ (8001970 <HAL_UART_RxCpltCallback+0x2a8>)
 80017d0:	2204      	movs	r2, #4
 80017d2:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Transmit(&huart1, (uint8_t*)"PRESS [SET MIN]\r\n", strlen("PRESS [SET MIN]\r\n"), UART_TIMEOUT);
 80017d4:	2364      	movs	r3, #100	@ 0x64
 80017d6:	2211      	movs	r2, #17
 80017d8:	496e      	ldr	r1, [pc, #440]	@ (8001994 <HAL_UART_RxCpltCallback+0x2cc>)
 80017da:	486c      	ldr	r0, [pc, #432]	@ (800198c <HAL_UART_RxCpltCallback+0x2c4>)
 80017dc:	f006 f90c 	bl	80079f8 <HAL_UART_Transmit>
                {
                    set_time.Hour = (set_time.Hour * 10) + (rxData - '0');
                    current_state = SET_MIN;
                    HAL_UART_Transmit(&huart1, (uint8_t*)"PRESS [SET MIN]\r\n", strlen("PRESS [SET MIN]\r\n"), UART_TIMEOUT);
                }
                break;
 80017e0:	e0b2      	b.n	8001948 <HAL_UART_RxCpltCallback+0x280>
                else if (set_time.Hour < 2 && rxData >= '0' && rxData <= '9') // Second digit for 00-19
 80017e2:	4b65      	ldr	r3, [pc, #404]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	f200 80ae 	bhi.w	8001948 <HAL_UART_RxCpltCallback+0x280>
 80017ec:	4b61      	ldr	r3, [pc, #388]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80017f2:	f240 80a9 	bls.w	8001948 <HAL_UART_RxCpltCallback+0x280>
 80017f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b39      	cmp	r3, #57	@ 0x39
 80017fc:	f200 80a4 	bhi.w	8001948 <HAL_UART_RxCpltCallback+0x280>
                    set_time.Hour = (set_time.Hour * 10) + (rxData - '0');
 8001800:	4b5d      	ldr	r3, [pc, #372]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4413      	add	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b59      	ldr	r3, [pc, #356]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	b2db      	uxtb	r3, r3
 8001816:	3b30      	subs	r3, #48	@ 0x30
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b57      	ldr	r3, [pc, #348]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 800181c:	701a      	strb	r2, [r3, #0]
                    current_state = SET_MIN;
 800181e:	4b54      	ldr	r3, [pc, #336]	@ (8001970 <HAL_UART_RxCpltCallback+0x2a8>)
 8001820:	2204      	movs	r2, #4
 8001822:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Transmit(&huart1, (uint8_t*)"PRESS [SET MIN]\r\n", strlen("PRESS [SET MIN]\r\n"), UART_TIMEOUT);
 8001824:	2364      	movs	r3, #100	@ 0x64
 8001826:	2211      	movs	r2, #17
 8001828:	495a      	ldr	r1, [pc, #360]	@ (8001994 <HAL_UART_RxCpltCallback+0x2cc>)
 800182a:	4858      	ldr	r0, [pc, #352]	@ (800198c <HAL_UART_RxCpltCallback+0x2c4>)
 800182c:	f006 f8e4 	bl	80079f8 <HAL_UART_Transmit>
                break;
 8001830:	e08a      	b.n	8001948 <HAL_UART_RxCpltCallback+0x280>

            case SET_MIN:
                if (rxData == 'M') // 'M' for SET MIN
 8001832:	4b50      	ldr	r3, [pc, #320]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b4d      	cmp	r3, #77	@ 0x4d
 8001838:	f040 8088 	bne.w	800194c <HAL_UART_RxCpltCallback+0x284>
                {
                    HAL_UART_Transmit(&huart1, (uint8_t*)"Enter M (0-59)\r\n", strlen("Enter M (0-59)\r\n"), UART_TIMEOUT);
 800183c:	2364      	movs	r3, #100	@ 0x64
 800183e:	2210      	movs	r2, #16
 8001840:	4955      	ldr	r1, [pc, #340]	@ (8001998 <HAL_UART_RxCpltCallback+0x2d0>)
 8001842:	4852      	ldr	r0, [pc, #328]	@ (800198c <HAL_UART_RxCpltCallback+0x2c4>)
 8001844:	f006 f8d8 	bl	80079f8 <HAL_UART_Transmit>
                    current_state = SET_MIN_INPUT;
 8001848:	4b49      	ldr	r3, [pc, #292]	@ (8001970 <HAL_UART_RxCpltCallback+0x2a8>)
 800184a:	2205      	movs	r2, #5
 800184c:	701a      	strb	r2, [r3, #0]
                }
                break;
 800184e:	e07d      	b.n	800194c <HAL_UART_RxCpltCallback+0x284>

            case SET_MIN_INPUT:
                if (rxData >= '0' && rxData <= '5') // First digit of minute (0-5)
 8001850:	4b48      	ldr	r3, [pc, #288]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b2f      	cmp	r3, #47	@ 0x2f
 8001856:	d97b      	bls.n	8001950 <HAL_UART_RxCpltCallback+0x288>
 8001858:	4b46      	ldr	r3, [pc, #280]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b35      	cmp	r3, #53	@ 0x35
 800185e:	d877      	bhi.n	8001950 <HAL_UART_RxCpltCallback+0x288>
                {
                    set_time.Minute = rxData - '0'; // Convert ASCII to integer
 8001860:	4b44      	ldr	r3, [pc, #272]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	3b30      	subs	r3, #48	@ 0x30
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b43      	ldr	r3, [pc, #268]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 800186a:	705a      	strb	r2, [r3, #1]
                    HAL_UART_Receive_IT(&huart1, &rxData, 1); // Wait for next digit
 800186c:	2201      	movs	r2, #1
 800186e:	4941      	ldr	r1, [pc, #260]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 8001870:	4846      	ldr	r0, [pc, #280]	@ (800198c <HAL_UART_RxCpltCallback+0x2c4>)
 8001872:	f006 f94c 	bl	8007b0e <HAL_UART_Receive_IT>
                    current_state = SET_MIN_TENS;
 8001876:	4b3e      	ldr	r3, [pc, #248]	@ (8001970 <HAL_UART_RxCpltCallback+0x2a8>)
 8001878:	2206      	movs	r2, #6
 800187a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800187c:	e068      	b.n	8001950 <HAL_UART_RxCpltCallback+0x288>

            case SET_MIN_TENS:
                if (rxData >= '0' && rxData <= '9') // Second digit for 00-59
 800187e:	4b3d      	ldr	r3, [pc, #244]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b2f      	cmp	r3, #47	@ 0x2f
 8001884:	d966      	bls.n	8001954 <HAL_UART_RxCpltCallback+0x28c>
 8001886:	4b3b      	ldr	r3, [pc, #236]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b39      	cmp	r3, #57	@ 0x39
 800188c:	d862      	bhi.n	8001954 <HAL_UART_RxCpltCallback+0x28c>
                {
                    set_time.Minute = (set_time.Minute * 10) + (rxData - '0');
 800188e:	4b3a      	ldr	r3, [pc, #232]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	461a      	mov	r2, r3
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	4413      	add	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b35      	ldr	r3, [pc, #212]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	3b30      	subs	r3, #48	@ 0x30
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 80018aa:	705a      	strb	r2, [r3, #1]
                    current_state = CONFIRM;
 80018ac:	4b30      	ldr	r3, [pc, #192]	@ (8001970 <HAL_UART_RxCpltCallback+0x2a8>)
 80018ae:	2207      	movs	r2, #7
 80018b0:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Transmit(&huart1, (uint8_t*)"Press [CONFIRM]\r\n", strlen("Press [CONFIRM]\r\n"), UART_TIMEOUT);
 80018b2:	2364      	movs	r3, #100	@ 0x64
 80018b4:	2211      	movs	r2, #17
 80018b6:	4939      	ldr	r1, [pc, #228]	@ (800199c <HAL_UART_RxCpltCallback+0x2d4>)
 80018b8:	4834      	ldr	r0, [pc, #208]	@ (800198c <HAL_UART_RxCpltCallback+0x2c4>)
 80018ba:	f006 f89d 	bl	80079f8 <HAL_UART_Transmit>
                }
                break;
 80018be:	e049      	b.n	8001954 <HAL_UART_RxCpltCallback+0x28c>

            case CONFIRM:
                if (rxData == 'C') // 'C' for CONFIRM
 80018c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b43      	cmp	r3, #67	@ 0x43
 80018c6:	d147      	bne.n	8001958 <HAL_UART_RxCpltCallback+0x290>
                {
                    char confirm_msg[20];
                    sprintf(confirm_msg, "Set to %02d:%02d\r\n", set_time.Hour, set_time.Minute);
 80018c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 80018d0:	785b      	ldrb	r3, [r3, #1]
 80018d2:	f107 000c 	add.w	r0, r7, #12
 80018d6:	4932      	ldr	r1, [pc, #200]	@ (80019a0 <HAL_UART_RxCpltCallback+0x2d8>)
 80018d8:	f007 fbc4 	bl	8009064 <siprintf>
                    HAL_UART_Transmit(&huart1, (uint8_t*)confirm_msg, strlen(confirm_msg), UART_TIMEOUT);
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fc35 	bl	8000150 <strlen>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	f107 010c 	add.w	r1, r7, #12
 80018ee:	2364      	movs	r3, #100	@ 0x64
 80018f0:	4826      	ldr	r0, [pc, #152]	@ (800198c <HAL_UART_RxCpltCallback+0x2c4>)
 80018f2:	f006 f881 	bl	80079f8 <HAL_UART_Transmit>
                    current_state = IDLE; // Reset to initial state
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <HAL_UART_RxCpltCallback+0x2a8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Transmit(&huart1, (uint8_t*)"DONE\r\n", strlen("DONE\r\n"), UART_TIMEOUT);
 80018fc:	2364      	movs	r3, #100	@ 0x64
 80018fe:	2206      	movs	r2, #6
 8001900:	4928      	ldr	r1, [pc, #160]	@ (80019a4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001902:	4822      	ldr	r0, [pc, #136]	@ (800198c <HAL_UART_RxCpltCallback+0x2c4>)
 8001904:	f006 f878 	bl	80079f8 <HAL_UART_Transmit>
                    // Update SMS message with the new alarm time
                    sprintf(sms_message, "You need to take your medicine at %02d:%02d", set_time.Hour, set_time.Minute);
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 8001910:	785b      	ldrb	r3, [r3, #1]
 8001912:	4925      	ldr	r1, [pc, #148]	@ (80019a8 <HAL_UART_RxCpltCallback+0x2e0>)
 8001914:	4825      	ldr	r0, [pc, #148]	@ (80019ac <HAL_UART_RxCpltCallback+0x2e4>)
 8001916:	f007 fba5 	bl	8009064 <siprintf>
                    // Recalculate bounds after setting new alarm time
                    Convert_Time_To_Mins(current_time, set_time, &current_time_to_mins, &set_time_to_mins, &lower_bound_mins, &upper_bound_mins);
 800191a:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <HAL_UART_RxCpltCallback+0x2b0>)
 800191c:	4a24      	ldr	r2, [pc, #144]	@ (80019b0 <HAL_UART_RxCpltCallback+0x2e8>)
 800191e:	4919      	ldr	r1, [pc, #100]	@ (8001984 <HAL_UART_RxCpltCallback+0x2bc>)
 8001920:	9103      	str	r1, [sp, #12]
 8001922:	4917      	ldr	r1, [pc, #92]	@ (8001980 <HAL_UART_RxCpltCallback+0x2b8>)
 8001924:	9102      	str	r1, [sp, #8]
 8001926:	4915      	ldr	r1, [pc, #84]	@ (800197c <HAL_UART_RxCpltCallback+0x2b4>)
 8001928:	9101      	str	r1, [sp, #4]
 800192a:	4922      	ldr	r1, [pc, #136]	@ (80019b4 <HAL_UART_RxCpltCallback+0x2ec>)
 800192c:	9100      	str	r1, [sp, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	ca07      	ldmia	r2, {r0, r1, r2}
 8001932:	f000 fd3b 	bl	80023ac <Convert_Time_To_Mins>
                }
                break;
 8001936:	e00f      	b.n	8001958 <HAL_UART_RxCpltCallback+0x290>

            default:
                break;
 8001938:	bf00      	nop
 800193a:	e00e      	b.n	800195a <HAL_UART_RxCpltCallback+0x292>
                break;
 800193c:	bf00      	nop
 800193e:	e00c      	b.n	800195a <HAL_UART_RxCpltCallback+0x292>
                break;
 8001940:	bf00      	nop
 8001942:	e00a      	b.n	800195a <HAL_UART_RxCpltCallback+0x292>
                break;
 8001944:	bf00      	nop
 8001946:	e008      	b.n	800195a <HAL_UART_RxCpltCallback+0x292>
                break;
 8001948:	bf00      	nop
 800194a:	e006      	b.n	800195a <HAL_UART_RxCpltCallback+0x292>
                break;
 800194c:	bf00      	nop
 800194e:	e004      	b.n	800195a <HAL_UART_RxCpltCallback+0x292>
                break;
 8001950:	bf00      	nop
 8001952:	e002      	b.n	800195a <HAL_UART_RxCpltCallback+0x292>
                break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <HAL_UART_RxCpltCallback+0x292>
                break;
 8001958:	bf00      	nop
        }

        // Prepare for next reception
        HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800195a:	2201      	movs	r2, #1
 800195c:	4905      	ldr	r1, [pc, #20]	@ (8001974 <HAL_UART_RxCpltCallback+0x2ac>)
 800195e:	480b      	ldr	r0, [pc, #44]	@ (800198c <HAL_UART_RxCpltCallback+0x2c4>)
 8001960:	f006 f8d5 	bl	8007b0e <HAL_UART_Receive_IT>
    }
}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40013800 	.word	0x40013800
 8001970:	200004af 	.word	0x200004af
 8001974:	200004ae 	.word	0x200004ae
 8001978:	200003e8 	.word	0x200003e8
 800197c:	2000045c 	.word	0x2000045c
 8001980:	20000460 	.word	0x20000460
 8001984:	20000464 	.word	0x20000464
 8001988:	0800b314 	.word	0x0800b314
 800198c:	200002fc 	.word	0x200002fc
 8001990:	0800b328 	.word	0x0800b328
 8001994:	0800b33c 	.word	0x0800b33c
 8001998:	0800b350 	.word	0x0800b350
 800199c:	0800b364 	.word	0x0800b364
 80019a0:	0800b378 	.word	0x0800b378
 80019a4:	0800b38c 	.word	0x0800b38c
 80019a8:	0800b394 	.word	0x0800b394
 80019ac:	2000047c 	.word	0x2000047c
 80019b0:	200003dc 	.word	0x200003dc
 80019b4:	20000458 	.word	0x20000458

080019b8 <HAL_GPIO_EXTI_Callback>:

// External interrupt callback for button press on PC14.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_PIN == GPIO_PIN_14)
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019c8:	f040 80a0 	bne.w	8001b0c <HAL_GPIO_EXTI_Callback+0x154>
    {
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15); // Test button
		current_box_cnt++; // // Increment button press counter for debugging
 80019cc:	4b51      	ldr	r3, [pc, #324]	@ (8001b14 <HAL_GPIO_EXTI_Callback+0x15c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001b14 <HAL_GPIO_EXTI_Callback+0x15c>)
 80019d8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 100000; i++); // Simple debounce delay
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_EXTI_Callback+0x2e>
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3301      	adds	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001b18 <HAL_GPIO_EXTI_Callback+0x160>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	ddf8      	ble.n	80019e0 <HAL_GPIO_EXTI_Callback+0x28>

		// Wait for button release with timeout
		int timeout = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) && (timeout < 50000)) // Đợi đến khi thả nút nhấn trong khoảng thời gian nhất định
 80019f2:	e002      	b.n	80019fa <HAL_GPIO_EXTI_Callback+0x42>
		{
			timeout++;
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	3301      	adds	r3, #1
 80019f8:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) && (timeout < 50000)) // Đợi đến khi thả nút nhấn trong khoảng thời gian nhất định
 80019fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019fe:	4847      	ldr	r0, [pc, #284]	@ (8001b1c <HAL_GPIO_EXTI_Callback+0x164>)
 8001a00:	f002 f8d8 	bl	8003bb4 <HAL_GPIO_ReadPin>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d104      	bne.n	8001a14 <HAL_GPIO_EXTI_Callback+0x5c>
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001a10:	4293      	cmp	r3, r2
 8001a12:	ddef      	ble.n	80019f4 <HAL_GPIO_EXTI_Callback+0x3c>
		}
		EXTI->PR |= GPIO_PIN_14; // Clear interrupt pending bit
 8001a14:	4b42      	ldr	r3, [pc, #264]	@ (8001b20 <HAL_GPIO_EXTI_Callback+0x168>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	4a41      	ldr	r2, [pc, #260]	@ (8001b20 <HAL_GPIO_EXTI_Callback+0x168>)
 8001a1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a1e:	6153      	str	r3, [r2, #20]

		// Check if current time is within valid window [ timeset-30mins ; timeset+30mins )
		uint8_t is_valid_press_button = (lower_bound_mins <= upper_bound_mins)
 8001a20:	4b40      	ldr	r3, [pc, #256]	@ (8001b24 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b40      	ldr	r3, [pc, #256]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0x170>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dc10      	bgt.n	8001a4e <HAL_GPIO_EXTI_Callback+0x96>
			? (current_time_to_mins >= lower_bound_mins && current_time_to_mins <= upper_bound_mins)
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0x174>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b3c      	ldr	r3, [pc, #240]	@ (8001b24 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	db07      	blt.n	8001a48 <HAL_GPIO_EXTI_Callback+0x90>
 8001a38:	4b3c      	ldr	r3, [pc, #240]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0x174>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0x170>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	dc01      	bgt.n	8001a48 <HAL_GPIO_EXTI_Callback+0x90>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_GPIO_EXTI_Callback+0x92>
 8001a48:	2300      	movs	r3, #0
		uint8_t is_valid_press_button = (lower_bound_mins <= upper_bound_mins)
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	e00f      	b.n	8001a6e <HAL_GPIO_EXTI_Callback+0xb6>
			: (current_time_to_mins >= lower_bound_mins || current_time_to_mins <= upper_bound_mins);
 8001a4e:	4b37      	ldr	r3, [pc, #220]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0x174>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b34      	ldr	r3, [pc, #208]	@ (8001b24 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	da05      	bge.n	8001a66 <HAL_GPIO_EXTI_Callback+0xae>
 8001a5a:	4b34      	ldr	r3, [pc, #208]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0x174>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4b32      	ldr	r3, [pc, #200]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0x170>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dc01      	bgt.n	8001a6a <HAL_GPIO_EXTI_Callback+0xb2>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_EXTI_Callback+0xb4>
 8001a6a:	2300      	movs	r3, #0
		uint8_t is_valid_press_button = (lower_bound_mins <= upper_bound_mins)
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	73fb      	strb	r3, [r7, #15]
	    // Check if within music window [ set_time ; set_time+30mins )
	    uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 8001a70:	4b2f      	ldr	r3, [pc, #188]	@ (8001b30 <HAL_GPIO_EXTI_Callback+0x178>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0x170>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	da10      	bge.n	8001a9e <HAL_GPIO_EXTI_Callback+0xe6>
		    ? (current_time_to_mins >= set_time_to_mins && current_time_to_mins <= upper_bound_mins)
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0x174>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b2b      	ldr	r3, [pc, #172]	@ (8001b30 <HAL_GPIO_EXTI_Callback+0x178>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	db07      	blt.n	8001a98 <HAL_GPIO_EXTI_Callback+0xe0>
 8001a88:	4b28      	ldr	r3, [pc, #160]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0x174>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0x170>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dc01      	bgt.n	8001a98 <HAL_GPIO_EXTI_Callback+0xe0>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_GPIO_EXTI_Callback+0xe2>
 8001a98:	2300      	movs	r3, #0
	    uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	e00f      	b.n	8001abe <HAL_GPIO_EXTI_Callback+0x106>
		    : (current_time_to_mins >= set_time_to_mins || current_time_to_mins <= upper_bound_mins);
 8001a9e:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0x174>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <HAL_GPIO_EXTI_Callback+0x178>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	da05      	bge.n	8001ab6 <HAL_GPIO_EXTI_Callback+0xfe>
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0x174>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0x170>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dc01      	bgt.n	8001aba <HAL_GPIO_EXTI_Callback+0x102>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_EXTI_Callback+0x104>
 8001aba:	2300      	movs	r3, #0
	    uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	73bb      	strb	r3, [r7, #14]

		if (is_valid_press_button)
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d019      	beq.n	8001afa <HAL_GPIO_EXTI_Callback+0x142>
		{
			box_mode = 1;  // Box opened
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b34 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
			alarm_completed = 1;  // Mark alarm as completed
 8001acc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <HAL_GPIO_EXTI_Callback+0x180>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ad8:	4818      	ldr	r0, [pc, #96]	@ (8001b3c <HAL_GPIO_EXTI_Callback+0x184>)
 8001ada:	f002 f882 	bl	8003be2 <HAL_GPIO_WritePin>

			// Pause music only if within music window and music is playing
//			if (in_window_mp3 && df_ctx.state == DF_IDLE && df_ctx.is_playing)
			if (in_window_mp3 && df_ctx.is_playing)
 8001ade:	7bbb      	ldrb	r3, [r7, #14]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d013      	beq.n	8001b0c <HAL_GPIO_EXTI_Callback+0x154>
 8001ae4:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <HAL_GPIO_EXTI_Callback+0x188>)
 8001ae6:	7c1b      	ldrb	r3, [r3, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00f      	beq.n	8001b0c <HAL_GPIO_EXTI_Callback+0x154>
			{
				DF_Pause(&df_ctx); // Pause the music playback
 8001aec:	4814      	ldr	r0, [pc, #80]	@ (8001b40 <HAL_GPIO_EXTI_Callback+0x188>)
 8001aee:	f7ff fb81 	bl	80011f4 <DF_Pause>
				already_warned_mp3 = 1; // Ensure music doesn't play again in this cycle
 8001af2:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
		{
			box_mode = 0; // Box remains closed outside the time window
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		}
    }
}
 8001af8:	e008      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x154>
			box_mode = 0; // Box remains closed outside the time window
 8001afa:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b06:	480d      	ldr	r0, [pc, #52]	@ (8001b3c <HAL_GPIO_EXTI_Callback+0x184>)
 8001b08:	f002 f86b 	bl	8003be2 <HAL_GPIO_WritePin>
}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000471 	.word	0x20000471
 8001b18:	0001869f 	.word	0x0001869f
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40010400 	.word	0x40010400
 8001b24:	20000460 	.word	0x20000460
 8001b28:	20000464 	.word	0x20000464
 8001b2c:	20000458 	.word	0x20000458
 8001b30:	2000045c 	.word	0x2000045c
 8001b34:	20000472 	.word	0x20000472
 8001b38:	20000473 	.word	0x20000473
 8001b3c:	40010c00 	.word	0x40010c00
 8001b40:	200003ec 	.word	0x200003ec
 8001b44:	20000478 	.word	0x20000478

08001b48 <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt callback (every 1 second)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b08d      	sub	sp, #52	@ 0x34
 8001b4c:	af04      	add	r7, sp, #16
 8001b4e:	6178      	str	r0, [r7, #20]
    if (htim->Instance == TIM1)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a89      	ldr	r2, [pc, #548]	@ (8001d7c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10a      	bne.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
        tick_ms++;        // Increment millisecond counter
 8001b5a:	4b89      	ldr	r3, [pc, #548]	@ (8001d80 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	4a87      	ldr	r2, [pc, #540]	@ (8001d80 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001b62:	6013      	str	r3, [r2, #0]
        tick_us += 1000;  // Increment microsecond counter (1000 µs = 1 ms)
 8001b64:	4b87      	ldr	r3, [pc, #540]	@ (8001d84 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b6c:	4a85      	ldr	r2, [pc, #532]	@ (8001d84 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001b6e:	6013      	str	r3, [r2, #0]
    }
    if (htim->Instance == TIM3)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a84      	ldr	r2, [pc, #528]	@ (8001d88 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	f040 80fd 	bne.w	8001d76 <HAL_TIM_PeriodElapsedCallback+0x22e>
    {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b80:	4882      	ldr	r0, [pc, #520]	@ (8001d8c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001b82:	f002 f846 	bl	8003c12 <HAL_GPIO_TogglePin>
        flag_update_time = 1; // Set flag to update display and logic
 8001b86:	4b82      	ldr	r3, [pc, #520]	@ (8001d90 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]

        // Convert to minutes
        current_time = DS1307_GetTime();
 8001b8c:	4c81      	ldr	r4, [pc, #516]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001b8e:	463b      	mov	r3, r7
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fc73 	bl	800147c <DS1307_GetTime>
 8001b96:	4623      	mov	r3, r4
 8001b98:	463a      	mov	r2, r7
 8001b9a:	6810      	ldr	r0, [r2, #0]
 8001b9c:	6851      	ldr	r1, [r2, #4]
 8001b9e:	c303      	stmia	r3!, {r0, r1}
 8001ba0:	8912      	ldrh	r2, [r2, #8]
 8001ba2:	801a      	strh	r2, [r3, #0]
        Convert_Time_To_Mins(current_time, set_time, &current_time_to_mins, &set_time_to_mins, &lower_bound_mins, &upper_bound_mins);
 8001ba4:	4b7c      	ldr	r3, [pc, #496]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001ba6:	4a7b      	ldr	r2, [pc, #492]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ba8:	497c      	ldr	r1, [pc, #496]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001baa:	9103      	str	r1, [sp, #12]
 8001bac:	497c      	ldr	r1, [pc, #496]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bae:	9102      	str	r1, [sp, #8]
 8001bb0:	497c      	ldr	r1, [pc, #496]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001bb2:	9101      	str	r1, [sp, #4]
 8001bb4:	497c      	ldr	r1, [pc, #496]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bb6:	9100      	str	r1, [sp, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bbc:	f000 fbf6 	bl	80023ac <Convert_Time_To_Mins>

        // Only process alarm logic if not in the process of setting time
        if (current_state != IDLE)
 8001bc0:	4b7a      	ldr	r3, [pc, #488]	@ (8001dac <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f040 80d3 	bne.w	8001d70 <HAL_TIM_PeriodElapsedCallback+0x228>
        {
            return; // Skip alarm logic while setting time
        }

        // Check if current time is within valid window [set_time-30mins ; set_time+30mins + 3mins)
        uint8_t is_valid_alarm = (lower_bound_mins < (upper_bound_mins + 3) % 1440)
 8001bca:	4b74      	ldr	r3, [pc, #464]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3303      	adds	r3, #3
 8001bd0:	4a77      	ldr	r2, [pc, #476]	@ (8001db0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001bd2:	fb82 1203 	smull	r1, r2, r2, r3
 8001bd6:	441a      	add	r2, r3
 8001bd8:	1291      	asrs	r1, r2, #10
 8001bda:	17da      	asrs	r2, r3, #31
 8001bdc:	1a8a      	subs	r2, r1, r2
 8001bde:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 8001be2:	fb01 f202 	mul.w	r2, r1, r2
 8001be6:	1a9a      	subs	r2, r3, r2
 8001be8:	4b6d      	ldr	r3, [pc, #436]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	dd1d      	ble.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0xe4>
            ? (current_time_to_mins >= lower_bound_mins && current_time_to_mins <= (upper_bound_mins + 3) % 1440)
 8001bf0:	4b6d      	ldr	r3, [pc, #436]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	db14      	blt.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0xde>
 8001bfc:	4b67      	ldr	r3, [pc, #412]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3303      	adds	r3, #3
 8001c02:	4a6b      	ldr	r2, [pc, #428]	@ (8001db0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c04:	fb82 1203 	smull	r1, r2, r2, r3
 8001c08:	441a      	add	r2, r3
 8001c0a:	1291      	asrs	r1, r2, #10
 8001c0c:	17da      	asrs	r2, r3, #31
 8001c0e:	1a8a      	subs	r2, r1, r2
 8001c10:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 8001c14:	fb01 f202 	mul.w	r2, r1, r2
 8001c18:	1a9a      	subs	r2, r3, r2
 8001c1a:	4b63      	ldr	r3, [pc, #396]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	db01      	blt.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0xde>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8001c26:	2300      	movs	r3, #0
        uint8_t is_valid_alarm = (lower_bound_mins < (upper_bound_mins + 3) % 1440)
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	e01c      	b.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x11e>
            : (current_time_to_mins >= lower_bound_mins || current_time_to_mins <= (upper_bound_mins + 3) % 1440);
 8001c2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b5b      	ldr	r3, [pc, #364]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	da12      	bge.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x116>
 8001c38:	4b58      	ldr	r3, [pc, #352]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3303      	adds	r3, #3
 8001c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001db0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c40:	fb82 1203 	smull	r1, r2, r2, r3
 8001c44:	441a      	add	r2, r3
 8001c46:	1291      	asrs	r1, r2, #10
 8001c48:	17da      	asrs	r2, r3, #31
 8001c4a:	1a8a      	subs	r2, r1, r2
 8001c4c:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 8001c50:	fb01 f202 	mul.w	r2, r1, r2
 8001c54:	1a9a      	subs	r2, r3, r2
 8001c56:	4b54      	ldr	r3, [pc, #336]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	db01      	blt.n	8001c62 <HAL_TIM_PeriodElapsedCallback+0x11a>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8001c62:	2300      	movs	r3, #0
        uint8_t is_valid_alarm = (lower_bound_mins < (upper_bound_mins + 3) % 1440)
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	77fb      	strb	r3, [r7, #31]

        // Check if within music window [set_time ; set_time+30mins)
        uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 8001c68:	4b4e      	ldr	r3, [pc, #312]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	da10      	bge.n	8001c96 <HAL_TIM_PeriodElapsedCallback+0x14e>
            ? (current_time_to_mins >= set_time_to_mins && current_time_to_mins <= upper_bound_mins)
 8001c74:	4b4c      	ldr	r3, [pc, #304]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b4a      	ldr	r3, [pc, #296]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	db07      	blt.n	8001c90 <HAL_TIM_PeriodElapsedCallback+0x148>
 8001c80:	4b49      	ldr	r3, [pc, #292]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b45      	ldr	r3, [pc, #276]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dc01      	bgt.n	8001c90 <HAL_TIM_PeriodElapsedCallback+0x148>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_TIM_PeriodElapsedCallback+0x14a>
 8001c90:	2300      	movs	r3, #0
        uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	e00f      	b.n	8001cb6 <HAL_TIM_PeriodElapsedCallback+0x16e>
            : (current_time_to_mins >= set_time_to_mins || current_time_to_mins <= upper_bound_mins);
 8001c96:	4b44      	ldr	r3, [pc, #272]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b42      	ldr	r3, [pc, #264]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	da05      	bge.n	8001cae <HAL_TIM_PeriodElapsedCallback+0x166>
 8001ca2:	4b41      	ldr	r3, [pc, #260]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dc01      	bgt.n	8001cb2 <HAL_TIM_PeriodElapsedCallback+0x16a>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8001cb2:	2300      	movs	r3, #0
        uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	77bb      	strb	r3, [r7, #30]

        if (is_valid_alarm)
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d042      	beq.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x1fc>
        {
            if (box_mode || alarm_completed)
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d104      	bne.n	8001cd2 <HAL_TIM_PeriodElapsedCallback+0x18a>
 8001cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8001db8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d008      	beq.n	8001ce4 <HAL_TIM_PeriodElapsedCallback+0x19c>
            {
                if (already_warned_mp3)
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d04b      	beq.n	8001d74 <HAL_TIM_PeriodElapsedCallback+0x22c>
                {
                    DF_Pause(&df_ctx); // Ensure music is paused if box is open
 8001cdc:	4838      	ldr	r0, [pc, #224]	@ (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001cde:	f7ff fa89 	bl	80011f4 <DF_Pause>
                }
                return; // Box already opened, no need to play music or send SMS
 8001ce2:	e047      	b.n	8001d74 <HAL_TIM_PeriodElapsedCallback+0x22c>
            }
            else if (in_window_mp3 && !already_warned_mp3)
 8001ce4:	7fbb      	ldrb	r3, [r7, #30]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00e      	beq.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8001cea:	4b34      	ldr	r3, [pc, #208]	@ (8001dbc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x1c0>
            {
                // Play music
                DF_PlayFromStart(&df_ctx);
 8001cf4:	4832      	ldr	r0, [pc, #200]	@ (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001cf6:	f7ff fa6d 	bl	80011d4 <DF_PlayFromStart>
                already_warned_mp3 = 1;
 8001cfa:	4b30      	ldr	r3, [pc, #192]	@ (8001dbc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
                tick = 1; // Debug flag
 8001d00:	4b30      	ldr	r3, [pc, #192]	@ (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e036      	b.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x22e>
            }
            else if ((current_time_to_mins > upper_bound_mins) && !already_warned_sms)
 8001d08:	4b27      	ldr	r3, [pc, #156]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b23      	ldr	r3, [pc, #140]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dd30      	ble.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x22e>
 8001d14:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d12b      	bne.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x22e>
            {
                // Send SMS only once
                DF_Pause(&df_ctx);
 8001d1e:	4828      	ldr	r0, [pc, #160]	@ (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d20:	f7ff fa68 	bl	80011f4 <DF_Pause>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001d24:	2201      	movs	r2, #1
 8001d26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d2a:	4828      	ldr	r0, [pc, #160]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d2c:	f001 ff59 	bl	8003be2 <HAL_GPIO_WritePin>
                tick = 2; // Debug flag
 8001d30:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
                send_sms_now = 1;
 8001d36:	4b26      	ldr	r3, [pc, #152]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
                already_warned_sms = 1; // Set flag to prevent further SMS
 8001d3c:	4b22      	ldr	r3, [pc, #136]	@ (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e018      	b.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x22e>
            }
        }
        else
        {
            // Reset all states outside valid window
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d4a:	4820      	ldr	r0, [pc, #128]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d4c:	f001 ff49 	bl	8003be2 <HAL_GPIO_WritePin>
            box_mode = 0;           // Ensure box is closed
 8001d50:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
            already_warned_mp3 = 0; // Reset music flag
 8001d56:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
            send_sms_now = 0;       // Reset SMS trigger
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
            already_warned_sms = 0; // Reset SMS flag
 8001d62:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
            alarm_completed = 0;    // Reset alarm completion flag
 8001d68:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	e002      	b.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x22e>
            return; // Skip alarm logic while setting time
 8001d70:	bf00      	nop
 8001d72:	e000      	b.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x22e>
                return; // Box already opened, no need to play music or send SMS
 8001d74:	bf00      	nop
        }
    }
}
 8001d76:	3724      	adds	r7, #36	@ 0x24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd90      	pop	{r4, r7, pc}
 8001d7c:	40012c00 	.word	0x40012c00
 8001d80:	200003d4 	.word	0x200003d4
 8001d84:	200003d8 	.word	0x200003d8
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	20000470 	.word	0x20000470
 8001d94:	200003dc 	.word	0x200003dc
 8001d98:	200003e8 	.word	0x200003e8
 8001d9c:	20000464 	.word	0x20000464
 8001da0:	20000460 	.word	0x20000460
 8001da4:	2000045c 	.word	0x2000045c
 8001da8:	20000458 	.word	0x20000458
 8001dac:	200004af 	.word	0x200004af
 8001db0:	b60b60b7 	.word	0xb60b60b7
 8001db4:	20000472 	.word	0x20000472
 8001db8:	20000473 	.word	0x20000473
 8001dbc:	20000478 	.word	0x20000478
 8001dc0:	200003ec 	.word	0x200003ec
 8001dc4:	20000474 	.word	0x20000474
 8001dc8:	20000479 	.word	0x20000479
 8001dcc:	40010c00 	.word	0x40010c00
 8001dd0:	2000047a 	.word	0x2000047a

08001dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b089      	sub	sp, #36	@ 0x24
 8001dd8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dda:	f001 fb13 	bl	8003404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dde:	f000 f8e1 	bl	8001fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de2:	f000 fa69 	bl	80022b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001de6:	f000 f91d 	bl	8002024 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001dea:	f000 f9e7 	bl	80021bc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001dee:	f000 f997 	bl	8002120 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001df2:	f000 fa0d 	bl	8002210 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001df6:	f000 fa35 	bl	8002264 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001dfa:	f000 f941 	bl	8002080 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001dfe:	4852      	ldr	r0, [pc, #328]	@ (8001f48 <main+0x174>)
 8001e00:	f005 fa08 	bl	8007214 <HAL_TIM_Base_Start_IT>

  // Initialize delay module using Timer 1
  delay_init();
 8001e04:	f7ff fa06 	bl	8001214 <delay_init>

  // Initialize DS1307, OLED, and SHT4x
  DS1307_Init(&hi2c1);        // Initialize RTC
 8001e08:	4850      	ldr	r0, [pc, #320]	@ (8001f4c <main+0x178>)
 8001e0a:	f7ff fa39 	bl	8001280 <DS1307_Init>
  SSD1306_Init();             // Initialize OLED display
 8001e0e:	f000 fd61 	bl	80028d4 <SSD1306_Init>
  sensirion_i2c_init();       // Initialize I2C HAL wrapper
 8001e12:	f000 fbbb 	bl	800258c <sensirion_i2c_init>
  sht4x_init();               // Initialize SHT4x sensor
 8001e16:	f000 fbbf 	bl	8002598 <sht4x_init>

  // Initialize DFPlayer with volume 10
  DF_Init(&df_ctx, &huart2, 15);
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	494c      	ldr	r1, [pc, #304]	@ (8001f50 <main+0x17c>)
 8001e1e:	484d      	ldr	r0, [pc, #308]	@ (8001f54 <main+0x180>)
 8001e20:	f7ff f8d1 	bl	8000fc6 <DF_Init>

  // Initialize SMS message with default alarm time
  sprintf(sms_message, "You need to take your medicine at %02d:%02d", set_time.Hour, set_time.Minute);
 8001e24:	4b4c      	ldr	r3, [pc, #304]	@ (8001f58 <main+0x184>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f58 <main+0x184>)
 8001e2c:	785b      	ldrb	r3, [r3, #1]
 8001e2e:	494b      	ldr	r1, [pc, #300]	@ (8001f5c <main+0x188>)
 8001e30:	484b      	ldr	r0, [pc, #300]	@ (8001f60 <main+0x18c>)
 8001e32:	f007 f917 	bl	8009064 <siprintf>
  SIM_SendSMS_Init(&sim_ctx, &huart3, "+84935120229", sms_message);
 8001e36:	4b4a      	ldr	r3, [pc, #296]	@ (8001f60 <main+0x18c>)
 8001e38:	4a4a      	ldr	r2, [pc, #296]	@ (8001f64 <main+0x190>)
 8001e3a:	494b      	ldr	r1, [pc, #300]	@ (8001f68 <main+0x194>)
 8001e3c:	484b      	ldr	r0, [pc, #300]	@ (8001f6c <main+0x198>)
 8001e3e:	f000 fc39 	bl	80026b4 <SIM_SendSMS_Init>

  // Set initial RTC time if needed
  #if INIT_RTC_TIME
	  DS1307_SetClockHalt(0);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff fa2c 	bl	80012a0 <DS1307_SetClockHalt>
	  DS1307_SetTimeZone(+7, 0);
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2007      	movs	r0, #7
 8001e4c:	f7ff fbec 	bl	8001628 <DS1307_SetTimeZone>
	  DS1307_SetDate(04);
 8001e50:	2004      	movs	r0, #4
 8001e52:	f7ff fb5b 	bl	800150c <DS1307_SetDate>
	  DS1307_SetMonth(05);
 8001e56:	2005      	movs	r0, #5
 8001e58:	f7ff fb6a 	bl	8001530 <DS1307_SetMonth>
	  DS1307_SetYear(2025);
 8001e5c:	f240 70e9 	movw	r0, #2025	@ 0x7e9
 8001e60:	f7ff fb78 	bl	8001554 <DS1307_SetYear>
	  DS1307_SetDayOfWeek(0);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff fb3f 	bl	80014e8 <DS1307_SetDayOfWeek>
	  DS1307_SetHour(15);
 8001e6a:	200f      	movs	r0, #15
 8001e6c:	f7ff fb9c 	bl	80015a8 <DS1307_SetHour>
	  DS1307_SetMinute(00);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff fbae 	bl	80015d2 <DS1307_SetMinute>
	  DS1307_SetSecond(40);
 8001e76:	2028      	movs	r0, #40	@ 0x28
 8001e78:	f7ff fbbd 	bl	80015f6 <DS1307_SetSecond>
  #endif

  // Set alarm time based on input mode
  #if PREDEFINED_INPUT
	  set_time.Hour = 14;
 8001e7c:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <main+0x184>)
 8001e7e:	220e      	movs	r2, #14
 8001e80:	701a      	strb	r2, [r3, #0]
	  set_time.Minute = 31;
 8001e82:	4b35      	ldr	r3, [pc, #212]	@ (8001f58 <main+0x184>)
 8001e84:	221f      	movs	r2, #31
 8001e86:	705a      	strb	r2, [r3, #1]
	  Convert_Time_To_Mins(current_time, set_time, &current_time_to_mins, &set_time_to_mins, &lower_bound_mins, &upper_bound_mins);
 8001e88:	4b33      	ldr	r3, [pc, #204]	@ (8001f58 <main+0x184>)
 8001e8a:	4a39      	ldr	r2, [pc, #228]	@ (8001f70 <main+0x19c>)
 8001e8c:	4939      	ldr	r1, [pc, #228]	@ (8001f74 <main+0x1a0>)
 8001e8e:	9103      	str	r1, [sp, #12]
 8001e90:	4939      	ldr	r1, [pc, #228]	@ (8001f78 <main+0x1a4>)
 8001e92:	9102      	str	r1, [sp, #8]
 8001e94:	4939      	ldr	r1, [pc, #228]	@ (8001f7c <main+0x1a8>)
 8001e96:	9101      	str	r1, [sp, #4]
 8001e98:	4939      	ldr	r1, [pc, #228]	@ (8001f80 <main+0x1ac>)
 8001e9a:	9100      	str	r1, [sp, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ea0:	f000 fa84 	bl	80023ac <Convert_Time_To_Mins>
	  // Enable UART receive interrupt
	  HAL_UART_Receive_IT(&huart1, &rxData, 1);
  #endif

  // Update SMS message with the set alarm time
  sprintf(sms_message, "You need to take your medicine at %02d:%02d", set_time.Hour, set_time.Minute);
 8001ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f58 <main+0x184>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8001f58 <main+0x184>)
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	492b      	ldr	r1, [pc, #172]	@ (8001f5c <main+0x188>)
 8001eb0:	482b      	ldr	r0, [pc, #172]	@ (8001f60 <main+0x18c>)
 8001eb2:	f007 f8d7 	bl	8009064 <siprintf>

  // Initialize system state
  box_mode = 0;           // Ensure box is closed
 8001eb6:	4b33      	ldr	r3, [pc, #204]	@ (8001f84 <main+0x1b0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
  already_warned_mp3 = 0; // Reset music warning flag
 8001ebc:	4b32      	ldr	r3, [pc, #200]	@ (8001f88 <main+0x1b4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
  send_sms_now = 0;       // Reset SMS trigger
 8001ec2:	4b32      	ldr	r3, [pc, #200]	@ (8001f8c <main+0x1b8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
  already_warned_sms = 0; // Reset SMS warning flag
 8001ec8:	4b31      	ldr	r3, [pc, #196]	@ (8001f90 <main+0x1bc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
  alarm_completed = 0;    // Reset alarm completion flag
 8001ece:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <main+0x1c0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Read temperature and humidity from SHT4x sensor
	  sht4x_measure_blocking_read(&temp, &humi);
 8001ed4:	4930      	ldr	r1, [pc, #192]	@ (8001f98 <main+0x1c4>)
 8001ed6:	4831      	ldr	r0, [pc, #196]	@ (8001f9c <main+0x1c8>)
 8001ed8:	f000 fb66 	bl	80025a8 <sht4x_measure_blocking_read>

	  // Update display and alarm logic if time update is triggered
	  if (flag_update_time)
 8001edc:	4b30      	ldr	r3, [pc, #192]	@ (8001fa0 <main+0x1cc>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01a      	beq.n	8001f1c <main+0x148>
	  {
		  flag_update_time = 0; // Clear update flag
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa0 <main+0x1cc>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
		  current_time = DS1307_GetTime(); // Fetch current time
 8001eec:	4c20      	ldr	r4, [pc, #128]	@ (8001f70 <main+0x19c>)
 8001eee:	463b      	mov	r3, r7
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fac3 	bl	800147c <DS1307_GetTime>
 8001ef6:	4623      	mov	r3, r4
 8001ef8:	463a      	mov	r2, r7
 8001efa:	6810      	ldr	r0, [r2, #0]
 8001efc:	6851      	ldr	r1, [r2, #4]
 8001efe:	c303      	stmia	r3!, {r0, r1}
 8001f00:	8912      	ldrh	r2, [r2, #8]
 8001f02:	801a      	strh	r2, [r3, #0]
		  Display_On_Oled(current_time, set_time, temp, humi); // Update OLED display
 8001f04:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <main+0x1c8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <main+0x1c4>)
 8001f0a:	6811      	ldr	r1, [r2, #0]
 8001f0c:	4812      	ldr	r0, [pc, #72]	@ (8001f58 <main+0x184>)
 8001f0e:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <main+0x19c>)
 8001f10:	9101      	str	r1, [sp, #4]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	6803      	ldr	r3, [r0, #0]
 8001f16:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f18:	f000 fa8c 	bl	8002434 <Display_On_Oled>
	  }

	  // Manage SMS state machine
	  if (send_sms_now)
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <main+0x1b8>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <main+0x162>
	  {
		  SIM_SendSMS_Update(&sim_ctx, 1); // Trigger SMS sending
 8001f26:	2101      	movs	r1, #1
 8001f28:	4810      	ldr	r0, [pc, #64]	@ (8001f6c <main+0x198>)
 8001f2a:	f000 fbe1 	bl	80026f0 <SIM_SendSMS_Update>
		  send_sms_now = 0; // Reset trigger immediately after starting SMS
 8001f2e:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <main+0x1b8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e003      	b.n	8001f3e <main+0x16a>
	  }
	  else
	  {
		  SIM_SendSMS_Update(&sim_ctx, 0); // Continue SMS state machine without triggering
 8001f36:	2100      	movs	r1, #0
 8001f38:	480c      	ldr	r0, [pc, #48]	@ (8001f6c <main+0x198>)
 8001f3a:	f000 fbd9 	bl	80026f0 <SIM_SendSMS_Update>
	  }

	  // Update DFPlayer state machine
	  DF_Update(&df_ctx);
 8001f3e:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <main+0x180>)
 8001f40:	f7ff f862 	bl	8001008 <DF_Update>
	  sht4x_measure_blocking_read(&temp, &humi);
 8001f44:	e7c6      	b.n	8001ed4 <main+0x100>
 8001f46:	bf00      	nop
 8001f48:	200002b4 	.word	0x200002b4
 8001f4c:	20000218 	.word	0x20000218
 8001f50:	20000344 	.word	0x20000344
 8001f54:	200003ec 	.word	0x200003ec
 8001f58:	200003e8 	.word	0x200003e8
 8001f5c:	0800b394 	.word	0x0800b394
 8001f60:	2000047c 	.word	0x2000047c
 8001f64:	0800b3c0 	.word	0x0800b3c0
 8001f68:	2000038c 	.word	0x2000038c
 8001f6c:	20000400 	.word	0x20000400
 8001f70:	200003dc 	.word	0x200003dc
 8001f74:	20000464 	.word	0x20000464
 8001f78:	20000460 	.word	0x20000460
 8001f7c:	2000045c 	.word	0x2000045c
 8001f80:	20000458 	.word	0x20000458
 8001f84:	20000472 	.word	0x20000472
 8001f88:	20000478 	.word	0x20000478
 8001f8c:	2000047a 	.word	0x2000047a
 8001f90:	20000479 	.word	0x20000479
 8001f94:	20000473 	.word	0x20000473
 8001f98:	2000046c 	.word	0x2000046c
 8001f9c:	20000468 	.word	0x20000468
 8001fa0:	20000470 	.word	0x20000470

08001fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b090      	sub	sp, #64	@ 0x40
 8001fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001faa:	f107 0318 	add.w	r3, r7, #24
 8001fae:	2228      	movs	r2, #40	@ 0x28
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f007 f8bb 	bl	800912e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fce:	2310      	movs	r3, #16
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 fcb6 	bl	8006954 <HAL_RCC_OscConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8001fee:	f000 fa8f 	bl	8002510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff2:	230f      	movs	r3, #15
 8001ff4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f004 ff23 	bl	8006e58 <HAL_RCC_ClockConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002018:	f000 fa7a 	bl	8002510 <Error_Handler>
  }
}
 800201c:	bf00      	nop
 800201e:	3740      	adds	r7, #64	@ 0x40
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002028:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <MX_I2C1_Init+0x50>)
 800202a:	4a13      	ldr	r2, [pc, #76]	@ (8002078 <MX_I2C1_Init+0x54>)
 800202c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800202e:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002030:	4a12      	ldr	r2, [pc, #72]	@ (800207c <MX_I2C1_Init+0x58>)
 8002032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002034:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800203a:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <MX_I2C1_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002042:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002048:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <MX_I2C1_Init+0x50>)
 800204a:	2200      	movs	r2, #0
 800204c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002054:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <MX_I2C1_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002062:	f001 fe07 	bl	8003c74 <HAL_I2C_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800206c:	f000 fa50 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000218 	.word	0x20000218
 8002078:	40005400 	.word	0x40005400
 800207c:	00061a80 	.word	0x00061a80

08002080 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002086:	f107 0308 	add.w	r3, r7, #8
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002094:	463b      	mov	r3, r7
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800209c:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <MX_TIM1_Init+0x98>)
 800209e:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <MX_TIM1_Init+0x9c>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80020a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <MX_TIM1_Init+0x98>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <MX_TIM1_Init+0x98>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80020ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <MX_TIM1_Init+0x98>)
 80020b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b6:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <MX_TIM1_Init+0x98>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020bc:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <MX_TIM1_Init+0x98>)
 80020be:	2200      	movs	r2, #0
 80020c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <MX_TIM1_Init+0x98>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020c8:	4813      	ldr	r0, [pc, #76]	@ (8002118 <MX_TIM1_Init+0x98>)
 80020ca:	f005 f853 	bl	8007174 <HAL_TIM_Base_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80020d4:	f000 fa1c 	bl	8002510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020de:	f107 0308 	add.w	r3, r7, #8
 80020e2:	4619      	mov	r1, r3
 80020e4:	480c      	ldr	r0, [pc, #48]	@ (8002118 <MX_TIM1_Init+0x98>)
 80020e6:	f005 f9d7 	bl	8007498 <HAL_TIM_ConfigClockSource>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80020f0:	f000 fa0e 	bl	8002510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f4:	2300      	movs	r3, #0
 80020f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020fc:	463b      	mov	r3, r7
 80020fe:	4619      	mov	r1, r3
 8002100:	4805      	ldr	r0, [pc, #20]	@ (8002118 <MX_TIM1_Init+0x98>)
 8002102:	f005 fbb9 	bl	8007878 <HAL_TIMEx_MasterConfigSynchronization>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800210c:	f000 fa00 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2000026c 	.word	0x2000026c
 800211c:	40012c00 	.word	0x40012c00

08002120 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002134:	463b      	mov	r3, r7
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800213c:	4b1d      	ldr	r3, [pc, #116]	@ (80021b4 <MX_TIM3_Init+0x94>)
 800213e:	4a1e      	ldr	r2, [pc, #120]	@ (80021b8 <MX_TIM3_Init+0x98>)
 8002140:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8002142:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <MX_TIM3_Init+0x94>)
 8002144:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002148:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214a:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <MX_TIM3_Init+0x94>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002150:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <MX_TIM3_Init+0x94>)
 8002152:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002156:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002158:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <MX_TIM3_Init+0x94>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <MX_TIM3_Init+0x94>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002164:	4813      	ldr	r0, [pc, #76]	@ (80021b4 <MX_TIM3_Init+0x94>)
 8002166:	f005 f805 	bl	8007174 <HAL_TIM_Base_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002170:	f000 f9ce 	bl	8002510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002174:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	4619      	mov	r1, r3
 8002180:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <MX_TIM3_Init+0x94>)
 8002182:	f005 f989 	bl	8007498 <HAL_TIM_ConfigClockSource>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800218c:	f000 f9c0 	bl	8002510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002198:	463b      	mov	r3, r7
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	@ (80021b4 <MX_TIM3_Init+0x94>)
 800219e:	f005 fb6b 	bl	8007878 <HAL_TIMEx_MasterConfigSynchronization>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80021a8:	f000 f9b2 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200002b4 	.word	0x200002b4
 80021b8:	40000400 	.word	0x40000400

080021bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <MX_USART1_UART_Init+0x4c>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	@ (800220c <MX_USART1_UART_Init+0x50>)
 80021c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <MX_USART1_UART_Init+0x4c>)
 80021c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80021cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <MX_USART1_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <MX_USART1_UART_Init+0x4c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021da:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <MX_USART1_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021e0:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <MX_USART1_UART_Init+0x4c>)
 80021e2:	220c      	movs	r2, #12
 80021e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <MX_USART1_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <MX_USART1_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021f2:	4805      	ldr	r0, [pc, #20]	@ (8002208 <MX_USART1_UART_Init+0x4c>)
 80021f4:	f005 fbb0 	bl	8007958 <HAL_UART_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021fe:	f000 f987 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200002fc 	.word	0x200002fc
 800220c:	40013800 	.word	0x40013800

08002210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002216:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <MX_USART2_UART_Init+0x50>)
 8002218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 800221c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800222e:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002234:	4b09      	ldr	r3, [pc, #36]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002236:	220c      	movs	r2, #12
 8002238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002246:	4805      	ldr	r0, [pc, #20]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002248:	f005 fb86 	bl	8007958 <HAL_UART_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002252:	f000 f95d 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000344 	.word	0x20000344
 8002260:	40004400 	.word	0x40004400

08002264 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <MX_USART3_UART_Init+0x4c>)
 800226a:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <MX_USART3_UART_Init+0x50>)
 800226c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002274:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <MX_USART3_UART_Init+0x4c>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <MX_USART3_UART_Init+0x4c>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800229a:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <MX_USART3_UART_Init+0x4c>)
 800229c:	f005 fb5c 	bl	8007958 <HAL_UART_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80022a6:	f000 f933 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000038c 	.word	0x2000038c
 80022b4:	40004800 	.word	0x40004800

080022b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022cc:	4b33      	ldr	r3, [pc, #204]	@ (800239c <MX_GPIO_Init+0xe4>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a32      	ldr	r2, [pc, #200]	@ (800239c <MX_GPIO_Init+0xe4>)
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b30      	ldr	r3, [pc, #192]	@ (800239c <MX_GPIO_Init+0xe4>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b2d      	ldr	r3, [pc, #180]	@ (800239c <MX_GPIO_Init+0xe4>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a2c      	ldr	r2, [pc, #176]	@ (800239c <MX_GPIO_Init+0xe4>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <MX_GPIO_Init+0xe4>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	4b27      	ldr	r3, [pc, #156]	@ (800239c <MX_GPIO_Init+0xe4>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a26      	ldr	r2, [pc, #152]	@ (800239c <MX_GPIO_Init+0xe4>)
 8002302:	f043 0308 	orr.w	r3, r3, #8
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b24      	ldr	r3, [pc, #144]	@ (800239c <MX_GPIO_Init+0xe4>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800231a:	4821      	ldr	r0, [pc, #132]	@ (80023a0 <MX_GPIO_Init+0xe8>)
 800231c:	f001 fc61 	bl	8003be2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002326:	481f      	ldr	r0, [pc, #124]	@ (80023a4 <MX_GPIO_Init+0xec>)
 8002328:	f001 fc5b 	bl	8003be2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800232c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002332:	2301      	movs	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2302      	movs	r3, #2
 800233c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4619      	mov	r1, r3
 8002344:	4816      	ldr	r0, [pc, #88]	@ (80023a0 <MX_GPIO_Init+0xe8>)
 8002346:	f001 fab1 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800234a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800234e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002350:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <MX_GPIO_Init+0xf0>)
 8002352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002354:	2301      	movs	r3, #1
 8002356:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4619      	mov	r1, r3
 800235e:	4810      	ldr	r0, [pc, #64]	@ (80023a0 <MX_GPIO_Init+0xe8>)
 8002360:	f001 faa4 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236a:	2301      	movs	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800236e:	2301      	movs	r3, #1
 8002370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2302      	movs	r3, #2
 8002374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	4619      	mov	r1, r3
 800237c:	4809      	ldr	r0, [pc, #36]	@ (80023a4 <MX_GPIO_Init+0xec>)
 800237e:	f001 fa95 	bl	80038ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	2028      	movs	r0, #40	@ 0x28
 8002388:	f001 f999 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800238c:	2028      	movs	r0, #40	@ 0x28
 800238e:	f001 f9b2 	bl	80036f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002392:	bf00      	nop
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	40011000 	.word	0x40011000
 80023a4:	40010c00 	.word	0x40010c00
 80023a8:	10210000 	.word	0x10210000

080023ac <Convert_Time_To_Mins>:

/* USER CODE BEGIN 4 */
void Convert_Time_To_Mins(DS1307_TIME _current_time, ALARM_TIME _set_time, int *_current_time_to_mins, int *_set_time_to_mins, int *_lower_bound_mins, int *_upper_bound_mins)
{
 80023ac:	b490      	push	{r4, r7}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	1d3c      	adds	r4, r7, #4
 80023b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80023b8:	803b      	strh	r3, [r7, #0]
    // The permitted range: from (alarm - 30 minutes) to (alarm + 30 minutes)
    *_current_time_to_mins = _current_time.Hour * 60 + _current_time.Minute;
 80023ba:	7a7b      	ldrb	r3, [r7, #9]
 80023bc:	461a      	mov	r2, r3
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	461a      	mov	r2, r3
 80023c8:	7abb      	ldrb	r3, [r7, #10]
 80023ca:	441a      	add	r2, r3
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	601a      	str	r2, [r3, #0]
    *_set_time_to_mins = _set_time.Hour * 60 + _set_time.Minute;
 80023d0:	783b      	ldrb	r3, [r7, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	4613      	mov	r3, r2
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	461a      	mov	r2, r3
 80023de:	787b      	ldrb	r3, [r7, #1]
 80023e0:	441a      	add	r2, r3
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	601a      	str	r2, [r3, #0]
    *_lower_bound_mins = *_set_time_to_mins - 30;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1a3 021e 	sub.w	r2, r3, #30
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	601a      	str	r2, [r3, #0]
    *_upper_bound_mins = *_set_time_to_mins + 30;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f103 021e 	add.w	r2, r3, #30
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	601a      	str	r2, [r3, #0]

    // Handle if lower_bound is negative: wrap around to the previous day
    if (*_lower_bound_mins < 0) *_lower_bound_mins += 1440; // 1440 minutes = 24 hours
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da05      	bge.n	8002412 <Convert_Time_To_Mins+0x66>
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f503 62b4 	add.w	r2, r3, #1440	@ 0x5a0
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	601a      	str	r2, [r3, #0]
    // Handle if upper_bound exceeds 23:59
    if (*_upper_bound_mins >= 1440) *_upper_bound_mins -= 1440;
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 800241a:	db05      	blt.n	8002428 <Convert_Time_To_Mins+0x7c>
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f5a3 62b4 	sub.w	r2, r3, #1440	@ 0x5a0
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bc90      	pop	{r4, r7}
 8002430:	4770      	bx	lr
	...

08002434 <Display_On_Oled>:
void Display_On_Oled(DS1307_TIME _current_time, ALARM_TIME _set_time, float _temp, float _humi)
{
 8002434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002436:	b09b      	sub	sp, #108	@ 0x6c
 8002438:	af04      	add	r7, sp, #16
 800243a:	1d3c      	adds	r4, r7, #4
 800243c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002440:	803b      	strh	r3, [r7, #0]
    char line1_oled[21];
    char line2_oled[21];
    char line3_oled[21];

    sprintf(line1_oled, "Tem:%.1f Hum:%.1f%%", _temp, _humi);
 8002442:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002444:	f7fd fff0 	bl	8000428 <__aeabi_f2d>
 8002448:	4604      	mov	r4, r0
 800244a:	460d      	mov	r5, r1
 800244c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800244e:	f7fd ffeb 	bl	8000428 <__aeabi_f2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800245a:	e9cd 2300 	strd	r2, r3, [sp]
 800245e:	4622      	mov	r2, r4
 8002460:	462b      	mov	r3, r5
 8002462:	4926      	ldr	r1, [pc, #152]	@ (80024fc <Display_On_Oled+0xc8>)
 8002464:	f006 fdfe 	bl	8009064 <siprintf>
    sprintf(line2_oled, "%s,%02d/%02d %02d:%02d:%02d", dayOfWeek[_current_time.DoW], _current_time.Date, _current_time.Month, _current_time.Hour, _current_time.Minute, _current_time.Second); // "%04d", _current_time.Year
 8002468:	7a3b      	ldrb	r3, [r7, #8]
 800246a:	461a      	mov	r2, r3
 800246c:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <Display_On_Oled+0xcc>)
 800246e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002472:	793b      	ldrb	r3, [r7, #4]
 8002474:	461e      	mov	r6, r3
 8002476:	797b      	ldrb	r3, [r7, #5]
 8002478:	7a79      	ldrb	r1, [r7, #9]
 800247a:	7ab8      	ldrb	r0, [r7, #10]
 800247c:	4604      	mov	r4, r0
 800247e:	7af8      	ldrb	r0, [r7, #11]
 8002480:	4605      	mov	r5, r0
 8002482:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002486:	9503      	str	r5, [sp, #12]
 8002488:	9402      	str	r4, [sp, #8]
 800248a:	9101      	str	r1, [sp, #4]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4633      	mov	r3, r6
 8002490:	491c      	ldr	r1, [pc, #112]	@ (8002504 <Display_On_Oled+0xd0>)
 8002492:	f006 fde7 	bl	8009064 <siprintf>
    sprintf(line3_oled, "Alarm_Time:[%02d:%02d]", _set_time.Hour, _set_time.Minute);
 8002496:	783b      	ldrb	r3, [r7, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	787b      	ldrb	r3, [r7, #1]
 800249c:	f107 0010 	add.w	r0, r7, #16
 80024a0:	4919      	ldr	r1, [pc, #100]	@ (8002508 <Display_On_Oled+0xd4>)
 80024a2:	f006 fddf 	bl	8009064 <siprintf>

    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f000 fb06 	bl	8002ab8 <SSD1306_Fill>
    SSD1306_GotoXY(0,10); SSD1306_Puts(line1_oled, &Font_7x10, SSD1306_COLOR_WHITE);
 80024ac:	210a      	movs	r1, #10
 80024ae:	2000      	movs	r0, #0
 80024b0:	f000 fb78 	bl	8002ba4 <SSD1306_GotoXY>
 80024b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024b8:	2201      	movs	r2, #1
 80024ba:	4914      	ldr	r1, [pc, #80]	@ (800250c <Display_On_Oled+0xd8>)
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fc05 	bl	8002ccc <SSD1306_Puts>
    SSD1306_GotoXY(0,30); SSD1306_Puts(line2_oled, &Font_7x10, SSD1306_COLOR_WHITE);
 80024c2:	211e      	movs	r1, #30
 80024c4:	2000      	movs	r0, #0
 80024c6:	f000 fb6d 	bl	8002ba4 <SSD1306_GotoXY>
 80024ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024ce:	2201      	movs	r2, #1
 80024d0:	490e      	ldr	r1, [pc, #56]	@ (800250c <Display_On_Oled+0xd8>)
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fbfa 	bl	8002ccc <SSD1306_Puts>
    SSD1306_GotoXY(0,50); SSD1306_Puts(line3_oled, &Font_7x10, SSD1306_COLOR_WHITE);
 80024d8:	2132      	movs	r1, #50	@ 0x32
 80024da:	2000      	movs	r0, #0
 80024dc:	f000 fb62 	bl	8002ba4 <SSD1306_GotoXY>
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	2201      	movs	r2, #1
 80024e6:	4909      	ldr	r1, [pc, #36]	@ (800250c <Display_On_Oled+0xd8>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fbef 	bl	8002ccc <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80024ee:	f000 fab5 	bl	8002a5c <SSD1306_UpdateScreen>
}
 80024f2:	bf00      	nop
 80024f4:	375c      	adds	r7, #92	@ 0x5c
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	0800b3d0 	.word	0x0800b3d0
 8002500:	20000008 	.word	0x20000008
 8002504:	0800b3e4 	.word	0x0800b3e4
 8002508:	0800b400 	.word	0x0800b400
 800250c:	20000000 	.word	0x20000000

08002510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002514:	b672      	cpsid	i
}
 8002516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <Error_Handler+0x8>

0800251c <sensirion_i2c_write>:
#include "stm32f1xx_hal.h"
#include "sensirion_i2c_hal.h"

extern I2C_HandleTypeDef hi2c1;

int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af02      	add	r7, sp, #8
 8002522:	4603      	mov	r3, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	71fb      	strb	r3, [r7, #7]
 8002528:	4613      	mov	r3, r2
 800252a:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Master_Transmit(&hi2c1, (address << 1), (uint8_t*)data, count, HAL_MAX_DELAY);
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	b29b      	uxth	r3, r3
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	b299      	uxth	r1, r3
 8002534:	88bb      	ldrh	r3, [r7, #4]
 8002536:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800253a:	9200      	str	r2, [sp, #0]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	4804      	ldr	r0, [pc, #16]	@ (8002550 <sensirion_i2c_write+0x34>)
 8002540:	f001 fcf0 	bl	8003f24 <HAL_I2C_Master_Transmit>
 8002544:	4603      	mov	r3, r0
 8002546:	b25b      	sxtb	r3, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000218 	.word	0x20000218

08002554 <sensirion_i2c_read>:

int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af02      	add	r7, sp, #8
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
 8002560:	4613      	mov	r3, r2
 8002562:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Master_Receive(&hi2c1, (address << 1), data, count, HAL_MAX_DELAY);
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	b29b      	uxth	r3, r3
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	b299      	uxth	r1, r3
 800256c:	88bb      	ldrh	r3, [r7, #4]
 800256e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002572:	9200      	str	r2, [sp, #0]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	4804      	ldr	r0, [pc, #16]	@ (8002588 <sensirion_i2c_read+0x34>)
 8002578:	f001 fdd2 	bl	8004120 <HAL_I2C_Master_Receive>
 800257c:	4603      	mov	r3, r0
 800257e:	b25b      	sxtb	r3, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000218 	.word	0x20000218

0800258c <sensirion_i2c_init>:

void sensirion_i2c_init(void) {}
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <sht4x_init>:
// sht4x.c - Giao tiếp cơ bản với cảm biến SHT40
#include "sht4x.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_common.h"

int8_t sht4x_init(void) {
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
    return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
	...

080025a8 <sht4x_measure_blocking_read>:

int8_t sht4x_measure_blocking_read(float* temperature, float* humidity) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    uint8_t cmd[2] = {0xFD}; // Command đo nhanh
 80025b2:	23fd      	movs	r3, #253	@ 0xfd
 80025b4:	823b      	strh	r3, [r7, #16]
    uint8_t read_data[6];
    sensirion_i2c_write(0x44, cmd, 1);
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	2201      	movs	r2, #1
 80025bc:	4619      	mov	r1, r3
 80025be:	2044      	movs	r0, #68	@ 0x44
 80025c0:	f7ff ffac 	bl	800251c <sensirion_i2c_write>
    HAL_Delay(10);
 80025c4:	200a      	movs	r0, #10
 80025c6:	f000 ff7f 	bl	80034c8 <HAL_Delay>
    sensirion_i2c_read(0x44, read_data, 6);
 80025ca:	f107 0308 	add.w	r3, r7, #8
 80025ce:	2206      	movs	r2, #6
 80025d0:	4619      	mov	r1, r3
 80025d2:	2044      	movs	r0, #68	@ 0x44
 80025d4:	f7ff ffbe 	bl	8002554 <sensirion_i2c_read>

    uint16_t raw_temp = (read_data[0] << 8) | read_data[1];
 80025d8:	7a3b      	ldrb	r3, [r7, #8]
 80025da:	b21b      	sxth	r3, r3
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	b21a      	sxth	r2, r3
 80025e0:	7a7b      	ldrb	r3, [r7, #9]
 80025e2:	b21b      	sxth	r3, r3
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b21b      	sxth	r3, r3
 80025e8:	82fb      	strh	r3, [r7, #22]
    uint16_t raw_hum = (read_data[3] << 8) | read_data[4];
 80025ea:	7afb      	ldrb	r3, [r7, #11]
 80025ec:	b21b      	sxth	r3, r3
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	7b3b      	ldrb	r3, [r7, #12]
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	4313      	orrs	r3, r2
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	82bb      	strh	r3, [r7, #20]

    *temperature = -45 + 175 * ((float)raw_temp / 65535);
 80025fc:	8afb      	ldrh	r3, [r7, #22]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe faf8 	bl	8000bf4 <__aeabi_ui2f>
 8002604:	4603      	mov	r3, r0
 8002606:	4914      	ldr	r1, [pc, #80]	@ (8002658 <sht4x_measure_blocking_read+0xb0>)
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe fbff 	bl	8000e0c <__aeabi_fdiv>
 800260e:	4603      	mov	r3, r0
 8002610:	4912      	ldr	r1, [pc, #72]	@ (800265c <sht4x_measure_blocking_read+0xb4>)
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fb46 	bl	8000ca4 <__aeabi_fmul>
 8002618:	4603      	mov	r3, r0
 800261a:	4911      	ldr	r1, [pc, #68]	@ (8002660 <sht4x_measure_blocking_read+0xb8>)
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fa37 	bl	8000a90 <__aeabi_fsub>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	601a      	str	r2, [r3, #0]
    *humidity = 100 * ((float)raw_hum / 65535);
 800262a:	8abb      	ldrh	r3, [r7, #20]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fae1 	bl	8000bf4 <__aeabi_ui2f>
 8002632:	4603      	mov	r3, r0
 8002634:	4908      	ldr	r1, [pc, #32]	@ (8002658 <sht4x_measure_blocking_read+0xb0>)
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fbe8 	bl	8000e0c <__aeabi_fdiv>
 800263c:	4603      	mov	r3, r0
 800263e:	4909      	ldr	r1, [pc, #36]	@ (8002664 <sht4x_measure_blocking_read+0xbc>)
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fb2f 	bl	8000ca4 <__aeabi_fmul>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	601a      	str	r2, [r3, #0]

    return 0;
 800264e:	2300      	movs	r3, #0
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	477fff00 	.word	0x477fff00
 800265c:	432f0000 	.word	0x432f0000
 8002660:	42340000 	.word	0x42340000
 8002664:	42c80000 	.word	0x42c80000

08002668 <SIM_SendString>:
 *      Author: meynchan
 */

#include "sim.h"

void SIM_SendString(UART_HandleTypeDef *huart, const char *cmd) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)cmd, strlen(cmd), HAL_MAX_DELAY);
 8002672:	6838      	ldr	r0, [r7, #0]
 8002674:	f7fd fd6c 	bl	8000150 <strlen>
 8002678:	4603      	mov	r3, r0
 800267a:	b29a      	uxth	r2, r3
 800267c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f005 f9b8 	bl	80079f8 <HAL_UART_Transmit>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <SIM_SendCtrlZ>:

void SIM_SendCtrlZ(UART_HandleTypeDef *huart) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
    uint8_t ctrlz = 26;
 8002698:	231a      	movs	r3, #26
 800269a:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(huart, &ctrlz, 1, HAL_MAX_DELAY);
 800269c:	f107 010f 	add.w	r1, r7, #15
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026a4:	2201      	movs	r2, #1
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f005 f9a6 	bl	80079f8 <HAL_UART_Transmit>
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <SIM_SendSMS_Init>:

// Khởi tạo FSM gửi SMS
void SIM_SendSMS_Init(SMS_Context *ctx, UART_HandleTypeDef *huart, const char *phone, const char *message) {
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
    ctx->state = SMS_IDLE; // Ban đầu ở trạng thái IDLE, không gửi ngay
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
    ctx->huart = huart;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	605a      	str	r2, [r3, #4]
    ctx->phone = phone;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	609a      	str	r2, [r3, #8]
    ctx->message = message;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	60da      	str	r2, [r3, #12]
    ctx->delay_start = 0;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
    ctx->delay_ms = 0;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	615a      	str	r2, [r3, #20]
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <SIM_SendSMS_Update>:

// Cập nhật FSM gửi SMS không chặn
void SIM_SendSMS_Update(SMS_Context *ctx, uint8_t send_now) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
    switch (ctx->state) {
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b06      	cmp	r3, #6
 8002702:	f200 80db 	bhi.w	80028bc <SIM_SendSMS_Update+0x1cc>
 8002706:	a201      	add	r2, pc, #4	@ (adr r2, 800270c <SIM_SendSMS_Update+0x1c>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	08002729 	.word	0x08002729
 8002710:	08002739 	.word	0x08002739
 8002714:	08002763 	.word	0x08002763
 8002718:	080027a5 	.word	0x080027a5
 800271c:	080027e5 	.word	0x080027e5
 8002720:	0800283b 	.word	0x0800283b
 8002724:	08002889 	.word	0x08002889
        case SMS_IDLE:
            if (send_now) {
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80bb 	beq.w	80028a6 <SIM_SendSMS_Update+0x1b6>
                ctx->state = SMS_SEND_AT; // Chỉ bắt đầu gửi khi send_now = 1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002736:	e0b6      	b.n	80028a6 <SIM_SendSMS_Update+0x1b6>

        case SMS_SEND_AT:
            SIM_SendString(ctx->huart, "AT\r\n");
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4961      	ldr	r1, [pc, #388]	@ (80028c4 <SIM_SendSMS_Update+0x1d4>)
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ff92 	bl	8002668 <SIM_SendString>
            delay_ms_nonblocking(1000, &ctx->delay_start);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3310      	adds	r3, #16
 8002748:	4619      	mov	r1, r3
 800274a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800274e:	f7fe fd75 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_ms = 1000;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002758:	615a      	str	r2, [r3, #20]
            ctx->state = SMS_SEND_ATE0;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2202      	movs	r2, #2
 800275e:	701a      	strb	r2, [r3, #0]
            break;
 8002760:	e0ac      	b.n	80028bc <SIM_SendSMS_Update+0x1cc>

        case SMS_SEND_ATE0:
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_ms)) {
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f7fe fd73 	bl	8001258 <is_delay_ms_complete>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8098 	beq.w	80028aa <SIM_SendSMS_Update+0x1ba>
                SIM_SendString(ctx->huart, "ATE0\r\n");
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4952      	ldr	r1, [pc, #328]	@ (80028c8 <SIM_SendSMS_Update+0x1d8>)
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff71 	bl	8002668 <SIM_SendString>
                delay_ms_nonblocking(500, &ctx->delay_start);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3310      	adds	r3, #16
 800278a:	4619      	mov	r1, r3
 800278c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002790:	f7fe fd54 	bl	800123c <delay_ms_nonblocking>
                ctx->delay_ms = 500;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800279a:	615a      	str	r2, [r3, #20]
                ctx->state = SMS_SET_CMGF;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2203      	movs	r2, #3
 80027a0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80027a2:	e082      	b.n	80028aa <SIM_SendSMS_Update+0x1ba>

        case SMS_SET_CMGF:
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_ms)) {
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f7fe fd52 	bl	8001258 <is_delay_ms_complete>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d079      	beq.n	80028ae <SIM_SendSMS_Update+0x1be>
                SIM_SendString(ctx->huart, "AT+CMGF=1\r\n");
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4943      	ldr	r1, [pc, #268]	@ (80028cc <SIM_SendSMS_Update+0x1dc>)
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff51 	bl	8002668 <SIM_SendString>
                delay_ms_nonblocking(500, &ctx->delay_start);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3310      	adds	r3, #16
 80027ca:	4619      	mov	r1, r3
 80027cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027d0:	f7fe fd34 	bl	800123c <delay_ms_nonblocking>
                ctx->delay_ms = 500;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80027da:	615a      	str	r2, [r3, #20]
                ctx->state = SMS_SEND_CMGS;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2204      	movs	r2, #4
 80027e0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80027e2:	e064      	b.n	80028ae <SIM_SendSMS_Update+0x1be>

        case SMS_SEND_CMGS:
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_ms)) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f7fe fd32 	bl	8001258 <is_delay_ms_complete>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d05b      	beq.n	80028b2 <SIM_SendSMS_Update+0x1c2>
                sprintf(ctx->cmd, "AT+CMGS=\"%s\"\r\n", ctx->phone);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f103 0018 	add.w	r0, r3, #24
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	461a      	mov	r2, r3
 8002806:	4932      	ldr	r1, [pc, #200]	@ (80028d0 <SIM_SendSMS_Update+0x1e0>)
 8002808:	f006 fc2c 	bl	8009064 <siprintf>
                SIM_SendString(ctx->huart, ctx->cmd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3318      	adds	r3, #24
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f7ff ff26 	bl	8002668 <SIM_SendString>
                delay_ms_nonblocking(1000, &ctx->delay_start);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3310      	adds	r3, #16
 8002820:	4619      	mov	r1, r3
 8002822:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002826:	f7fe fd09 	bl	800123c <delay_ms_nonblocking>
                ctx->delay_ms = 1000;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002830:	615a      	str	r2, [r3, #20]
                ctx->state = SMS_SEND_MESSAGE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2205      	movs	r2, #5
 8002836:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002838:	e03b      	b.n	80028b2 <SIM_SendSMS_Update+0x1c2>

        case SMS_SEND_MESSAGE:
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_ms)) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f7fe fd07 	bl	8001258 <is_delay_ms_complete>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d032      	beq.n	80028b6 <SIM_SendSMS_Update+0x1c6>
                SIM_SendString(ctx->huart, ctx->message);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f7ff ff04 	bl	8002668 <SIM_SendString>
                SIM_SendCtrlZ(ctx->huart);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff13 	bl	8002690 <SIM_SendCtrlZ>
                delay_ms_nonblocking(5000, &ctx->delay_start);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3310      	adds	r3, #16
 800286e:	4619      	mov	r1, r3
 8002870:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002874:	f7fe fce2 	bl	800123c <delay_ms_nonblocking>
                ctx->delay_ms = 5000;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287e:	615a      	str	r2, [r3, #20]
                ctx->state = SMS_WAIT_DONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2206      	movs	r2, #6
 8002884:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002886:	e016      	b.n	80028b6 <SIM_SendSMS_Update+0x1c6>

        case SMS_WAIT_DONE:
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_ms)) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f7fe fce0 	bl	8001258 <is_delay_ms_complete>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <SIM_SendSMS_Update+0x1ca>
                ctx->state = SMS_IDLE; // Kết thúc gửi SMS
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80028a4:	e009      	b.n	80028ba <SIM_SendSMS_Update+0x1ca>
            break;
 80028a6:	bf00      	nop
 80028a8:	e008      	b.n	80028bc <SIM_SendSMS_Update+0x1cc>
            break;
 80028aa:	bf00      	nop
 80028ac:	e006      	b.n	80028bc <SIM_SendSMS_Update+0x1cc>
            break;
 80028ae:	bf00      	nop
 80028b0:	e004      	b.n	80028bc <SIM_SendSMS_Update+0x1cc>
            break;
 80028b2:	bf00      	nop
 80028b4:	e002      	b.n	80028bc <SIM_SendSMS_Update+0x1cc>
            break;
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <SIM_SendSMS_Update+0x1cc>
            break;
 80028ba:	bf00      	nop
    }
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	0800b418 	.word	0x0800b418
 80028c8:	0800b420 	.word	0x0800b420
 80028cc:	0800b428 	.word	0x0800b428
 80028d0:	0800b434 	.word	0x0800b434

080028d4 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80028da:	f000 fa1d 	bl	8002d18 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80028de:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80028e2:	2201      	movs	r2, #1
 80028e4:	2178      	movs	r1, #120	@ 0x78
 80028e6:	485b      	ldr	r0, [pc, #364]	@ (8002a54 <SSD1306_Init+0x180>)
 80028e8:	f001 fe86 	bl	80045f8 <HAL_I2C_IsDeviceReady>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e0a9      	b.n	8002a4a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80028f6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80028fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80028fc:	e002      	b.n	8002904 <SSD1306_Init+0x30>
		p--;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3b01      	subs	r3, #1
 8002902:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f9      	bne.n	80028fe <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800290a:	22ae      	movs	r2, #174	@ 0xae
 800290c:	2100      	movs	r1, #0
 800290e:	2078      	movs	r0, #120	@ 0x78
 8002910:	f000 fa7c 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002914:	2220      	movs	r2, #32
 8002916:	2100      	movs	r1, #0
 8002918:	2078      	movs	r0, #120	@ 0x78
 800291a:	f000 fa77 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800291e:	2210      	movs	r2, #16
 8002920:	2100      	movs	r1, #0
 8002922:	2078      	movs	r0, #120	@ 0x78
 8002924:	f000 fa72 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002928:	22b0      	movs	r2, #176	@ 0xb0
 800292a:	2100      	movs	r1, #0
 800292c:	2078      	movs	r0, #120	@ 0x78
 800292e:	f000 fa6d 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002932:	22c8      	movs	r2, #200	@ 0xc8
 8002934:	2100      	movs	r1, #0
 8002936:	2078      	movs	r0, #120	@ 0x78
 8002938:	f000 fa68 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800293c:	2200      	movs	r2, #0
 800293e:	2100      	movs	r1, #0
 8002940:	2078      	movs	r0, #120	@ 0x78
 8002942:	f000 fa63 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002946:	2210      	movs	r2, #16
 8002948:	2100      	movs	r1, #0
 800294a:	2078      	movs	r0, #120	@ 0x78
 800294c:	f000 fa5e 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002950:	2240      	movs	r2, #64	@ 0x40
 8002952:	2100      	movs	r1, #0
 8002954:	2078      	movs	r0, #120	@ 0x78
 8002956:	f000 fa59 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800295a:	2281      	movs	r2, #129	@ 0x81
 800295c:	2100      	movs	r1, #0
 800295e:	2078      	movs	r0, #120	@ 0x78
 8002960:	f000 fa54 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002964:	22ff      	movs	r2, #255	@ 0xff
 8002966:	2100      	movs	r1, #0
 8002968:	2078      	movs	r0, #120	@ 0x78
 800296a:	f000 fa4f 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800296e:	22a1      	movs	r2, #161	@ 0xa1
 8002970:	2100      	movs	r1, #0
 8002972:	2078      	movs	r0, #120	@ 0x78
 8002974:	f000 fa4a 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002978:	22a6      	movs	r2, #166	@ 0xa6
 800297a:	2100      	movs	r1, #0
 800297c:	2078      	movs	r0, #120	@ 0x78
 800297e:	f000 fa45 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002982:	22a8      	movs	r2, #168	@ 0xa8
 8002984:	2100      	movs	r1, #0
 8002986:	2078      	movs	r0, #120	@ 0x78
 8002988:	f000 fa40 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800298c:	223f      	movs	r2, #63	@ 0x3f
 800298e:	2100      	movs	r1, #0
 8002990:	2078      	movs	r0, #120	@ 0x78
 8002992:	f000 fa3b 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002996:	22a4      	movs	r2, #164	@ 0xa4
 8002998:	2100      	movs	r1, #0
 800299a:	2078      	movs	r0, #120	@ 0x78
 800299c:	f000 fa36 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80029a0:	22d3      	movs	r2, #211	@ 0xd3
 80029a2:	2100      	movs	r1, #0
 80029a4:	2078      	movs	r0, #120	@ 0x78
 80029a6:	f000 fa31 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80029aa:	2200      	movs	r2, #0
 80029ac:	2100      	movs	r1, #0
 80029ae:	2078      	movs	r0, #120	@ 0x78
 80029b0:	f000 fa2c 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80029b4:	22d5      	movs	r2, #213	@ 0xd5
 80029b6:	2100      	movs	r1, #0
 80029b8:	2078      	movs	r0, #120	@ 0x78
 80029ba:	f000 fa27 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80029be:	22f0      	movs	r2, #240	@ 0xf0
 80029c0:	2100      	movs	r1, #0
 80029c2:	2078      	movs	r0, #120	@ 0x78
 80029c4:	f000 fa22 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80029c8:	22d9      	movs	r2, #217	@ 0xd9
 80029ca:	2100      	movs	r1, #0
 80029cc:	2078      	movs	r0, #120	@ 0x78
 80029ce:	f000 fa1d 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80029d2:	2222      	movs	r2, #34	@ 0x22
 80029d4:	2100      	movs	r1, #0
 80029d6:	2078      	movs	r0, #120	@ 0x78
 80029d8:	f000 fa18 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80029dc:	22da      	movs	r2, #218	@ 0xda
 80029de:	2100      	movs	r1, #0
 80029e0:	2078      	movs	r0, #120	@ 0x78
 80029e2:	f000 fa13 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80029e6:	2212      	movs	r2, #18
 80029e8:	2100      	movs	r1, #0
 80029ea:	2078      	movs	r0, #120	@ 0x78
 80029ec:	f000 fa0e 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80029f0:	22db      	movs	r2, #219	@ 0xdb
 80029f2:	2100      	movs	r1, #0
 80029f4:	2078      	movs	r0, #120	@ 0x78
 80029f6:	f000 fa09 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80029fa:	2220      	movs	r2, #32
 80029fc:	2100      	movs	r1, #0
 80029fe:	2078      	movs	r0, #120	@ 0x78
 8002a00:	f000 fa04 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002a04:	228d      	movs	r2, #141	@ 0x8d
 8002a06:	2100      	movs	r1, #0
 8002a08:	2078      	movs	r0, #120	@ 0x78
 8002a0a:	f000 f9ff 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002a0e:	2214      	movs	r2, #20
 8002a10:	2100      	movs	r1, #0
 8002a12:	2078      	movs	r0, #120	@ 0x78
 8002a14:	f000 f9fa 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002a18:	22af      	movs	r2, #175	@ 0xaf
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2078      	movs	r0, #120	@ 0x78
 8002a1e:	f000 f9f5 	bl	8002e0c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002a22:	222e      	movs	r2, #46	@ 0x2e
 8002a24:	2100      	movs	r1, #0
 8002a26:	2078      	movs	r0, #120	@ 0x78
 8002a28:	f000 f9f0 	bl	8002e0c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f000 f843 	bl	8002ab8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002a32:	f000 f813 	bl	8002a5c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002a36:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <SSD1306_Init+0x184>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <SSD1306_Init+0x184>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002a42:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <SSD1306_Init+0x184>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002a48:	2301      	movs	r3, #1
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000218 	.word	0x20000218
 8002a58:	200008b0 	.word	0x200008b0

08002a5c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002a62:	2300      	movs	r3, #0
 8002a64:	71fb      	strb	r3, [r7, #7]
 8002a66:	e01d      	b.n	8002aa4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	3b50      	subs	r3, #80	@ 0x50
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2100      	movs	r1, #0
 8002a72:	2078      	movs	r0, #120	@ 0x78
 8002a74:	f000 f9ca 	bl	8002e0c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	2078      	movs	r0, #120	@ 0x78
 8002a7e:	f000 f9c5 	bl	8002e0c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002a82:	2210      	movs	r2, #16
 8002a84:	2100      	movs	r1, #0
 8002a86:	2078      	movs	r0, #120	@ 0x78
 8002a88:	f000 f9c0 	bl	8002e0c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	01db      	lsls	r3, r3, #7
 8002a90:	4a08      	ldr	r2, [pc, #32]	@ (8002ab4 <SSD1306_UpdateScreen+0x58>)
 8002a92:	441a      	add	r2, r3
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	2140      	movs	r1, #64	@ 0x40
 8002a98:	2078      	movs	r0, #120	@ 0x78
 8002a9a:	f000 f951 	bl	8002d40 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	71fb      	strb	r3, [r7, #7]
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	2b07      	cmp	r3, #7
 8002aa8:	d9de      	bls.n	8002a68 <SSD1306_UpdateScreen+0xc>
	}
}
 8002aaa:	bf00      	nop
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	200004b0 	.word	0x200004b0

08002ab8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <SSD1306_Fill+0x14>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <SSD1306_Fill+0x16>
 8002acc:	23ff      	movs	r3, #255	@ 0xff
 8002ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4803      	ldr	r0, [pc, #12]	@ (8002ae4 <SSD1306_Fill+0x2c>)
 8002ad6:	f006 fb2a 	bl	800912e <memset>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200004b0 	.word	0x200004b0

08002ae8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
 8002af2:	460b      	mov	r3, r1
 8002af4:	80bb      	strh	r3, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	70fb      	strb	r3, [r7, #3]
	if (
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002afe:	d848      	bhi.n	8002b92 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002b00:	88bb      	ldrh	r3, [r7, #4]
 8002b02:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b04:	d845      	bhi.n	8002b92 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002b06:	4b25      	ldr	r3, [pc, #148]	@ (8002b9c <SSD1306_DrawPixel+0xb4>)
 8002b08:	791b      	ldrb	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d11a      	bne.n	8002b58 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002b22:	88fa      	ldrh	r2, [r7, #6]
 8002b24:	88bb      	ldrh	r3, [r7, #4]
 8002b26:	08db      	lsrs	r3, r3, #3
 8002b28:	b298      	uxth	r0, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	01db      	lsls	r3, r3, #7
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba0 <SSD1306_DrawPixel+0xb8>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	b25a      	sxtb	r2, r3
 8002b36:	88bb      	ldrh	r3, [r7, #4]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b42:	b25b      	sxtb	r3, r3
 8002b44:	4313      	orrs	r3, r2
 8002b46:	b259      	sxtb	r1, r3
 8002b48:	88fa      	ldrh	r2, [r7, #6]
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	01db      	lsls	r3, r3, #7
 8002b4e:	4413      	add	r3, r2
 8002b50:	b2c9      	uxtb	r1, r1
 8002b52:	4a13      	ldr	r2, [pc, #76]	@ (8002ba0 <SSD1306_DrawPixel+0xb8>)
 8002b54:	54d1      	strb	r1, [r2, r3]
 8002b56:	e01d      	b.n	8002b94 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002b58:	88fa      	ldrh	r2, [r7, #6]
 8002b5a:	88bb      	ldrh	r3, [r7, #4]
 8002b5c:	08db      	lsrs	r3, r3, #3
 8002b5e:	b298      	uxth	r0, r3
 8002b60:	4603      	mov	r3, r0
 8002b62:	01db      	lsls	r3, r3, #7
 8002b64:	4413      	add	r3, r2
 8002b66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba0 <SSD1306_DrawPixel+0xb8>)
 8002b68:	5cd3      	ldrb	r3, [r2, r3]
 8002b6a:	b25a      	sxtb	r2, r3
 8002b6c:	88bb      	ldrh	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	4013      	ands	r3, r2
 8002b80:	b259      	sxtb	r1, r3
 8002b82:	88fa      	ldrh	r2, [r7, #6]
 8002b84:	4603      	mov	r3, r0
 8002b86:	01db      	lsls	r3, r3, #7
 8002b88:	4413      	add	r3, r2
 8002b8a:	b2c9      	uxtb	r1, r1
 8002b8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <SSD1306_DrawPixel+0xb8>)
 8002b8e:	54d1      	strb	r1, [r2, r3]
 8002b90:	e000      	b.n	8002b94 <SSD1306_DrawPixel+0xac>
		return;
 8002b92:	bf00      	nop
	}
}
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	200008b0 	.word	0x200008b0
 8002ba0:	200004b0 	.word	0x200004b0

08002ba4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	460a      	mov	r2, r1
 8002bae:	80fb      	strh	r3, [r7, #6]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002bb4:	4a05      	ldr	r2, [pc, #20]	@ (8002bcc <SSD1306_GotoXY+0x28>)
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002bba:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <SSD1306_GotoXY+0x28>)
 8002bbc:	88bb      	ldrh	r3, [r7, #4]
 8002bbe:	8053      	strh	r3, [r2, #2]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	200008b0 	.word	0x200008b0

08002bd0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002be0:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <SSD1306_Putc+0xf8>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4413      	add	r3, r2
	if (
 8002bec:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bee:	dc07      	bgt.n	8002c00 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002bf0:	4b35      	ldr	r3, [pc, #212]	@ (8002cc8 <SSD1306_Putc+0xf8>)
 8002bf2:	885b      	ldrh	r3, [r3, #2]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002bfc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bfe:	dd01      	ble.n	8002c04 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e05d      	b.n	8002cc0 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e04b      	b.n	8002ca2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	3b20      	subs	r3, #32
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	7849      	ldrb	r1, [r1, #1]
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	440b      	add	r3, r1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	e030      	b.n	8002c90 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d010      	beq.n	8002c60 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002c3e:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <SSD1306_Putc+0xf8>)
 8002c40:	881a      	ldrh	r2, [r3, #0]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	b298      	uxth	r0, r3
 8002c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc8 <SSD1306_Putc+0xf8>)
 8002c4c:	885a      	ldrh	r2, [r3, #2]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	79ba      	ldrb	r2, [r7, #6]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f7ff ff45 	bl	8002ae8 <SSD1306_DrawPixel>
 8002c5e:	e014      	b.n	8002c8a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002c60:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <SSD1306_Putc+0xf8>)
 8002c62:	881a      	ldrh	r2, [r3, #0]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	b298      	uxth	r0, r3
 8002c6c:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <SSD1306_Putc+0xf8>)
 8002c6e:	885a      	ldrh	r2, [r3, #2]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	b299      	uxth	r1, r3
 8002c78:	79bb      	ldrb	r3, [r7, #6]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf0c      	ite	eq
 8002c7e:	2301      	moveq	r3, #1
 8002c80:	2300      	movne	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	f7ff ff2f 	bl	8002ae8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d3c8      	bcc.n	8002c2e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d3ad      	bcc.n	8002c0a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <SSD1306_Putc+0xf8>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	7812      	ldrb	r2, [r2, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <SSD1306_Putc+0xf8>)
 8002cbc:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	200008b0 	.word	0x200008b0

08002ccc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002cda:	e012      	b.n	8002d02 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	79fa      	ldrb	r2, [r7, #7]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff73 	bl	8002bd0 <SSD1306_Putc>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d002      	beq.n	8002cfc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	e008      	b.n	8002d0e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e8      	bne.n	8002cdc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002d1e:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <ssd1306_I2C_Init+0x24>)
 8002d20:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d22:	e002      	b.n	8002d2a <ssd1306_I2C_Init+0x12>
		p--;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f9      	bne.n	8002d24 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	0003d090 	.word	0x0003d090

08002d40 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b0c7      	sub	sp, #284	@ 0x11c
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	4604      	mov	r4, r0
 8002d48:	4608      	mov	r0, r1
 8002d4a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002d4e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002d52:	600a      	str	r2, [r1, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d5a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002d5e:	4622      	mov	r2, r4
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d66:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d76:	460a      	mov	r2, r1
 8002d78:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002d7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d82:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002d86:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002d8a:	7812      	ldrb	r2, [r2, #0]
 8002d8c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002d94:	e015      	b.n	8002dc2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002d96:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002d9a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002d9e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	441a      	add	r2, r3
 8002da6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002daa:	3301      	adds	r3, #1
 8002dac:	7811      	ldrb	r1, [r2, #0]
 8002dae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002db2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002db6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002db8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002dc2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002dcc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002dd0:	8812      	ldrh	r2, [r2, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d8df      	bhi.n	8002d96 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002dd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002dda:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	b299      	uxth	r1, r3
 8002de2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002de6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f107 020c 	add.w	r2, r7, #12
 8002df4:	200a      	movs	r0, #10
 8002df6:	9000      	str	r0, [sp, #0]
 8002df8:	4803      	ldr	r0, [pc, #12]	@ (8002e08 <ssd1306_I2C_WriteMulti+0xc8>)
 8002dfa:	f001 f893 	bl	8003f24 <HAL_I2C_Master_Transmit>
}
 8002dfe:	bf00      	nop
 8002e00:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd90      	pop	{r4, r7, pc}
 8002e08:	20000218 	.word	0x20000218

08002e0c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
 8002e16:	460b      	mov	r3, r1
 8002e18:	71bb      	strb	r3, [r7, #6]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002e1e:	79bb      	ldrb	r3, [r7, #6]
 8002e20:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002e22:	797b      	ldrb	r3, [r7, #5]
 8002e24:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	b299      	uxth	r1, r3
 8002e2a:	f107 020c 	add.w	r2, r7, #12
 8002e2e:	230a      	movs	r3, #10
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2302      	movs	r3, #2
 8002e34:	4803      	ldr	r0, [pc, #12]	@ (8002e44 <ssd1306_I2C_Write+0x38>)
 8002e36:	f001 f875 	bl	8003f24 <HAL_I2C_Master_Transmit>
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000218 	.word	0x20000218

08002e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <HAL_MspInit+0x5c>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <HAL_MspInit+0x5c>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6193      	str	r3, [r2, #24]
 8002e5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ea4 <HAL_MspInit+0x5c>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea4 <HAL_MspInit+0x5c>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea4 <HAL_MspInit+0x5c>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	61d3      	str	r3, [r2, #28]
 8002e72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <HAL_MspInit+0x5c>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <HAL_MspInit+0x60>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <HAL_MspInit+0x60>)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010000 	.word	0x40010000

08002eac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 0310 	add.w	r3, r7, #16
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f3c <HAL_I2C_MspInit+0x90>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d133      	bne.n	8002f34 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8002f40 <HAL_I2C_MspInit+0x94>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f40 <HAL_I2C_MspInit+0x94>)
 8002ed2:	f043 0308 	orr.w	r3, r3, #8
 8002ed6:	6193      	str	r3, [r2, #24]
 8002ed8:	4b19      	ldr	r3, [pc, #100]	@ (8002f40 <HAL_I2C_MspInit+0x94>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ee4:	23c0      	movs	r3, #192	@ 0xc0
 8002ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ee8:	2312      	movs	r3, #18
 8002eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eec:	2303      	movs	r3, #3
 8002eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 0310 	add.w	r3, r7, #16
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4813      	ldr	r0, [pc, #76]	@ (8002f44 <HAL_I2C_MspInit+0x98>)
 8002ef8:	f000 fcd8 	bl	80038ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002efc:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <HAL_I2C_MspInit+0x94>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	4a0f      	ldr	r2, [pc, #60]	@ (8002f40 <HAL_I2C_MspInit+0x94>)
 8002f02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f06:	61d3      	str	r3, [r2, #28]
 8002f08:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <HAL_I2C_MspInit+0x94>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2100      	movs	r1, #0
 8002f18:	201f      	movs	r0, #31
 8002f1a:	f000 fbd0 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f1e:	201f      	movs	r0, #31
 8002f20:	f000 fbe9 	bl	80036f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002f24:	2200      	movs	r2, #0
 8002f26:	2100      	movs	r1, #0
 8002f28:	2020      	movs	r0, #32
 8002f2a:	f000 fbc8 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002f2e:	2020      	movs	r0, #32
 8002f30:	f000 fbe1 	bl	80036f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002f34:	bf00      	nop
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40005400 	.word	0x40005400
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40010c00 	.word	0x40010c00

08002f48 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc0 <HAL_TIM_Base_MspInit+0x78>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d114      	bne.n	8002f84 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	4a19      	ldr	r2, [pc, #100]	@ (8002fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8002f60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f64:	6193      	str	r3, [r2, #24]
 8002f66:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	2100      	movs	r1, #0
 8002f76:	2019      	movs	r0, #25
 8002f78:	f000 fba1 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002f7c:	2019      	movs	r0, #25
 8002f7e:	f000 fbba 	bl	80036f6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f82:	e018      	b.n	8002fb6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc8 <HAL_TIM_Base_MspInit+0x80>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d113      	bne.n	8002fb6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	61d3      	str	r3, [r2, #28]
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2100      	movs	r1, #0
 8002faa:	201d      	movs	r0, #29
 8002fac:	f000 fb87 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fb0:	201d      	movs	r0, #29
 8002fb2:	f000 fba0 	bl	80036f6 <HAL_NVIC_EnableIRQ>
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40000400 	.word	0x40000400

08002fcc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	@ 0x30
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0320 	add.w	r3, r7, #32
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a57      	ldr	r2, [pc, #348]	@ (8003144 <HAL_UART_MspInit+0x178>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d13a      	bne.n	8003062 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fec:	4b56      	ldr	r3, [pc, #344]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a55      	ldr	r2, [pc, #340]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 8002ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b53      	ldr	r3, [pc, #332]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003004:	4b50      	ldr	r3, [pc, #320]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	4a4f      	ldr	r2, [pc, #316]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	6193      	str	r3, [r2, #24]
 8003010:	4b4d      	ldr	r3, [pc, #308]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800301c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003026:	2303      	movs	r3, #3
 8003028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302a:	f107 0320 	add.w	r3, r7, #32
 800302e:	4619      	mov	r1, r3
 8003030:	4846      	ldr	r0, [pc, #280]	@ (800314c <HAL_UART_MspInit+0x180>)
 8003032:	f000 fc3b 	bl	80038ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800303a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800303c:	2300      	movs	r3, #0
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003044:	f107 0320 	add.w	r3, r7, #32
 8003048:	4619      	mov	r1, r3
 800304a:	4840      	ldr	r0, [pc, #256]	@ (800314c <HAL_UART_MspInit+0x180>)
 800304c:	f000 fc2e 	bl	80038ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	2100      	movs	r1, #0
 8003054:	2025      	movs	r0, #37	@ 0x25
 8003056:	f000 fb32 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800305a:	2025      	movs	r0, #37	@ 0x25
 800305c:	f000 fb4b 	bl	80036f6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003060:	e06c      	b.n	800313c <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a3a      	ldr	r2, [pc, #232]	@ (8003150 <HAL_UART_MspInit+0x184>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d130      	bne.n	80030ce <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800306c:	4b36      	ldr	r3, [pc, #216]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	4a35      	ldr	r2, [pc, #212]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 8003072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003076:	61d3      	str	r3, [r2, #28]
 8003078:	4b33      	ldr	r3, [pc, #204]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003084:	4b30      	ldr	r3, [pc, #192]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	4a2f      	ldr	r2, [pc, #188]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	6193      	str	r3, [r2, #24]
 8003090:	4b2d      	ldr	r3, [pc, #180]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800309c:	2304      	movs	r3, #4
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a0:	2302      	movs	r3, #2
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a8:	f107 0320 	add.w	r3, r7, #32
 80030ac:	4619      	mov	r1, r3
 80030ae:	4827      	ldr	r0, [pc, #156]	@ (800314c <HAL_UART_MspInit+0x180>)
 80030b0:	f000 fbfc 	bl	80038ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030b4:	2308      	movs	r3, #8
 80030b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b8:	2300      	movs	r3, #0
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c0:	f107 0320 	add.w	r3, r7, #32
 80030c4:	4619      	mov	r1, r3
 80030c6:	4821      	ldr	r0, [pc, #132]	@ (800314c <HAL_UART_MspInit+0x180>)
 80030c8:	f000 fbf0 	bl	80038ac <HAL_GPIO_Init>
}
 80030cc:	e036      	b.n	800313c <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a20      	ldr	r2, [pc, #128]	@ (8003154 <HAL_UART_MspInit+0x188>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d131      	bne.n	800313c <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 80030de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e2:	61d3      	str	r3, [r2, #28]
 80030e4:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f0:	4b15      	ldr	r3, [pc, #84]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	4a14      	ldr	r2, [pc, #80]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 80030f6:	f043 0308 	orr.w	r3, r3, #8
 80030fa:	6193      	str	r3, [r2, #24]
 80030fc:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <HAL_UART_MspInit+0x17c>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800310c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003112:	2303      	movs	r3, #3
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003116:	f107 0320 	add.w	r3, r7, #32
 800311a:	4619      	mov	r1, r3
 800311c:	480e      	ldr	r0, [pc, #56]	@ (8003158 <HAL_UART_MspInit+0x18c>)
 800311e:	f000 fbc5 	bl	80038ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003122:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003130:	f107 0320 	add.w	r3, r7, #32
 8003134:	4619      	mov	r1, r3
 8003136:	4808      	ldr	r0, [pc, #32]	@ (8003158 <HAL_UART_MspInit+0x18c>)
 8003138:	f000 fbb8 	bl	80038ac <HAL_GPIO_Init>
}
 800313c:	bf00      	nop
 800313e:	3730      	adds	r7, #48	@ 0x30
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40013800 	.word	0x40013800
 8003148:	40021000 	.word	0x40021000
 800314c:	40010800 	.word	0x40010800
 8003150:	40004400 	.word	0x40004400
 8003154:	40004800 	.word	0x40004800
 8003158:	40010c00 	.word	0x40010c00

0800315c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003160:	bf00      	nop
 8003162:	e7fd      	b.n	8003160 <NMI_Handler+0x4>

08003164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003168:	bf00      	nop
 800316a:	e7fd      	b.n	8003168 <HardFault_Handler+0x4>

0800316c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <MemManage_Handler+0x4>

08003174 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003178:	bf00      	nop
 800317a:	e7fd      	b.n	8003178 <BusFault_Handler+0x4>

0800317c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003180:	bf00      	nop
 8003182:	e7fd      	b.n	8003180 <UsageFault_Handler+0x4>

08003184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ac:	f000 f970 	bl	8003490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031b8:	4802      	ldr	r0, [pc, #8]	@ (80031c4 <TIM1_UP_IRQHandler+0x10>)
 80031ba:	f004 f87d 	bl	80072b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	2000026c 	.word	0x2000026c

080031c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031cc:	4802      	ldr	r0, [pc, #8]	@ (80031d8 <TIM3_IRQHandler+0x10>)
 80031ce:	f004 f873 	bl	80072b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	200002b4 	.word	0x200002b4

080031dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80031e0:	4802      	ldr	r0, [pc, #8]	@ (80031ec <I2C1_EV_IRQHandler+0x10>)
 80031e2:	f001 fb37 	bl	8004854 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000218 	.word	0x20000218

080031f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80031f4:	4802      	ldr	r0, [pc, #8]	@ (8003200 <I2C1_ER_IRQHandler+0x10>)
 80031f6:	f001 fc9e 	bl	8004b36 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000218 	.word	0x20000218

08003204 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003208:	4802      	ldr	r0, [pc, #8]	@ (8003214 <USART1_IRQHandler+0x10>)
 800320a:	f004 fca5 	bl	8007b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200002fc 	.word	0x200002fc

08003218 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800321c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003220:	f000 fd10 	bl	8003c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003224:	bf00      	nop
 8003226:	bd80      	pop	{r7, pc}

08003228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return 1;
 800322c:	2301      	movs	r3, #1
}
 800322e:	4618      	mov	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <_kill>:

int _kill(int pid, int sig)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003240:	f005 ffc8 	bl	80091d4 <__errno>
 8003244:	4603      	mov	r3, r0
 8003246:	2216      	movs	r2, #22
 8003248:	601a      	str	r2, [r3, #0]
  return -1;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <_exit>:

void _exit (int status)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800325e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffe7 	bl	8003236 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003268:	bf00      	nop
 800326a:	e7fd      	b.n	8003268 <_exit+0x12>

0800326c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	e00a      	b.n	8003294 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800327e:	f3af 8000 	nop.w
 8003282:	4601      	mov	r1, r0
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	60ba      	str	r2, [r7, #8]
 800328a:	b2ca      	uxtb	r2, r1
 800328c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3301      	adds	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	dbf0      	blt.n	800327e <_read+0x12>
  }

  return len;
 800329c:	687b      	ldr	r3, [r7, #4]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	e009      	b.n	80032cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	60ba      	str	r2, [r7, #8]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3301      	adds	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	dbf1      	blt.n	80032b8 <_write+0x12>
  }
  return len;
 80032d4:	687b      	ldr	r3, [r7, #4]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <_close>:

int _close(int file)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003304:	605a      	str	r2, [r3, #4]
  return 0;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr

08003312 <_isatty>:

int _isatty(int file)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800331a:	2301      	movs	r3, #1
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr

08003326 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
	...

08003340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003348:	4a14      	ldr	r2, [pc, #80]	@ (800339c <_sbrk+0x5c>)
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <_sbrk+0x60>)
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003354:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <_sbrk+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800335c:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <_sbrk+0x64>)
 800335e:	4a12      	ldr	r2, [pc, #72]	@ (80033a8 <_sbrk+0x68>)
 8003360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003362:	4b10      	ldr	r3, [pc, #64]	@ (80033a4 <_sbrk+0x64>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	429a      	cmp	r2, r3
 800336e:	d207      	bcs.n	8003380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003370:	f005 ff30 	bl	80091d4 <__errno>
 8003374:	4603      	mov	r3, r0
 8003376:	220c      	movs	r2, #12
 8003378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800337a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800337e:	e009      	b.n	8003394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003380:	4b08      	ldr	r3, [pc, #32]	@ (80033a4 <_sbrk+0x64>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003386:	4b07      	ldr	r3, [pc, #28]	@ (80033a4 <_sbrk+0x64>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	4a05      	ldr	r2, [pc, #20]	@ (80033a4 <_sbrk+0x64>)
 8003390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20005000 	.word	0x20005000
 80033a0:	00000400 	.word	0x00000400
 80033a4:	200008b8 	.word	0x200008b8
 80033a8:	20000a10 	.word	0x20000a10

080033ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033b8:	f7ff fff8 	bl	80033ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033bc:	480b      	ldr	r0, [pc, #44]	@ (80033ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80033be:	490c      	ldr	r1, [pc, #48]	@ (80033f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80033c0:	4a0c      	ldr	r2, [pc, #48]	@ (80033f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80033c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033c4:	e002      	b.n	80033cc <LoopCopyDataInit>

080033c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ca:	3304      	adds	r3, #4

080033cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d0:	d3f9      	bcc.n	80033c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033d2:	4a09      	ldr	r2, [pc, #36]	@ (80033f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80033d4:	4c09      	ldr	r4, [pc, #36]	@ (80033fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033d8:	e001      	b.n	80033de <LoopFillZerobss>

080033da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033dc:	3204      	adds	r2, #4

080033de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e0:	d3fb      	bcc.n	80033da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033e2:	f005 fefd 	bl	80091e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033e6:	f7fe fcf5 	bl	8001dd4 <main>
  bx lr
 80033ea:	4770      	bx	lr
  ldr r0, =_sdata
 80033ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033f0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80033f4:	0800bf5c 	.word	0x0800bf5c
  ldr r2, =_sbss
 80033f8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80033fc:	20000a0c 	.word	0x20000a0c

08003400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003400:	e7fe      	b.n	8003400 <ADC1_2_IRQHandler>
	...

08003404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003408:	4b08      	ldr	r3, [pc, #32]	@ (800342c <HAL_Init+0x28>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a07      	ldr	r2, [pc, #28]	@ (800342c <HAL_Init+0x28>)
 800340e:	f043 0310 	orr.w	r3, r3, #16
 8003412:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003414:	2003      	movs	r0, #3
 8003416:	f000 f947 	bl	80036a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800341a:	200f      	movs	r0, #15
 800341c:	f000 f808 	bl	8003430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003420:	f7ff fd12 	bl	8002e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40022000 	.word	0x40022000

08003430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003438:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <HAL_InitTick+0x54>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b12      	ldr	r3, [pc, #72]	@ (8003488 <HAL_InitTick+0x58>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	4619      	mov	r1, r3
 8003442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003446:	fbb3 f3f1 	udiv	r3, r3, r1
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f95f 	bl	8003712 <HAL_SYSTICK_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e00e      	b.n	800347c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b0f      	cmp	r3, #15
 8003462:	d80a      	bhi.n	800347a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003464:	2200      	movs	r2, #0
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800346c:	f000 f927 	bl	80036be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003470:	4a06      	ldr	r2, [pc, #24]	@ (800348c <HAL_InitTick+0x5c>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e000      	b.n	800347c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000024 	.word	0x20000024
 8003488:	2000002c 	.word	0x2000002c
 800348c:	20000028 	.word	0x20000028

08003490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003494:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <HAL_IncTick+0x1c>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <HAL_IncTick+0x20>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4413      	add	r3, r2
 80034a0:	4a03      	ldr	r2, [pc, #12]	@ (80034b0 <HAL_IncTick+0x20>)
 80034a2:	6013      	str	r3, [r2, #0]
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	2000002c 	.word	0x2000002c
 80034b0:	200008bc 	.word	0x200008bc

080034b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return uwTick;
 80034b8:	4b02      	ldr	r3, [pc, #8]	@ (80034c4 <HAL_GetTick+0x10>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	200008bc 	.word	0x200008bc

080034c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034d0:	f7ff fff0 	bl	80034b4 <HAL_GetTick>
 80034d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034e0:	d005      	beq.n	80034ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034e2:	4b0a      	ldr	r3, [pc, #40]	@ (800350c <HAL_Delay+0x44>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ee:	bf00      	nop
 80034f0:	f7ff ffe0 	bl	80034b4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d8f7      	bhi.n	80034f0 <HAL_Delay+0x28>
  {
  }
}
 8003500:	bf00      	nop
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	2000002c 	.word	0x2000002c

08003510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003520:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <__NVIC_SetPriorityGrouping+0x44>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800352c:	4013      	ands	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003538:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800353c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003542:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <__NVIC_SetPriorityGrouping+0x44>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	60d3      	str	r3, [r2, #12]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800355c:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <__NVIC_GetPriorityGrouping+0x18>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	f003 0307 	and.w	r3, r3, #7
}
 8003566:	4618      	mov	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	2b00      	cmp	r3, #0
 8003584:	db0b      	blt.n	800359e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	f003 021f 	and.w	r2, r3, #31
 800358c:	4906      	ldr	r1, [pc, #24]	@ (80035a8 <__NVIC_EnableIRQ+0x34>)
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	2001      	movs	r0, #1
 8003596:	fa00 f202 	lsl.w	r2, r0, r2
 800359a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	e000e100 	.word	0xe000e100

080035ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	6039      	str	r1, [r7, #0]
 80035b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	db0a      	blt.n	80035d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	490c      	ldr	r1, [pc, #48]	@ (80035f8 <__NVIC_SetPriority+0x4c>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	0112      	lsls	r2, r2, #4
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	440b      	add	r3, r1
 80035d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d4:	e00a      	b.n	80035ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4908      	ldr	r1, [pc, #32]	@ (80035fc <__NVIC_SetPriority+0x50>)
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	3b04      	subs	r3, #4
 80035e4:	0112      	lsls	r2, r2, #4
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	440b      	add	r3, r1
 80035ea:	761a      	strb	r2, [r3, #24]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000e100 	.word	0xe000e100
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	@ 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f1c3 0307 	rsb	r3, r3, #7
 800361a:	2b04      	cmp	r3, #4
 800361c:	bf28      	it	cs
 800361e:	2304      	movcs	r3, #4
 8003620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3304      	adds	r3, #4
 8003626:	2b06      	cmp	r3, #6
 8003628:	d902      	bls.n	8003630 <NVIC_EncodePriority+0x30>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3b03      	subs	r3, #3
 800362e:	e000      	b.n	8003632 <NVIC_EncodePriority+0x32>
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	401a      	ands	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003648:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43d9      	mvns	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003658:	4313      	orrs	r3, r2
         );
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	@ 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003674:	d301      	bcc.n	800367a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003676:	2301      	movs	r3, #1
 8003678:	e00f      	b.n	800369a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367a:	4a0a      	ldr	r2, [pc, #40]	@ (80036a4 <SysTick_Config+0x40>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003682:	210f      	movs	r1, #15
 8003684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003688:	f7ff ff90 	bl	80035ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800368c:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <SysTick_Config+0x40>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003692:	4b04      	ldr	r3, [pc, #16]	@ (80036a4 <SysTick_Config+0x40>)
 8003694:	2207      	movs	r2, #7
 8003696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	e000e010 	.word	0xe000e010

080036a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff2d 	bl	8003510 <__NVIC_SetPriorityGrouping>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d0:	f7ff ff42 	bl	8003558 <__NVIC_GetPriorityGrouping>
 80036d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f7ff ff90 	bl	8003600 <NVIC_EncodePriority>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff5f 	bl	80035ac <__NVIC_SetPriority>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff35 	bl	8003574 <__NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffa2 	bl	8003664 <SysTick_Config>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d008      	beq.n	8003754 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2204      	movs	r2, #4
 8003746:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e020      	b.n	8003796 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 020e 	bic.w	r2, r2, #14
 8003762:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377c:	2101      	movs	r1, #1
 800377e:	fa01 f202 	lsl.w	r2, r1, r2
 8003782:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d005      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2204      	movs	r2, #4
 80037bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	e051      	b.n	8003868 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 020e 	bic.w	r2, r2, #14
 80037d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a22      	ldr	r2, [pc, #136]	@ (8003874 <HAL_DMA_Abort_IT+0xd4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d029      	beq.n	8003842 <HAL_DMA_Abort_IT+0xa2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a21      	ldr	r2, [pc, #132]	@ (8003878 <HAL_DMA_Abort_IT+0xd8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d022      	beq.n	800383e <HAL_DMA_Abort_IT+0x9e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1f      	ldr	r2, [pc, #124]	@ (800387c <HAL_DMA_Abort_IT+0xdc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01a      	beq.n	8003838 <HAL_DMA_Abort_IT+0x98>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1e      	ldr	r2, [pc, #120]	@ (8003880 <HAL_DMA_Abort_IT+0xe0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d012      	beq.n	8003832 <HAL_DMA_Abort_IT+0x92>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1c      	ldr	r2, [pc, #112]	@ (8003884 <HAL_DMA_Abort_IT+0xe4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00a      	beq.n	800382c <HAL_DMA_Abort_IT+0x8c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1b      	ldr	r2, [pc, #108]	@ (8003888 <HAL_DMA_Abort_IT+0xe8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d102      	bne.n	8003826 <HAL_DMA_Abort_IT+0x86>
 8003820:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003824:	e00e      	b.n	8003844 <HAL_DMA_Abort_IT+0xa4>
 8003826:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800382a:	e00b      	b.n	8003844 <HAL_DMA_Abort_IT+0xa4>
 800382c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003830:	e008      	b.n	8003844 <HAL_DMA_Abort_IT+0xa4>
 8003832:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003836:	e005      	b.n	8003844 <HAL_DMA_Abort_IT+0xa4>
 8003838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800383c:	e002      	b.n	8003844 <HAL_DMA_Abort_IT+0xa4>
 800383e:	2310      	movs	r3, #16
 8003840:	e000      	b.n	8003844 <HAL_DMA_Abort_IT+0xa4>
 8003842:	2301      	movs	r3, #1
 8003844:	4a11      	ldr	r2, [pc, #68]	@ (800388c <HAL_DMA_Abort_IT+0xec>)
 8003846:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
    } 
  }
  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40020008 	.word	0x40020008
 8003878:	4002001c 	.word	0x4002001c
 800387c:	40020030 	.word	0x40020030
 8003880:	40020044 	.word	0x40020044
 8003884:	40020058 	.word	0x40020058
 8003888:	4002006c 	.word	0x4002006c
 800388c:	40020000 	.word	0x40020000

08003890 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800389e:	b2db      	uxtb	r3, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b08b      	sub	sp, #44	@ 0x2c
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038ba:	2300      	movs	r3, #0
 80038bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038be:	e169      	b.n	8003b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038c0:	2201      	movs	r2, #1
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	429a      	cmp	r2, r3
 80038da:	f040 8158 	bne.w	8003b8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4a9a      	ldr	r2, [pc, #616]	@ (8003b4c <HAL_GPIO_Init+0x2a0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d05e      	beq.n	80039a6 <HAL_GPIO_Init+0xfa>
 80038e8:	4a98      	ldr	r2, [pc, #608]	@ (8003b4c <HAL_GPIO_Init+0x2a0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d875      	bhi.n	80039da <HAL_GPIO_Init+0x12e>
 80038ee:	4a98      	ldr	r2, [pc, #608]	@ (8003b50 <HAL_GPIO_Init+0x2a4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d058      	beq.n	80039a6 <HAL_GPIO_Init+0xfa>
 80038f4:	4a96      	ldr	r2, [pc, #600]	@ (8003b50 <HAL_GPIO_Init+0x2a4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d86f      	bhi.n	80039da <HAL_GPIO_Init+0x12e>
 80038fa:	4a96      	ldr	r2, [pc, #600]	@ (8003b54 <HAL_GPIO_Init+0x2a8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d052      	beq.n	80039a6 <HAL_GPIO_Init+0xfa>
 8003900:	4a94      	ldr	r2, [pc, #592]	@ (8003b54 <HAL_GPIO_Init+0x2a8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d869      	bhi.n	80039da <HAL_GPIO_Init+0x12e>
 8003906:	4a94      	ldr	r2, [pc, #592]	@ (8003b58 <HAL_GPIO_Init+0x2ac>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04c      	beq.n	80039a6 <HAL_GPIO_Init+0xfa>
 800390c:	4a92      	ldr	r2, [pc, #584]	@ (8003b58 <HAL_GPIO_Init+0x2ac>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d863      	bhi.n	80039da <HAL_GPIO_Init+0x12e>
 8003912:	4a92      	ldr	r2, [pc, #584]	@ (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d046      	beq.n	80039a6 <HAL_GPIO_Init+0xfa>
 8003918:	4a90      	ldr	r2, [pc, #576]	@ (8003b5c <HAL_GPIO_Init+0x2b0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d85d      	bhi.n	80039da <HAL_GPIO_Init+0x12e>
 800391e:	2b12      	cmp	r3, #18
 8003920:	d82a      	bhi.n	8003978 <HAL_GPIO_Init+0xcc>
 8003922:	2b12      	cmp	r3, #18
 8003924:	d859      	bhi.n	80039da <HAL_GPIO_Init+0x12e>
 8003926:	a201      	add	r2, pc, #4	@ (adr r2, 800392c <HAL_GPIO_Init+0x80>)
 8003928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392c:	080039a7 	.word	0x080039a7
 8003930:	08003981 	.word	0x08003981
 8003934:	08003993 	.word	0x08003993
 8003938:	080039d5 	.word	0x080039d5
 800393c:	080039db 	.word	0x080039db
 8003940:	080039db 	.word	0x080039db
 8003944:	080039db 	.word	0x080039db
 8003948:	080039db 	.word	0x080039db
 800394c:	080039db 	.word	0x080039db
 8003950:	080039db 	.word	0x080039db
 8003954:	080039db 	.word	0x080039db
 8003958:	080039db 	.word	0x080039db
 800395c:	080039db 	.word	0x080039db
 8003960:	080039db 	.word	0x080039db
 8003964:	080039db 	.word	0x080039db
 8003968:	080039db 	.word	0x080039db
 800396c:	080039db 	.word	0x080039db
 8003970:	08003989 	.word	0x08003989
 8003974:	0800399d 	.word	0x0800399d
 8003978:	4a79      	ldr	r2, [pc, #484]	@ (8003b60 <HAL_GPIO_Init+0x2b4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800397e:	e02c      	b.n	80039da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	623b      	str	r3, [r7, #32]
          break;
 8003986:	e029      	b.n	80039dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	3304      	adds	r3, #4
 800398e:	623b      	str	r3, [r7, #32]
          break;
 8003990:	e024      	b.n	80039dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	3308      	adds	r3, #8
 8003998:	623b      	str	r3, [r7, #32]
          break;
 800399a:	e01f      	b.n	80039dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	330c      	adds	r3, #12
 80039a2:	623b      	str	r3, [r7, #32]
          break;
 80039a4:	e01a      	b.n	80039dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039ae:	2304      	movs	r3, #4
 80039b0:	623b      	str	r3, [r7, #32]
          break;
 80039b2:	e013      	b.n	80039dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d105      	bne.n	80039c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039bc:	2308      	movs	r3, #8
 80039be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	611a      	str	r2, [r3, #16]
          break;
 80039c6:	e009      	b.n	80039dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039c8:	2308      	movs	r3, #8
 80039ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	615a      	str	r2, [r3, #20]
          break;
 80039d2:	e003      	b.n	80039dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039d4:	2300      	movs	r3, #0
 80039d6:	623b      	str	r3, [r7, #32]
          break;
 80039d8:	e000      	b.n	80039dc <HAL_GPIO_Init+0x130>
          break;
 80039da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2bff      	cmp	r3, #255	@ 0xff
 80039e0:	d801      	bhi.n	80039e6 <HAL_GPIO_Init+0x13a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	e001      	b.n	80039ea <HAL_GPIO_Init+0x13e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2bff      	cmp	r3, #255	@ 0xff
 80039f0:	d802      	bhi.n	80039f8 <HAL_GPIO_Init+0x14c>
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	e002      	b.n	80039fe <HAL_GPIO_Init+0x152>
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	3b08      	subs	r3, #8
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	210f      	movs	r1, #15
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	401a      	ands	r2, r3
 8003a10:	6a39      	ldr	r1, [r7, #32]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	fa01 f303 	lsl.w	r3, r1, r3
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80b1 	beq.w	8003b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a2c:	4b4d      	ldr	r3, [pc, #308]	@ (8003b64 <HAL_GPIO_Init+0x2b8>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	4a4c      	ldr	r2, [pc, #304]	@ (8003b64 <HAL_GPIO_Init+0x2b8>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6193      	str	r3, [r2, #24]
 8003a38:	4b4a      	ldr	r3, [pc, #296]	@ (8003b64 <HAL_GPIO_Init+0x2b8>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a44:	4a48      	ldr	r2, [pc, #288]	@ (8003b68 <HAL_GPIO_Init+0x2bc>)
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4013      	ands	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a40      	ldr	r2, [pc, #256]	@ (8003b6c <HAL_GPIO_Init+0x2c0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <HAL_GPIO_Init+0x1ec>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a3f      	ldr	r2, [pc, #252]	@ (8003b70 <HAL_GPIO_Init+0x2c4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00d      	beq.n	8003a94 <HAL_GPIO_Init+0x1e8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b74 <HAL_GPIO_Init+0x2c8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d007      	beq.n	8003a90 <HAL_GPIO_Init+0x1e4>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3d      	ldr	r2, [pc, #244]	@ (8003b78 <HAL_GPIO_Init+0x2cc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d101      	bne.n	8003a8c <HAL_GPIO_Init+0x1e0>
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e006      	b.n	8003a9a <HAL_GPIO_Init+0x1ee>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	e004      	b.n	8003a9a <HAL_GPIO_Init+0x1ee>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e002      	b.n	8003a9a <HAL_GPIO_Init+0x1ee>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_GPIO_Init+0x1ee>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a9c:	f002 0203 	and.w	r2, r2, #3
 8003aa0:	0092      	lsls	r2, r2, #2
 8003aa2:	4093      	lsls	r3, r2
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003aaa:	492f      	ldr	r1, [pc, #188]	@ (8003b68 <HAL_GPIO_Init+0x2bc>)
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d006      	beq.n	8003ad2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	492c      	ldr	r1, [pc, #176]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]
 8003ad0:	e006      	b.n	8003ae0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	4928      	ldr	r1, [pc, #160]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d006      	beq.n	8003afa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003aec:	4b23      	ldr	r3, [pc, #140]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	4922      	ldr	r1, [pc, #136]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60cb      	str	r3, [r1, #12]
 8003af8:	e006      	b.n	8003b08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003afa:	4b20      	ldr	r3, [pc, #128]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	491e      	ldr	r1, [pc, #120]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d006      	beq.n	8003b22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b14:	4b19      	ldr	r3, [pc, #100]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	4918      	ldr	r1, [pc, #96]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
 8003b20:	e006      	b.n	8003b30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b22:	4b16      	ldr	r3, [pc, #88]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	4914      	ldr	r1, [pc, #80]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d021      	beq.n	8003b80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	490e      	ldr	r1, [pc, #56]	@ (8003b7c <HAL_GPIO_Init+0x2d0>)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]
 8003b48:	e021      	b.n	8003b8e <HAL_GPIO_Init+0x2e2>
 8003b4a:	bf00      	nop
 8003b4c:	10320000 	.word	0x10320000
 8003b50:	10310000 	.word	0x10310000
 8003b54:	10220000 	.word	0x10220000
 8003b58:	10210000 	.word	0x10210000
 8003b5c:	10120000 	.word	0x10120000
 8003b60:	10110000 	.word	0x10110000
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40010800 	.word	0x40010800
 8003b70:	40010c00 	.word	0x40010c00
 8003b74:	40011000 	.word	0x40011000
 8003b78:	40011400 	.word	0x40011400
 8003b7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	4909      	ldr	r1, [pc, #36]	@ (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	3301      	adds	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f47f ae8e 	bne.w	80038c0 <HAL_GPIO_Init+0x14>
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	372c      	adds	r7, #44	@ 0x2c
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	40010400 	.word	0x40010400

08003bb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
 8003bd0:	e001      	b.n	8003bd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr

08003be2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	460b      	mov	r3, r1
 8003bec:	807b      	strh	r3, [r7, #2]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bf2:	787b      	ldrb	r3, [r7, #1]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bf8:	887a      	ldrh	r2, [r7, #2]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bfe:	e003      	b.n	8003c08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	041a      	lsls	r2, r3, #16
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	611a      	str	r2, [r3, #16]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c24:	887a      	ldrh	r2, [r7, #2]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	041a      	lsls	r2, r3, #16
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	43d9      	mvns	r1, r3
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	400b      	ands	r3, r1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	611a      	str	r2, [r3, #16]
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c4e:	4b08      	ldr	r3, [pc, #32]	@ (8003c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d006      	beq.n	8003c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c5a:	4a05      	ldr	r2, [pc, #20]	@ (8003c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd fea8 	bl	80019b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40010400 	.word	0x40010400

08003c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e12b      	b.n	8003ede <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff f906 	bl	8002eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	@ 0x24
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cd8:	f003 fa06 	bl	80070e8 <HAL_RCC_GetPCLK1Freq>
 8003cdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4a81      	ldr	r2, [pc, #516]	@ (8003ee8 <HAL_I2C_Init+0x274>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d807      	bhi.n	8003cf8 <HAL_I2C_Init+0x84>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a80      	ldr	r2, [pc, #512]	@ (8003eec <HAL_I2C_Init+0x278>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	bf94      	ite	ls
 8003cf0:	2301      	movls	r3, #1
 8003cf2:	2300      	movhi	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e006      	b.n	8003d06 <HAL_I2C_Init+0x92>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a7d      	ldr	r2, [pc, #500]	@ (8003ef0 <HAL_I2C_Init+0x27c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	bf94      	ite	ls
 8003d00:	2301      	movls	r3, #1
 8003d02:	2300      	movhi	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e0e7      	b.n	8003ede <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4a78      	ldr	r2, [pc, #480]	@ (8003ef4 <HAL_I2C_Init+0x280>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	0c9b      	lsrs	r3, r3, #18
 8003d18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ee8 <HAL_I2C_Init+0x274>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d802      	bhi.n	8003d48 <HAL_I2C_Init+0xd4>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	3301      	adds	r3, #1
 8003d46:	e009      	b.n	8003d5c <HAL_I2C_Init+0xe8>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	4a69      	ldr	r2, [pc, #420]	@ (8003ef8 <HAL_I2C_Init+0x284>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	099b      	lsrs	r3, r3, #6
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	495c      	ldr	r1, [pc, #368]	@ (8003ee8 <HAL_I2C_Init+0x274>)
 8003d78:	428b      	cmp	r3, r1
 8003d7a:	d819      	bhi.n	8003db0 <HAL_I2C_Init+0x13c>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1e59      	subs	r1, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d8a:	1c59      	adds	r1, r3, #1
 8003d8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d90:	400b      	ands	r3, r1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_I2C_Init+0x138>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1e59      	subs	r1, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003da4:	3301      	adds	r3, #1
 8003da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003daa:	e051      	b.n	8003e50 <HAL_I2C_Init+0x1dc>
 8003dac:	2304      	movs	r3, #4
 8003dae:	e04f      	b.n	8003e50 <HAL_I2C_Init+0x1dc>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d111      	bne.n	8003ddc <HAL_I2C_Init+0x168>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1e58      	subs	r0, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	440b      	add	r3, r1
 8003dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e012      	b.n	8003e02 <HAL_I2C_Init+0x18e>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1e58      	subs	r0, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	0099      	lsls	r1, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2301      	moveq	r3, #1
 8003dfe:	2300      	movne	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Init+0x196>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e022      	b.n	8003e50 <HAL_I2C_Init+0x1dc>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10e      	bne.n	8003e30 <HAL_I2C_Init+0x1bc>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1e58      	subs	r0, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6859      	ldr	r1, [r3, #4]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	440b      	add	r3, r1
 8003e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e24:	3301      	adds	r3, #1
 8003e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e2e:	e00f      	b.n	8003e50 <HAL_I2C_Init+0x1dc>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1e58      	subs	r0, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	0099      	lsls	r1, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	6809      	ldr	r1, [r1, #0]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6911      	ldr	r1, [r2, #16]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68d2      	ldr	r2, [r2, #12]
 8003e8a:	4311      	orrs	r1, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	000186a0 	.word	0x000186a0
 8003eec:	001e847f 	.word	0x001e847f
 8003ef0:	003d08ff 	.word	0x003d08ff
 8003ef4:	431bde83 	.word	0x431bde83
 8003ef8:	10624dd3 	.word	0x10624dd3

08003efc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b80      	cmp	r3, #128	@ 0x80
 8003f10:	d103      	bne.n	8003f1a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	611a      	str	r2, [r3, #16]
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	460b      	mov	r3, r1
 8003f32:	817b      	strh	r3, [r7, #10]
 8003f34:	4613      	mov	r3, r2
 8003f36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f38:	f7ff fabc 	bl	80034b4 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f040 80e0 	bne.w	800410c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2319      	movs	r3, #25
 8003f52:	2201      	movs	r2, #1
 8003f54:	4970      	ldr	r1, [pc, #448]	@ (8004118 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f002 fa7a 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
 8003f64:	e0d3      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2C_Master_Transmit+0x50>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e0cc      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d007      	beq.n	8003f9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2221      	movs	r2, #33	@ 0x21
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	893a      	ldrh	r2, [r7, #8]
 8003fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a50      	ldr	r2, [pc, #320]	@ (800411c <HAL_I2C_Master_Transmit+0x1f8>)
 8003fda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fdc:	8979      	ldrh	r1, [r7, #10]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	6a3a      	ldr	r2, [r7, #32]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f002 f83c 	bl	8006060 <I2C_MasterRequestWrite>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e08d      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004008:	e066      	b.n	80040d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	6a39      	ldr	r1, [r7, #32]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f002 fb38 	bl	8006684 <I2C_WaitOnTXEFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00d      	beq.n	8004036 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	2b04      	cmp	r3, #4
 8004020:	d107      	bne.n	8004032 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004030:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e06b      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b04      	cmp	r3, #4
 8004072:	d11b      	bne.n	80040ac <HAL_I2C_Master_Transmit+0x188>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	d017      	beq.n	80040ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	6a39      	ldr	r1, [r7, #32]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f002 fb2f 	bl	8006714 <I2C_WaitOnBTFFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d107      	bne.n	80040d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e01a      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d194      	bne.n	800400a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	00100002 	.word	0x00100002
 800411c:	ffff0000 	.word	0xffff0000

08004120 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08c      	sub	sp, #48	@ 0x30
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	461a      	mov	r2, r3
 800412c:	460b      	mov	r3, r1
 800412e:	817b      	strh	r3, [r7, #10]
 8004130:	4613      	mov	r3, r2
 8004132:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004138:	f7ff f9bc 	bl	80034b4 <HAL_GetTick>
 800413c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b20      	cmp	r3, #32
 8004148:	f040 824b 	bne.w	80045e2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	2319      	movs	r3, #25
 8004152:	2201      	movs	r2, #1
 8004154:	497f      	ldr	r1, [pc, #508]	@ (8004354 <HAL_I2C_Master_Receive+0x234>)
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f002 f97a 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
 8004164:	e23e      	b.n	80045e4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_I2C_Master_Receive+0x54>
 8004170:	2302      	movs	r3, #2
 8004172:	e237      	b.n	80045e4 <HAL_I2C_Master_Receive+0x4c4>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d007      	beq.n	800419a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2222      	movs	r2, #34	@ 0x22
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2210      	movs	r2, #16
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	893a      	ldrh	r2, [r7, #8]
 80041ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004358 <HAL_I2C_Master_Receive+0x238>)
 80041da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041dc:	8979      	ldrh	r1, [r7, #10]
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f001 ffbe 	bl	8006164 <I2C_MasterRequestRead>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1f8      	b.n	80045e4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d113      	bne.n	8004222 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e1cc      	b.n	80045bc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004226:	2b01      	cmp	r3, #1
 8004228:	d11e      	bne.n	8004268 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004238:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800423a:	b672      	cpsid	i
}
 800423c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423e:	2300      	movs	r3, #0
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004262:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004264:	b662      	cpsie	i
}
 8004266:	e035      	b.n	80042d4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426c:	2b02      	cmp	r3, #2
 800426e:	d11e      	bne.n	80042ae <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800427e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004280:	b672      	cpsid	i
}
 8004282:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042aa:	b662      	cpsie	i
}
 80042ac:	e012      	b.n	80042d4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80042d4:	e172      	b.n	80045bc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042da:	2b03      	cmp	r3, #3
 80042dc:	f200 811f 	bhi.w	800451e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d123      	bne.n	8004330 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f002 fa8b 	bl	8006808 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e173      	b.n	80045e4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800432e:	e145      	b.n	80045bc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	2b02      	cmp	r3, #2
 8004336:	d152      	bne.n	80043de <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433e:	2200      	movs	r2, #0
 8004340:	4906      	ldr	r1, [pc, #24]	@ (800435c <HAL_I2C_Master_Receive+0x23c>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f002 f884 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e148      	b.n	80045e4 <HAL_I2C_Master_Receive+0x4c4>
 8004352:	bf00      	nop
 8004354:	00100002 	.word	0x00100002
 8004358:	ffff0000 	.word	0xffff0000
 800435c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004360:	b672      	cpsid	i
}
 8004362:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043a6:	b662      	cpsie	i
}
 80043a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043dc:	e0ee      	b.n	80045bc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	2200      	movs	r2, #0
 80043e6:	4981      	ldr	r1, [pc, #516]	@ (80045ec <HAL_I2C_Master_Receive+0x4cc>)
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f002 f831 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0f5      	b.n	80045e4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004406:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004408:	b672      	cpsid	i
}
 800440a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800443e:	4b6c      	ldr	r3, [pc, #432]	@ (80045f0 <HAL_I2C_Master_Receive+0x4d0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	08db      	lsrs	r3, r3, #3
 8004444:	4a6b      	ldr	r2, [pc, #428]	@ (80045f4 <HAL_I2C_Master_Receive+0x4d4>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0a1a      	lsrs	r2, r3, #8
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	00da      	lsls	r2, r3, #3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	3b01      	subs	r3, #1
 800445c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d118      	bne.n	8004496 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004486:	b662      	cpsie	i
}
 8004488:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e0a6      	b.n	80045e4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d1d9      	bne.n	8004458 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044e6:	b662      	cpsie	i
}
 80044e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800451c:	e04e      	b.n	80045bc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004520:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f002 f970 	bl	8006808 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e058      	b.n	80045e4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b04      	cmp	r3, #4
 8004570:	d124      	bne.n	80045bc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004576:	2b03      	cmp	r3, #3
 8004578:	d107      	bne.n	800458a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004588:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f47f ae88 	bne.w	80042d6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3728      	adds	r7, #40	@ 0x28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	00010004 	.word	0x00010004
 80045f0:	20000024 	.word	0x20000024
 80045f4:	14f8b589 	.word	0x14f8b589

080045f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	@ 0x28
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	607a      	str	r2, [r7, #4]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	460b      	mov	r3, r1
 8004606:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004608:	f7fe ff54 	bl	80034b4 <HAL_GetTick>
 800460c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b20      	cmp	r3, #32
 800461c:	f040 8111 	bne.w	8004842 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2319      	movs	r3, #25
 8004626:	2201      	movs	r2, #1
 8004628:	4988      	ldr	r1, [pc, #544]	@ (800484c <HAL_I2C_IsDeviceReady+0x254>)
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f001 ff10 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004636:	2302      	movs	r3, #2
 8004638:	e104      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_I2C_IsDeviceReady+0x50>
 8004644:	2302      	movs	r3, #2
 8004646:	e0fd      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d007      	beq.n	800466e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800467c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2224      	movs	r2, #36	@ 0x24
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a70      	ldr	r2, [pc, #448]	@ (8004850 <HAL_I2C_IsDeviceReady+0x258>)
 8004690:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f001 fece 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00d      	beq.n	80046d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c8:	d103      	bne.n	80046d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046d0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e0b6      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046d6:	897b      	ldrh	r3, [r7, #10]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80046e6:	f7fe fee5 	bl	80034b4 <HAL_GetTick>
 80046ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	bf0c      	ite	eq
 80046fa:	2301      	moveq	r3, #1
 80046fc:	2300      	movne	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800471a:	e025      	b.n	8004768 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800471c:	f7fe feca 	bl	80034b4 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <HAL_I2C_IsDeviceReady+0x13a>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	22a0      	movs	r2, #160	@ 0xa0
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b02      	cmp	r3, #2
 8004746:	bf0c      	ite	eq
 8004748:	2301      	moveq	r3, #1
 800474a:	2300      	movne	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2ba0      	cmp	r3, #160	@ 0xa0
 8004772:	d005      	beq.n	8004780 <HAL_I2C_IsDeviceReady+0x188>
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <HAL_I2C_IsDeviceReady+0x188>
 800477a:	7dbb      	ldrb	r3, [r7, #22]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0cd      	beq.n	800471c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d129      	bne.n	80047ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	2319      	movs	r3, #25
 80047c2:	2201      	movs	r2, #1
 80047c4:	4921      	ldr	r1, [pc, #132]	@ (800484c <HAL_I2C_IsDeviceReady+0x254>)
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f001 fe42 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e036      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e02c      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004802:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	2319      	movs	r3, #25
 800480a:	2201      	movs	r2, #1
 800480c:	490f      	ldr	r1, [pc, #60]	@ (800484c <HAL_I2C_IsDeviceReady+0x254>)
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f001 fe1e 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e012      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	3301      	adds	r3, #1
 8004822:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	429a      	cmp	r2, r3
 800482a:	f4ff af32 	bcc.w	8004692 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	00100002 	.word	0x00100002
 8004850:	ffff0000 	.word	0xffff0000

08004854 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004874:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800487c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b10      	cmp	r3, #16
 8004882:	d003      	beq.n	800488c <HAL_I2C_EV_IRQHandler+0x38>
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2b40      	cmp	r3, #64	@ 0x40
 8004888:	f040 80c1 	bne.w	8004a0e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10d      	bne.n	80048c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80048ac:	d003      	beq.n	80048b6 <HAL_I2C_EV_IRQHandler+0x62>
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80048b4:	d101      	bne.n	80048ba <HAL_I2C_EV_IRQHandler+0x66>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <HAL_I2C_EV_IRQHandler+0x68>
 80048ba:	2300      	movs	r3, #0
 80048bc:	2b01      	cmp	r3, #1
 80048be:	f000 8132 	beq.w	8004b26 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00c      	beq.n	80048e6 <HAL_I2C_EV_IRQHandler+0x92>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	0a5b      	lsrs	r3, r3, #9
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d006      	beq.n	80048e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f002 f820 	bl	800691e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fd99 	bl	8005416 <I2C_Master_SB>
 80048e4:	e092      	b.n	8004a0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	08db      	lsrs	r3, r3, #3
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <HAL_I2C_EV_IRQHandler+0xb2>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	0a5b      	lsrs	r3, r3, #9
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fe0e 	bl	8005520 <I2C_Master_ADD10>
 8004904:	e082      	b.n	8004a0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_I2C_EV_IRQHandler+0xd2>
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	0a5b      	lsrs	r3, r3, #9
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fe27 	bl	8005572 <I2C_Master_ADDR>
 8004924:	e072      	b.n	8004a0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d03b      	beq.n	80049aa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800493c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004940:	f000 80f3 	beq.w	8004b2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	09db      	lsrs	r3, r3, #7
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00f      	beq.n	8004970 <HAL_I2C_EV_IRQHandler+0x11c>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	0a9b      	lsrs	r3, r3, #10
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <HAL_I2C_EV_IRQHandler+0x11c>
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	089b      	lsrs	r3, r3, #2
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d103      	bne.n	8004970 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f9f1 	bl	8004d50 <I2C_MasterTransmit_TXE>
 800496e:	e04d      	b.n	8004a0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80d6 	beq.w	8004b2a <HAL_I2C_EV_IRQHandler+0x2d6>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	0a5b      	lsrs	r3, r3, #9
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80cf 	beq.w	8004b2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800498c:	7bbb      	ldrb	r3, [r7, #14]
 800498e:	2b21      	cmp	r3, #33	@ 0x21
 8004990:	d103      	bne.n	800499a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fa78 	bl	8004e88 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004998:	e0c7      	b.n	8004b2a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b40      	cmp	r3, #64	@ 0x40
 800499e:	f040 80c4 	bne.w	8004b2a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fae6 	bl	8004f74 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049a8:	e0bf      	b.n	8004b2a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b8:	f000 80b7 	beq.w	8004b2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00f      	beq.n	80049e8 <HAL_I2C_EV_IRQHandler+0x194>
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	0a9b      	lsrs	r3, r3, #10
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d009      	beq.n	80049e8 <HAL_I2C_EV_IRQHandler+0x194>
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d103      	bne.n	80049e8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fb5f 	bl	80050a4 <I2C_MasterReceive_RXNE>
 80049e6:	e011      	b.n	8004a0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 809a 	beq.w	8004b2a <HAL_I2C_EV_IRQHandler+0x2d6>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	0a5b      	lsrs	r3, r3, #9
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 8093 	beq.w	8004b2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fc15 	bl	8005234 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a0a:	e08e      	b.n	8004b2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a0c:	e08d      	b.n	8004b2a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	e007      	b.n	8004a30 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	085b      	lsrs	r3, r3, #1
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d012      	beq.n	8004a62 <HAL_I2C_EV_IRQHandler+0x20e>
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	0a5b      	lsrs	r3, r3, #9
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00c      	beq.n	8004a62 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004a58:	69b9      	ldr	r1, [r7, #24]
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 ffe0 	bl	8005a20 <I2C_Slave_ADDR>
 8004a60:	e066      	b.n	8004b30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x22e>
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	0a5b      	lsrs	r3, r3, #9
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f001 f81a 	bl	8005ab4 <I2C_Slave_STOPF>
 8004a80:	e056      	b.n	8004b30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a82:	7bbb      	ldrb	r3, [r7, #14]
 8004a84:	2b21      	cmp	r3, #33	@ 0x21
 8004a86:	d002      	beq.n	8004a8e <HAL_I2C_EV_IRQHandler+0x23a>
 8004a88:	7bbb      	ldrb	r3, [r7, #14]
 8004a8a:	2b29      	cmp	r3, #41	@ 0x29
 8004a8c:	d125      	bne.n	8004ada <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	09db      	lsrs	r3, r3, #7
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00f      	beq.n	8004aba <HAL_I2C_EV_IRQHandler+0x266>
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	0a9b      	lsrs	r3, r3, #10
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <HAL_I2C_EV_IRQHandler+0x266>
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d103      	bne.n	8004aba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fef8 	bl	80058a8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ab8:	e039      	b.n	8004b2e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	089b      	lsrs	r3, r3, #2
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d033      	beq.n	8004b2e <HAL_I2C_EV_IRQHandler+0x2da>
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	0a5b      	lsrs	r3, r3, #9
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d02d      	beq.n	8004b2e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 ff25 	bl	8005922 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ad8:	e029      	b.n	8004b2e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	099b      	lsrs	r3, r3, #6
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00f      	beq.n	8004b06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	0a9b      	lsrs	r3, r3, #10
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	089b      	lsrs	r3, r3, #2
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 ff2f 	bl	8005962 <I2C_SlaveReceive_RXNE>
 8004b04:	e014      	b.n	8004b30 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00e      	beq.n	8004b30 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	0a5b      	lsrs	r3, r3, #9
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 ff5d 	bl	80059de <I2C_SlaveReceive_BTF>
 8004b24:	e004      	b.n	8004b30 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b2e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b08a      	sub	sp, #40	@ 0x28
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b58:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	0a1b      	lsrs	r3, r3, #8
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_I2C_ER_IRQHandler+0x5e>
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d010      	beq.n	8004b94 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b82:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b92:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	0a5b      	lsrs	r3, r3, #9
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00e      	beq.n	8004bbe <HAL_I2C_ER_IRQHandler+0x88>
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	0a1b      	lsrs	r3, r3, #8
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bae:	f043 0302 	orr.w	r3, r3, #2
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004bbc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	0a9b      	lsrs	r3, r3, #10
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d03f      	beq.n	8004c4a <HAL_I2C_ER_IRQHandler+0x114>
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d039      	beq.n	8004c4a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004bd6:	7efb      	ldrb	r3, [r7, #27]
 8004bd8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004be8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004bf0:	7ebb      	ldrb	r3, [r7, #26]
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d112      	bne.n	8004c1c <HAL_I2C_ER_IRQHandler+0xe6>
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10f      	bne.n	8004c1c <HAL_I2C_ER_IRQHandler+0xe6>
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	2b21      	cmp	r3, #33	@ 0x21
 8004c00:	d008      	beq.n	8004c14 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004c02:	7cfb      	ldrb	r3, [r7, #19]
 8004c04:	2b29      	cmp	r3, #41	@ 0x29
 8004c06:	d005      	beq.n	8004c14 <HAL_I2C_ER_IRQHandler+0xde>
 8004c08:	7cfb      	ldrb	r3, [r7, #19]
 8004c0a:	2b28      	cmp	r3, #40	@ 0x28
 8004c0c:	d106      	bne.n	8004c1c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b21      	cmp	r3, #33	@ 0x21
 8004c12:	d103      	bne.n	8004c1c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f001 f87d 	bl	8005d14 <I2C_Slave_AF>
 8004c1a:	e016      	b.n	8004c4a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c24:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	f043 0304 	orr.w	r3, r3, #4
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c2e:	7efb      	ldrb	r3, [r7, #27]
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d002      	beq.n	8004c3a <HAL_I2C_ER_IRQHandler+0x104>
 8004c34:	7efb      	ldrb	r3, [r7, #27]
 8004c36:	2b40      	cmp	r3, #64	@ 0x40
 8004c38:	d107      	bne.n	8004c4a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c48:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	0adb      	lsrs	r3, r3, #11
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00e      	beq.n	8004c74 <HAL_I2C_ER_IRQHandler+0x13e>
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	f043 0308 	orr.w	r3, r3, #8
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004c72:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d008      	beq.n	8004c8c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f001 f8b8 	bl	8005dfc <I2C_ITError>
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	3728      	adds	r7, #40	@ 0x28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr

08004cca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	70fb      	strb	r3, [r7, #3]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d150      	bne.n	8004e18 <I2C_MasterTransmit_TXE+0xc8>
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b21      	cmp	r3, #33	@ 0x21
 8004d7a:	d14d      	bne.n	8004e18 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d01d      	beq.n	8004dbe <I2C_MasterTransmit_TXE+0x6e>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d01a      	beq.n	8004dbe <I2C_MasterTransmit_TXE+0x6e>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d8e:	d016      	beq.n	8004dbe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d9e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2211      	movs	r2, #17
 8004da4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff ff6c 	bl	8004c94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dbc:	e060      	b.n	8004e80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dcc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ddc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	d107      	bne.n	8004e08 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ff81 	bl	8004d08 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e06:	e03b      	b.n	8004e80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff ff3f 	bl	8004c94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e16:	e033      	b.n	8004e80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b21      	cmp	r3, #33	@ 0x21
 8004e1c:	d005      	beq.n	8004e2a <I2C_MasterTransmit_TXE+0xda>
 8004e1e:	7bbb      	ldrb	r3, [r7, #14]
 8004e20:	2b40      	cmp	r3, #64	@ 0x40
 8004e22:	d12d      	bne.n	8004e80 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b22      	cmp	r3, #34	@ 0x22
 8004e28:	d12a      	bne.n	8004e80 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d108      	bne.n	8004e46 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e42:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e44:	e01c      	b.n	8004e80 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b40      	cmp	r3, #64	@ 0x40
 8004e50:	d103      	bne.n	8004e5a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f88e 	bl	8004f74 <I2C_MemoryTransmit_TXE_BTF>
}
 8004e58:	e012      	b.n	8004e80 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	781a      	ldrb	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e7e:	e7ff      	b.n	8004e80 <I2C_MasterTransmit_TXE+0x130>
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e94:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b21      	cmp	r3, #33	@ 0x21
 8004ea0:	d164      	bne.n	8004f6c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d012      	beq.n	8004ed2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004ed0:	e04c      	b.n	8004f6c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d01d      	beq.n	8004f14 <I2C_MasterTransmit_BTF+0x8c>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d01a      	beq.n	8004f14 <I2C_MasterTransmit_BTF+0x8c>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ee4:	d016      	beq.n	8004f14 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ef4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2211      	movs	r2, #17
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff fec1 	bl	8004c94 <HAL_I2C_MasterTxCpltCallback>
}
 8004f12:	e02b      	b.n	8004f6c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f22:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f32:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b40      	cmp	r3, #64	@ 0x40
 8004f4c:	d107      	bne.n	8004f5e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fed6 	bl	8004d08 <HAL_I2C_MemTxCpltCallback>
}
 8004f5c:	e006      	b.n	8004f6c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff fe94 	bl	8004c94 <HAL_I2C_MasterTxCpltCallback>
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d11d      	bne.n	8004fc8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d10b      	bne.n	8004fac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa4:	1c9a      	adds	r2, r3, #2
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004faa:	e077      	b.n	800509c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	121b      	asrs	r3, r3, #8
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004fc6:	e069      	b.n	800509c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d10b      	bne.n	8004fe8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004fe6:	e059      	b.n	800509c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d152      	bne.n	8005096 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	2b22      	cmp	r3, #34	@ 0x22
 8004ff4:	d10d      	bne.n	8005012 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005004:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005010:	e044      	b.n	800509c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d015      	beq.n	8005048 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b21      	cmp	r3, #33	@ 0x21
 8005020:	d112      	bne.n	8005048 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	781a      	ldrb	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005046:	e029      	b.n	800509c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d124      	bne.n	800509c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	2b21      	cmp	r3, #33	@ 0x21
 8005056:	d121      	bne.n	800509c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005066:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005076:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff fe3a 	bl	8004d08 <HAL_I2C_MemTxCpltCallback>
}
 8005094:	e002      	b.n	800509c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fe ff30 	bl	8003efc <I2C_Flush_DR>
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b22      	cmp	r3, #34	@ 0x22
 80050b6:	f040 80b9 	bne.w	800522c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050be:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d921      	bls.n	8005112 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	f040 8096 	bne.w	800522c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800510e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005110:	e08c      	b.n	800522c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	2b02      	cmp	r3, #2
 8005118:	d07f      	beq.n	800521a <I2C_MasterReceive_RXNE+0x176>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d002      	beq.n	8005126 <I2C_MasterReceive_RXNE+0x82>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d179      	bne.n	800521a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f001 fb3c 	bl	80067a4 <I2C_WaitOnSTOPRequestThroughIT>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d14c      	bne.n	80051cc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005140:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005150:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b40      	cmp	r3, #64	@ 0x40
 800518a:	d10a      	bne.n	80051a2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fdbd 	bl	8004d1a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051a0:	e044      	b.n	800522c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d002      	beq.n	80051b6 <I2C_MasterReceive_RXNE+0x112>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d103      	bne.n	80051be <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80051bc:	e002      	b.n	80051c4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2212      	movs	r2, #18
 80051c2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fd6e 	bl	8004ca6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051ca:	e02f      	b.n	800522c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff fd8a 	bl	8004d2c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005218:	e008      	b.n	800522c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005228:	605a      	str	r2, [r3, #4]
}
 800522a:	e7ff      	b.n	800522c <I2C_MasterReceive_RXNE+0x188>
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b04      	cmp	r3, #4
 800524a:	d11b      	bne.n	8005284 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800525a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005282:	e0c4      	b.n	800540e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b03      	cmp	r3, #3
 800528c:	d129      	bne.n	80052e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d00a      	beq.n	80052ba <I2C_MasterReceive_BTF+0x86>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d007      	beq.n	80052ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80052e0:	e095      	b.n	800540e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d17d      	bne.n	80053e8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d002      	beq.n	80052f8 <I2C_MasterReceive_BTF+0xc4>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d108      	bne.n	800530a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e016      	b.n	8005338 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d002      	beq.n	8005316 <I2C_MasterReceive_BTF+0xe2>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d108      	bne.n	8005328 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	e007      	b.n	8005338 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005336:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005392:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b40      	cmp	r3, #64	@ 0x40
 80053a6:	d10a      	bne.n	80053be <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff fcaf 	bl	8004d1a <HAL_I2C_MemRxCpltCallback>
}
 80053bc:	e027      	b.n	800540e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d002      	beq.n	80053d2 <I2C_MasterReceive_BTF+0x19e>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d103      	bne.n	80053da <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80053d8:	e002      	b.n	80053e0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2212      	movs	r2, #18
 80053de:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff fc60 	bl	8004ca6 <HAL_I2C_MasterRxCpltCallback>
}
 80053e6:	e012      	b.n	800540e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b40      	cmp	r3, #64	@ 0x40
 8005428:	d117      	bne.n	800545a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005436:	b2db      	uxtb	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005442:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005444:	e067      	b.n	8005516 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	b2da      	uxtb	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	611a      	str	r2, [r3, #16]
}
 8005458:	e05d      	b.n	8005516 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005462:	d133      	bne.n	80054cc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b21      	cmp	r3, #33	@ 0x21
 800546e:	d109      	bne.n	8005484 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005480:	611a      	str	r2, [r3, #16]
 8005482:	e008      	b.n	8005496 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	b2da      	uxtb	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <I2C_Master_SB+0x92>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d108      	bne.n	80054ba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d032      	beq.n	8005516 <I2C_Master_SB+0x100>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d02d      	beq.n	8005516 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054c8:	605a      	str	r2, [r3, #4]
}
 80054ca:	e024      	b.n	8005516 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10e      	bne.n	80054f2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d8:	b29b      	uxth	r3, r3
 80054da:	11db      	asrs	r3, r3, #7
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0306 	and.w	r3, r3, #6
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f063 030f 	orn	r3, r3, #15
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	611a      	str	r2, [r3, #16]
}
 80054f0:	e011      	b.n	8005516 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d10d      	bne.n	8005516 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fe:	b29b      	uxth	r3, r3
 8005500:	11db      	asrs	r3, r3, #7
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 0306 	and.w	r3, r3, #6
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f063 030e 	orn	r3, r3, #14
 800550e:	b2da      	uxtb	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	611a      	str	r2, [r3, #16]
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552c:	b2da      	uxtb	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <I2C_Master_ADD10+0x26>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d108      	bne.n	8005558 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00c      	beq.n	8005568 <I2C_Master_ADD10+0x48>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005566:	605a      	str	r2, [r3, #4]
  }
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr

08005572 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005572:	b480      	push	{r7}
 8005574:	b091      	sub	sp, #68	@ 0x44
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005580:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005588:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b22      	cmp	r3, #34	@ 0x22
 800559a:	f040 8174 	bne.w	8005886 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10f      	bne.n	80055c6 <I2C_Master_ADDR+0x54>
 80055a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80055aa:	2b40      	cmp	r3, #64	@ 0x40
 80055ac:	d10b      	bne.n	80055c6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ae:	2300      	movs	r3, #0
 80055b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	e16b      	b.n	800589e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d11d      	bne.n	800560a <I2C_Master_ADDR+0x98>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80055d6:	d118      	bne.n	800560a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d8:	2300      	movs	r3, #0
 80055da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055fc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	651a      	str	r2, [r3, #80]	@ 0x50
 8005608:	e149      	b.n	800589e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d113      	bne.n	800563c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005614:	2300      	movs	r3, #0
 8005616:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e120      	b.n	800587e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b01      	cmp	r3, #1
 8005644:	f040 808a 	bne.w	800575c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800564e:	d137      	bne.n	80056c0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800565e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800566a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800566e:	d113      	bne.n	8005698 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800567e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005680:	2300      	movs	r3, #0
 8005682:	627b      	str	r3, [r7, #36]	@ 0x24
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	e0f2      	b.n	800587e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005698:	2300      	movs	r3, #0
 800569a:	623b      	str	r3, [r7, #32]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	623b      	str	r3, [r7, #32]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	623b      	str	r3, [r7, #32]
 80056ac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e0de      	b.n	800587e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d02e      	beq.n	8005724 <I2C_Master_ADDR+0x1b2>
 80056c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d02b      	beq.n	8005724 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80056cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ce:	2b12      	cmp	r3, #18
 80056d0:	d102      	bne.n	80056d8 <I2C_Master_ADDR+0x166>
 80056d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d125      	bne.n	8005724 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80056d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d00e      	beq.n	80056fc <I2C_Master_ADDR+0x18a>
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d00b      	beq.n	80056fc <I2C_Master_ADDR+0x18a>
 80056e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d008      	beq.n	80056fc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e007      	b.n	800570c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800570a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570c:	2300      	movs	r3, #0
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	e0ac      	b.n	800587e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005732:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005734:	2300      	movs	r3, #0
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	61bb      	str	r3, [r7, #24]
 8005748:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	e090      	b.n	800587e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d158      	bne.n	8005818 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005768:	2b04      	cmp	r3, #4
 800576a:	d021      	beq.n	80057b0 <I2C_Master_ADDR+0x23e>
 800576c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576e:	2b02      	cmp	r3, #2
 8005770:	d01e      	beq.n	80057b0 <I2C_Master_ADDR+0x23e>
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	2b10      	cmp	r3, #16
 8005776:	d01b      	beq.n	80057b0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005786:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	e012      	b.n	80057d6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057e4:	d14b      	bne.n	800587e <I2C_Master_ADDR+0x30c>
 80057e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057ec:	d00b      	beq.n	8005806 <I2C_Master_ADDR+0x294>
 80057ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d008      	beq.n	8005806 <I2C_Master_ADDR+0x294>
 80057f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d005      	beq.n	8005806 <I2C_Master_ADDR+0x294>
 80057fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fc:	2b10      	cmp	r3, #16
 80057fe:	d002      	beq.n	8005806 <I2C_Master_ADDR+0x294>
 8005800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005802:	2b20      	cmp	r3, #32
 8005804:	d13b      	bne.n	800587e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005814:	605a      	str	r2, [r3, #4]
 8005816:	e032      	b.n	800587e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005826:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005836:	d117      	bne.n	8005868 <I2C_Master_ADDR+0x2f6>
 8005838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800583e:	d00b      	beq.n	8005858 <I2C_Master_ADDR+0x2e6>
 8005840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005842:	2b01      	cmp	r3, #1
 8005844:	d008      	beq.n	8005858 <I2C_Master_ADDR+0x2e6>
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	2b08      	cmp	r3, #8
 800584a:	d005      	beq.n	8005858 <I2C_Master_ADDR+0x2e6>
 800584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584e:	2b10      	cmp	r3, #16
 8005850:	d002      	beq.n	8005858 <I2C_Master_ADDR+0x2e6>
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	2b20      	cmp	r3, #32
 8005856:	d107      	bne.n	8005868 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005866:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005884:	e00b      	b.n	800589e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005886:	2300      	movs	r3, #0
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	68bb      	ldr	r3, [r7, #8]
}
 800589c:	e7ff      	b.n	800589e <I2C_Master_ADDR+0x32c>
 800589e:	bf00      	nop
 80058a0:	3744      	adds	r7, #68	@ 0x44
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr

080058a8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d02b      	beq.n	800591a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	781a      	ldrb	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d114      	bne.n	800591a <I2C_SlaveTransmit_TXE+0x72>
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b29      	cmp	r3, #41	@ 0x29
 80058f4:	d111      	bne.n	800591a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005904:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2221      	movs	r2, #33	@ 0x21
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2228      	movs	r2, #40	@ 0x28
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff f9cf 	bl	8004cb8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d011      	beq.n	8005958 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005970:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d02c      	beq.n	80059d6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d114      	bne.n	80059d6 <I2C_SlaveReceive_RXNE+0x74>
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b0:	d111      	bne.n	80059d6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2222      	movs	r2, #34	@ 0x22
 80059c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2228      	movs	r2, #40	@ 0x28
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff f97a 	bl	8004cca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d012      	beq.n	8005a16 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr

08005a20 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a3a:	2b28      	cmp	r3, #40	@ 0x28
 8005a3c:	d127      	bne.n	8005a8e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a4c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	089b      	lsrs	r3, r3, #2
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	09db      	lsrs	r3, r3, #7
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	81bb      	strh	r3, [r7, #12]
 8005a70:	e002      	b.n	8005a78 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005a80:	89ba      	ldrh	r2, [r7, #12]
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff f928 	bl	8004cdc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a8c:	e00e      	b.n	8005aac <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60bb      	str	r3, [r7, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	60bb      	str	r3, [r7, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ad2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60bb      	str	r3, [r7, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	60bb      	str	r3, [r7, #8]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b00:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b10:	d172      	bne.n	8005bf8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	2b22      	cmp	r3, #34	@ 0x22
 8005b16:	d002      	beq.n	8005b1e <I2C_Slave_STOPF+0x6a>
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b1c:	d135      	bne.n	8005b8a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3a:	f043 0204 	orr.w	r2, r3, #4
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fd fe9a 	bl	8003890 <HAL_DMA_GetState>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d049      	beq.n	8005bf6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b66:	4a69      	ldr	r2, [pc, #420]	@ (8005d0c <I2C_Slave_STOPF+0x258>)
 8005b68:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fd fe16 	bl	80037a0 <HAL_DMA_Abort_IT>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d03d      	beq.n	8005bf6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b84:	4610      	mov	r0, r2
 8005b86:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b88:	e035      	b.n	8005bf6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba6:	f043 0204 	orr.w	r2, r3, #4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bbc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fd fe64 	bl	8003890 <HAL_DMA_GetState>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d014      	beq.n	8005bf8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bd2:	4a4e      	ldr	r2, [pc, #312]	@ (8005d0c <I2C_Slave_STOPF+0x258>)
 8005bd4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fd fde0 	bl	80037a0 <HAL_DMA_Abort_IT>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3
 8005bf4:	e000      	b.n	8005bf8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bf6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d03e      	beq.n	8005c80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d112      	bne.n	8005c36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c40:	2b40      	cmp	r3, #64	@ 0x40
 8005c42:	d112      	bne.n	8005c6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c78:	f043 0204 	orr.w	r2, r3, #4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f8b7 	bl	8005dfc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005c8e:	e039      	b.n	8005d04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c94:	d109      	bne.n	8005caa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2228      	movs	r2, #40	@ 0x28
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff f810 	bl	8004cca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b28      	cmp	r3, #40	@ 0x28
 8005cb4:	d111      	bne.n	8005cda <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a15      	ldr	r2, [pc, #84]	@ (8005d10 <I2C_Slave_STOPF+0x25c>)
 8005cba:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff f80f 	bl	8004cf6 <HAL_I2C_ListenCpltCallback>
}
 8005cd8:	e014      	b.n	8005d04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cde:	2b22      	cmp	r3, #34	@ 0x22
 8005ce0:	d002      	beq.n	8005ce8 <I2C_Slave_STOPF+0x234>
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	2b22      	cmp	r3, #34	@ 0x22
 8005ce6:	d10d      	bne.n	8005d04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fe ffe3 	bl	8004cca <HAL_I2C_SlaveRxCpltCallback>
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	08006301 	.word	0x08006301
 8005d10:	ffff0000 	.word	0xffff0000

08005d14 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d22:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d002      	beq.n	8005d36 <I2C_Slave_AF+0x22>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d129      	bne.n	8005d8a <I2C_Slave_AF+0x76>
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b28      	cmp	r3, #40	@ 0x28
 8005d3a:	d126      	bne.n	8005d8a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8005df8 <I2C_Slave_AF+0xe4>)
 8005d40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d50:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d5a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d6a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fe ffb7 	bl	8004cf6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005d88:	e031      	b.n	8005dee <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2b21      	cmp	r3, #33	@ 0x21
 8005d8e:	d129      	bne.n	8005de4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a19      	ldr	r2, [pc, #100]	@ (8005df8 <I2C_Slave_AF+0xe4>)
 8005d94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2221      	movs	r2, #33	@ 0x21
 8005d9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005dba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005dc4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dd4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fe f890 	bl	8003efc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fe ff6b 	bl	8004cb8 <HAL_I2C_SlaveTxCpltCallback>
}
 8005de2:	e004      	b.n	8005dee <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005dec:	615a      	str	r2, [r3, #20]
}
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	ffff0000 	.word	0xffff0000

08005dfc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e14:	7bbb      	ldrb	r3, [r7, #14]
 8005e16:	2b10      	cmp	r3, #16
 8005e18:	d002      	beq.n	8005e20 <I2C_ITError+0x24>
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	2b40      	cmp	r3, #64	@ 0x40
 8005e1e:	d10a      	bne.n	8005e36 <I2C_ITError+0x3a>
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	2b22      	cmp	r3, #34	@ 0x22
 8005e24:	d107      	bne.n	8005e36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e3c:	2b28      	cmp	r3, #40	@ 0x28
 8005e3e:	d107      	bne.n	8005e50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2228      	movs	r2, #40	@ 0x28
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005e4e:	e015      	b.n	8005e7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e5e:	d00a      	beq.n	8005e76 <I2C_ITError+0x7a>
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	2b60      	cmp	r3, #96	@ 0x60
 8005e64:	d007      	beq.n	8005e76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e8a:	d162      	bne.n	8005f52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ea0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d020      	beq.n	8005eec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eae:	4a6a      	ldr	r2, [pc, #424]	@ (8006058 <I2C_ITError+0x25c>)
 8005eb0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fd fc72 	bl	80037a0 <HAL_DMA_Abort_IT>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8089 	beq.w	8005fd6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0201 	bic.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4798      	blx	r3
 8005eea:	e074      	b.n	8005fd6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	4a59      	ldr	r2, [pc, #356]	@ (8006058 <I2C_ITError+0x25c>)
 8005ef2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fd fc51 	bl	80037a0 <HAL_DMA_Abort_IT>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d068      	beq.n	8005fd6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0e:	2b40      	cmp	r3, #64	@ 0x40
 8005f10:	d10b      	bne.n	8005f2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4798      	blx	r3
 8005f50:	e041      	b.n	8005fd6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b60      	cmp	r3, #96	@ 0x60
 8005f5c:	d125      	bne.n	8005faa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f76:	2b40      	cmp	r3, #64	@ 0x40
 8005f78:	d10b      	bne.n	8005f92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0201 	bic.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fe fecb 	bl	8004d3e <HAL_I2C_AbortCpltCallback>
 8005fa8:	e015      	b.n	8005fd6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b40      	cmp	r3, #64	@ 0x40
 8005fb6:	d10b      	bne.n	8005fd0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7fe feab 	bl	8004d2c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10e      	bne.n	8006004 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d109      	bne.n	8006004 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006012:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800601a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b04      	cmp	r3, #4
 8006026:	d113      	bne.n	8006050 <I2C_ITError+0x254>
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	2b28      	cmp	r3, #40	@ 0x28
 800602c:	d110      	bne.n	8006050 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a0a      	ldr	r2, [pc, #40]	@ (800605c <I2C_ITError+0x260>)
 8006032:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fe fe53 	bl	8004cf6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	08006301 	.word	0x08006301
 800605c:	ffff0000 	.word	0xffff0000

08006060 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af02      	add	r7, sp, #8
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	607a      	str	r2, [r7, #4]
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	460b      	mov	r3, r1
 800606e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2b08      	cmp	r3, #8
 800607a:	d006      	beq.n	800608a <I2C_MasterRequestWrite+0x2a>
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d003      	beq.n	800608a <I2C_MasterRequestWrite+0x2a>
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006088:	d108      	bne.n	800609c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e00b      	b.n	80060b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a0:	2b12      	cmp	r3, #18
 80060a2:	d107      	bne.n	80060b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f9c5 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00d      	beq.n	80060e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060da:	d103      	bne.n	80060e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e035      	b.n	8006154 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060f0:	d108      	bne.n	8006104 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060f2:	897b      	ldrh	r3, [r7, #10]
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	461a      	mov	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006100:	611a      	str	r2, [r3, #16]
 8006102:	e01b      	b.n	800613c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006104:	897b      	ldrh	r3, [r7, #10]
 8006106:	11db      	asrs	r3, r3, #7
 8006108:	b2db      	uxtb	r3, r3
 800610a:	f003 0306 	and.w	r3, r3, #6
 800610e:	b2db      	uxtb	r3, r3
 8006110:	f063 030f 	orn	r3, r3, #15
 8006114:	b2da      	uxtb	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	490e      	ldr	r1, [pc, #56]	@ (800615c <I2C_MasterRequestWrite+0xfc>)
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 fa0e 	bl	8006544 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e010      	b.n	8006154 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006132:	897b      	ldrh	r3, [r7, #10]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	4907      	ldr	r1, [pc, #28]	@ (8006160 <I2C_MasterRequestWrite+0x100>)
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f9fe 	bl	8006544 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	00010008 	.word	0x00010008
 8006160:	00010002 	.word	0x00010002

08006164 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	460b      	mov	r3, r1
 8006172:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006188:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b08      	cmp	r3, #8
 800618e:	d006      	beq.n	800619e <I2C_MasterRequestRead+0x3a>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d003      	beq.n	800619e <I2C_MasterRequestRead+0x3a>
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800619c:	d108      	bne.n	80061b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	e00b      	b.n	80061c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b4:	2b11      	cmp	r3, #17
 80061b6:	d107      	bne.n	80061c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f93b 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00d      	beq.n	80061fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ee:	d103      	bne.n	80061f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e079      	b.n	80062f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006204:	d108      	bne.n	8006218 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006206:	897b      	ldrh	r3, [r7, #10]
 8006208:	b2db      	uxtb	r3, r3
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	b2da      	uxtb	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	611a      	str	r2, [r3, #16]
 8006216:	e05f      	b.n	80062d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006218:	897b      	ldrh	r3, [r7, #10]
 800621a:	11db      	asrs	r3, r3, #7
 800621c:	b2db      	uxtb	r3, r3
 800621e:	f003 0306 	and.w	r3, r3, #6
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f063 030f 	orn	r3, r3, #15
 8006228:	b2da      	uxtb	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4930      	ldr	r1, [pc, #192]	@ (80062f8 <I2C_MasterRequestRead+0x194>)
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f984 	bl	8006544 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e054      	b.n	80062f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006246:	897b      	ldrh	r3, [r7, #10]
 8006248:	b2da      	uxtb	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	4929      	ldr	r1, [pc, #164]	@ (80062fc <I2C_MasterRequestRead+0x198>)
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f974 	bl	8006544 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e044      	b.n	80062f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006266:	2300      	movs	r3, #0
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	613b      	str	r3, [r7, #16]
 800627a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800628a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f8d9 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00d      	beq.n	80062c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062b2:	d103      	bne.n	80062bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062ba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e017      	b.n	80062f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80062c0:	897b      	ldrh	r3, [r7, #10]
 80062c2:	11db      	asrs	r3, r3, #7
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 0306 	and.w	r3, r3, #6
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	f063 030e 	orn	r3, r3, #14
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	4907      	ldr	r1, [pc, #28]	@ (80062fc <I2C_MasterRequestRead+0x198>)
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f930 	bl	8006544 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	00010008 	.word	0x00010008
 80062fc:	00010002 	.word	0x00010002

08006300 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006318:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800631a:	4b4b      	ldr	r3, [pc, #300]	@ (8006448 <I2C_DMAAbort+0x148>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	08db      	lsrs	r3, r3, #3
 8006320:	4a4a      	ldr	r2, [pc, #296]	@ (800644c <I2C_DMAAbort+0x14c>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	0a1a      	lsrs	r2, r3, #8
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	00da      	lsls	r2, r3, #3
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	f043 0220 	orr.w	r2, r3, #32
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006346:	e00a      	b.n	800635e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3b01      	subs	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800635c:	d0ea      	beq.n	8006334 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800636a:	2200      	movs	r2, #0
 800636c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637a:	2200      	movs	r2, #0
 800637c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800638c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2200      	movs	r2, #0
 8006392:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a0:	2200      	movs	r2, #0
 80063a2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	2200      	movs	r2, #0
 80063b2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b60      	cmp	r3, #96	@ 0x60
 80063ce:	d10e      	bne.n	80063ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063e6:	6978      	ldr	r0, [r7, #20]
 80063e8:	f7fe fca9 	bl	8004d3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063ec:	e027      	b.n	800643e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063ee:	7cfb      	ldrb	r3, [r7, #19]
 80063f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80063f4:	2b28      	cmp	r3, #40	@ 0x28
 80063f6:	d117      	bne.n	8006428 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006416:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2200      	movs	r2, #0
 800641c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2228      	movs	r2, #40	@ 0x28
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006426:	e007      	b.n	8006438 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006438:	6978      	ldr	r0, [r7, #20]
 800643a:	f7fe fc77 	bl	8004d2c <HAL_I2C_ErrorCallback>
}
 800643e:	bf00      	nop
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000024 	.word	0x20000024
 800644c:	14f8b589 	.word	0x14f8b589

08006450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006460:	e048      	b.n	80064f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006468:	d044      	beq.n	80064f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646a:	f7fd f823 	bl	80034b4 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d302      	bcc.n	8006480 <I2C_WaitOnFlagUntilTimeout+0x30>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d139      	bne.n	80064f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	0c1b      	lsrs	r3, r3, #16
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b01      	cmp	r3, #1
 8006488:	d10d      	bne.n	80064a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	43da      	mvns	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	e00c      	b.n	80064c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	43da      	mvns	r2, r3
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4013      	ands	r3, r2
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bf0c      	ite	eq
 80064b8:	2301      	moveq	r3, #1
 80064ba:	2300      	movne	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d116      	bne.n	80064f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e0:	f043 0220 	orr.w	r2, r3, #32
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e023      	b.n	800653c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	0c1b      	lsrs	r3, r3, #16
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d10d      	bne.n	800651a <I2C_WaitOnFlagUntilTimeout+0xca>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	43da      	mvns	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4013      	ands	r3, r2
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	bf0c      	ite	eq
 8006510:	2301      	moveq	r3, #1
 8006512:	2300      	movne	r3, #0
 8006514:	b2db      	uxtb	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	e00c      	b.n	8006534 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	43da      	mvns	r2, r3
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4013      	ands	r3, r2
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	bf0c      	ite	eq
 800652c:	2301      	moveq	r3, #1
 800652e:	2300      	movne	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	429a      	cmp	r2, r3
 8006538:	d093      	beq.n	8006462 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006552:	e071      	b.n	8006638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800655e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006562:	d123      	bne.n	80065ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006572:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800657c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006598:	f043 0204 	orr.w	r2, r3, #4
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e067      	b.n	800667c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065b2:	d041      	beq.n	8006638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b4:	f7fc ff7e 	bl	80034b4 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d136      	bne.n	8006638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	0c1b      	lsrs	r3, r3, #16
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d10c      	bne.n	80065ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	43da      	mvns	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4013      	ands	r3, r2
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bf14      	ite	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	2300      	moveq	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	e00b      	b.n	8006606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	43da      	mvns	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	4013      	ands	r3, r2
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d016      	beq.n	8006638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e021      	b.n	800667c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	0c1b      	lsrs	r3, r3, #16
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10c      	bne.n	800665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	43da      	mvns	r2, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	4013      	ands	r3, r2
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	e00b      	b.n	8006674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	43da      	mvns	r2, r3
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	4013      	ands	r3, r2
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	bf14      	ite	ne
 800666e:	2301      	movne	r3, #1
 8006670:	2300      	moveq	r3, #0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	f47f af6d 	bne.w	8006554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006690:	e034      	b.n	80066fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f915 	bl	80068c2 <I2C_IsAcknowledgeFailed>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e034      	b.n	800670c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066a8:	d028      	beq.n	80066fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066aa:	f7fc ff03 	bl	80034b4 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d302      	bcc.n	80066c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d11d      	bne.n	80066fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ca:	2b80      	cmp	r3, #128	@ 0x80
 80066cc:	d016      	beq.n	80066fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e8:	f043 0220 	orr.w	r2, r3, #32
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e007      	b.n	800670c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006706:	2b80      	cmp	r3, #128	@ 0x80
 8006708:	d1c3      	bne.n	8006692 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006720:	e034      	b.n	800678c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f8cd 	bl	80068c2 <I2C_IsAcknowledgeFailed>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e034      	b.n	800679c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006738:	d028      	beq.n	800678c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673a:	f7fc febb 	bl	80034b4 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	d302      	bcc.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d11d      	bne.n	800678c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b04      	cmp	r3, #4
 800675c:	d016      	beq.n	800678c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e007      	b.n	800679c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b04      	cmp	r3, #4
 8006798:	d1c3      	bne.n	8006722 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80067b0:	4b13      	ldr	r3, [pc, #76]	@ (8006800 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	08db      	lsrs	r3, r3, #3
 80067b6:	4a13      	ldr	r2, [pc, #76]	@ (8006804 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	0a1a      	lsrs	r2, r3, #8
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d107      	bne.n	80067e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e008      	b.n	80067f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f0:	d0e9      	beq.n	80067c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bc80      	pop	{r7}
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	20000024 	.word	0x20000024
 8006804:	14f8b589 	.word	0x14f8b589

08006808 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006814:	e049      	b.n	80068aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b10      	cmp	r3, #16
 8006822:	d119      	bne.n	8006858 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0210 	mvn.w	r2, #16
 800682c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e030      	b.n	80068ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006858:	f7fc fe2c 	bl	80034b4 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d11d      	bne.n	80068aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006878:	2b40      	cmp	r3, #64	@ 0x40
 800687a:	d016      	beq.n	80068aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006896:	f043 0220 	orr.w	r2, r3, #32
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e007      	b.n	80068ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b4:	2b40      	cmp	r3, #64	@ 0x40
 80068b6:	d1ae      	bne.n	8006816 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068d8:	d11b      	bne.n	8006912 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80068e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fe:	f043 0204 	orr.w	r2, r3, #4
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e000      	b.n	8006914 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr

0800691e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800692e:	d103      	bne.n	8006938 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006936:	e007      	b.n	8006948 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006940:	d102      	bne.n	8006948 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2208      	movs	r2, #8
 8006946:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr
	...

08006954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e272      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8087 	beq.w	8006a82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006974:	4b92      	ldr	r3, [pc, #584]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f003 030c 	and.w	r3, r3, #12
 800697c:	2b04      	cmp	r3, #4
 800697e:	d00c      	beq.n	800699a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006980:	4b8f      	ldr	r3, [pc, #572]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 030c 	and.w	r3, r3, #12
 8006988:	2b08      	cmp	r3, #8
 800698a:	d112      	bne.n	80069b2 <HAL_RCC_OscConfig+0x5e>
 800698c:	4b8c      	ldr	r3, [pc, #560]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006998:	d10b      	bne.n	80069b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800699a:	4b89      	ldr	r3, [pc, #548]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d06c      	beq.n	8006a80 <HAL_RCC_OscConfig+0x12c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d168      	bne.n	8006a80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e24c      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ba:	d106      	bne.n	80069ca <HAL_RCC_OscConfig+0x76>
 80069bc:	4b80      	ldr	r3, [pc, #512]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a7f      	ldr	r2, [pc, #508]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 80069c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	e02e      	b.n	8006a28 <HAL_RCC_OscConfig+0xd4>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10c      	bne.n	80069ec <HAL_RCC_OscConfig+0x98>
 80069d2:	4b7b      	ldr	r3, [pc, #492]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a7a      	ldr	r2, [pc, #488]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 80069d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	4b78      	ldr	r3, [pc, #480]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a77      	ldr	r2, [pc, #476]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 80069e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	e01d      	b.n	8006a28 <HAL_RCC_OscConfig+0xd4>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069f4:	d10c      	bne.n	8006a10 <HAL_RCC_OscConfig+0xbc>
 80069f6:	4b72      	ldr	r3, [pc, #456]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a71      	ldr	r2, [pc, #452]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 80069fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	4b6f      	ldr	r3, [pc, #444]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a6e      	ldr	r2, [pc, #440]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	e00b      	b.n	8006a28 <HAL_RCC_OscConfig+0xd4>
 8006a10:	4b6b      	ldr	r3, [pc, #428]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a6a      	ldr	r2, [pc, #424]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	4b68      	ldr	r3, [pc, #416]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a67      	ldr	r2, [pc, #412]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d013      	beq.n	8006a58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a30:	f7fc fd40 	bl	80034b4 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a38:	f7fc fd3c 	bl	80034b4 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b64      	cmp	r3, #100	@ 0x64
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e200      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0f0      	beq.n	8006a38 <HAL_RCC_OscConfig+0xe4>
 8006a56:	e014      	b.n	8006a82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a58:	f7fc fd2c 	bl	80034b4 <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a60:	f7fc fd28 	bl	80034b4 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b64      	cmp	r3, #100	@ 0x64
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e1ec      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a72:	4b53      	ldr	r3, [pc, #332]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1f0      	bne.n	8006a60 <HAL_RCC_OscConfig+0x10c>
 8006a7e:	e000      	b.n	8006a82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d063      	beq.n	8006b56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a8e:	4b4c      	ldr	r3, [pc, #304]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f003 030c 	and.w	r3, r3, #12
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a9a:	4b49      	ldr	r3, [pc, #292]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f003 030c 	and.w	r3, r3, #12
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d11c      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x18c>
 8006aa6:	4b46      	ldr	r3, [pc, #280]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d116      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ab2:	4b43      	ldr	r3, [pc, #268]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <HAL_RCC_OscConfig+0x176>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d001      	beq.n	8006aca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e1c0      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aca:	4b3d      	ldr	r3, [pc, #244]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	4939      	ldr	r1, [pc, #228]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ade:	e03a      	b.n	8006b56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d020      	beq.n	8006b2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ae8:	4b36      	ldr	r3, [pc, #216]	@ (8006bc4 <HAL_RCC_OscConfig+0x270>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aee:	f7fc fce1 	bl	80034b4 <HAL_GetTick>
 8006af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006af6:	f7fc fcdd 	bl	80034b4 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e1a1      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b08:	4b2d      	ldr	r3, [pc, #180]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0f0      	beq.n	8006af6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b14:	4b2a      	ldr	r3, [pc, #168]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	4927      	ldr	r1, [pc, #156]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	600b      	str	r3, [r1, #0]
 8006b28:	e015      	b.n	8006b56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b2a:	4b26      	ldr	r3, [pc, #152]	@ (8006bc4 <HAL_RCC_OscConfig+0x270>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b30:	f7fc fcc0 	bl	80034b4 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b38:	f7fc fcbc 	bl	80034b4 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e180      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f0      	bne.n	8006b38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d03a      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d019      	beq.n	8006b9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b6a:	4b17      	ldr	r3, [pc, #92]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b70:	f7fc fca0 	bl	80034b4 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b78:	f7fc fc9c 	bl	80034b4 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e160      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc0 <HAL_RCC_OscConfig+0x26c>)
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006b96:	2001      	movs	r0, #1
 8006b98:	f000 face 	bl	8007138 <RCC_Delay>
 8006b9c:	e01c      	b.n	8006bd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc8 <HAL_RCC_OscConfig+0x274>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ba4:	f7fc fc86 	bl	80034b4 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006baa:	e00f      	b.n	8006bcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bac:	f7fc fc82 	bl	80034b4 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d908      	bls.n	8006bcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e146      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
 8006bbe:	bf00      	nop
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	42420000 	.word	0x42420000
 8006bc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bcc:	4b92      	ldr	r3, [pc, #584]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e9      	bne.n	8006bac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 80a6 	beq.w	8006d32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006be6:	2300      	movs	r3, #0
 8006be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bea:	4b8b      	ldr	r3, [pc, #556]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10d      	bne.n	8006c12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bf6:	4b88      	ldr	r3, [pc, #544]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	4a87      	ldr	r2, [pc, #540]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c00:	61d3      	str	r3, [r2, #28]
 8006c02:	4b85      	ldr	r3, [pc, #532]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c0a:	60bb      	str	r3, [r7, #8]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c12:	4b82      	ldr	r3, [pc, #520]	@ (8006e1c <HAL_RCC_OscConfig+0x4c8>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d118      	bne.n	8006c50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8006e1c <HAL_RCC_OscConfig+0x4c8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a7e      	ldr	r2, [pc, #504]	@ (8006e1c <HAL_RCC_OscConfig+0x4c8>)
 8006c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c2a:	f7fc fc43 	bl	80034b4 <HAL_GetTick>
 8006c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c30:	e008      	b.n	8006c44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c32:	f7fc fc3f 	bl	80034b4 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b64      	cmp	r3, #100	@ 0x64
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e103      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c44:	4b75      	ldr	r3, [pc, #468]	@ (8006e1c <HAL_RCC_OscConfig+0x4c8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0f0      	beq.n	8006c32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d106      	bne.n	8006c66 <HAL_RCC_OscConfig+0x312>
 8006c58:	4b6f      	ldr	r3, [pc, #444]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	4a6e      	ldr	r2, [pc, #440]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006c5e:	f043 0301 	orr.w	r3, r3, #1
 8006c62:	6213      	str	r3, [r2, #32]
 8006c64:	e02d      	b.n	8006cc2 <HAL_RCC_OscConfig+0x36e>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10c      	bne.n	8006c88 <HAL_RCC_OscConfig+0x334>
 8006c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	4a69      	ldr	r2, [pc, #420]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006c74:	f023 0301 	bic.w	r3, r3, #1
 8006c78:	6213      	str	r3, [r2, #32]
 8006c7a:	4b67      	ldr	r3, [pc, #412]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	4a66      	ldr	r2, [pc, #408]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006c80:	f023 0304 	bic.w	r3, r3, #4
 8006c84:	6213      	str	r3, [r2, #32]
 8006c86:	e01c      	b.n	8006cc2 <HAL_RCC_OscConfig+0x36e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b05      	cmp	r3, #5
 8006c8e:	d10c      	bne.n	8006caa <HAL_RCC_OscConfig+0x356>
 8006c90:	4b61      	ldr	r3, [pc, #388]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	4a60      	ldr	r2, [pc, #384]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006c96:	f043 0304 	orr.w	r3, r3, #4
 8006c9a:	6213      	str	r3, [r2, #32]
 8006c9c:	4b5e      	ldr	r3, [pc, #376]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	6213      	str	r3, [r2, #32]
 8006ca8:	e00b      	b.n	8006cc2 <HAL_RCC_OscConfig+0x36e>
 8006caa:	4b5b      	ldr	r3, [pc, #364]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	4a5a      	ldr	r2, [pc, #360]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	6213      	str	r3, [r2, #32]
 8006cb6:	4b58      	ldr	r3, [pc, #352]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	4a57      	ldr	r2, [pc, #348]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006cbc:	f023 0304 	bic.w	r3, r3, #4
 8006cc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d015      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cca:	f7fc fbf3 	bl	80034b4 <HAL_GetTick>
 8006cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd0:	e00a      	b.n	8006ce8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd2:	f7fc fbef 	bl	80034b4 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e0b1      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0ee      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x37e>
 8006cf4:	e014      	b.n	8006d20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cf6:	f7fc fbdd 	bl	80034b4 <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cfc:	e00a      	b.n	8006d14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cfe:	f7fc fbd9 	bl	80034b4 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d901      	bls.n	8006d14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e09b      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d14:	4b40      	ldr	r3, [pc, #256]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1ee      	bne.n	8006cfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d105      	bne.n	8006d32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d26:	4b3c      	ldr	r3, [pc, #240]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	4a3b      	ldr	r2, [pc, #236]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006d2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 8087 	beq.w	8006e4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d3c:	4b36      	ldr	r3, [pc, #216]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f003 030c 	and.w	r3, r3, #12
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d061      	beq.n	8006e0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d146      	bne.n	8006dde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d50:	4b33      	ldr	r3, [pc, #204]	@ (8006e20 <HAL_RCC_OscConfig+0x4cc>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d56:	f7fc fbad 	bl	80034b4 <HAL_GetTick>
 8006d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d5c:	e008      	b.n	8006d70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d5e:	f7fc fba9 	bl	80034b4 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e06d      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d70:	4b29      	ldr	r3, [pc, #164]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1f0      	bne.n	8006d5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d84:	d108      	bne.n	8006d98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d86:	4b24      	ldr	r3, [pc, #144]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	4921      	ldr	r1, [pc, #132]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d98:	4b1f      	ldr	r3, [pc, #124]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a19      	ldr	r1, [r3, #32]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da8:	430b      	orrs	r3, r1
 8006daa:	491b      	ldr	r1, [pc, #108]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006db0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e20 <HAL_RCC_OscConfig+0x4cc>)
 8006db2:	2201      	movs	r2, #1
 8006db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db6:	f7fc fb7d 	bl	80034b4 <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dbe:	f7fc fb79 	bl	80034b4 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e03d      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dd0:	4b11      	ldr	r3, [pc, #68]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0f0      	beq.n	8006dbe <HAL_RCC_OscConfig+0x46a>
 8006ddc:	e035      	b.n	8006e4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dde:	4b10      	ldr	r3, [pc, #64]	@ (8006e20 <HAL_RCC_OscConfig+0x4cc>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de4:	f7fc fb66 	bl	80034b4 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dec:	f7fc fb62 	bl	80034b4 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e026      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dfe:	4b06      	ldr	r3, [pc, #24]	@ (8006e18 <HAL_RCC_OscConfig+0x4c4>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f0      	bne.n	8006dec <HAL_RCC_OscConfig+0x498>
 8006e0a:	e01e      	b.n	8006e4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d107      	bne.n	8006e24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e019      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	40007000 	.word	0x40007000
 8006e20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e24:	4b0b      	ldr	r3, [pc, #44]	@ (8006e54 <HAL_RCC_OscConfig+0x500>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d106      	bne.n	8006e46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d001      	beq.n	8006e4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e000      	b.n	8006e4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	40021000 	.word	0x40021000

08006e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e0d0      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d910      	bls.n	8006e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e7a:	4b67      	ldr	r3, [pc, #412]	@ (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f023 0207 	bic.w	r2, r3, #7
 8006e82:	4965      	ldr	r1, [pc, #404]	@ (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8a:	4b63      	ldr	r3, [pc, #396]	@ (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d001      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0b8      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d020      	beq.n	8006eea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006eb4:	4b59      	ldr	r3, [pc, #356]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	4a58      	ldr	r2, [pc, #352]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006eba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ebe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ecc:	4b53      	ldr	r3, [pc, #332]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4a52      	ldr	r2, [pc, #328]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006ed2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006ed6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ed8:	4b50      	ldr	r3, [pc, #320]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	494d      	ldr	r1, [pc, #308]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d040      	beq.n	8006f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d107      	bne.n	8006f0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efe:	4b47      	ldr	r3, [pc, #284]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d115      	bne.n	8006f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e07f      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d107      	bne.n	8006f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f16:	4b41      	ldr	r3, [pc, #260]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d109      	bne.n	8006f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e073      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f26:	4b3d      	ldr	r3, [pc, #244]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e06b      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f36:	4b39      	ldr	r3, [pc, #228]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f023 0203 	bic.w	r2, r3, #3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	4936      	ldr	r1, [pc, #216]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f48:	f7fc fab4 	bl	80034b4 <HAL_GetTick>
 8006f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f4e:	e00a      	b.n	8006f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f50:	f7fc fab0 	bl	80034b4 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e053      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f66:	4b2d      	ldr	r3, [pc, #180]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f003 020c 	and.w	r2, r3, #12
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d1eb      	bne.n	8006f50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f78:	4b27      	ldr	r3, [pc, #156]	@ (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d210      	bcs.n	8006fa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f86:	4b24      	ldr	r3, [pc, #144]	@ (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f023 0207 	bic.w	r2, r3, #7
 8006f8e:	4922      	ldr	r1, [pc, #136]	@ (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f96:	4b20      	ldr	r3, [pc, #128]	@ (8007018 <HAL_RCC_ClockConfig+0x1c0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e032      	b.n	800700e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb4:	4b19      	ldr	r3, [pc, #100]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4916      	ldr	r1, [pc, #88]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d009      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fd2:	4b12      	ldr	r3, [pc, #72]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	490e      	ldr	r1, [pc, #56]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fe6:	f000 f821 	bl	800702c <HAL_RCC_GetSysClockFreq>
 8006fea:	4602      	mov	r2, r0
 8006fec:	4b0b      	ldr	r3, [pc, #44]	@ (800701c <HAL_RCC_ClockConfig+0x1c4>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	490a      	ldr	r1, [pc, #40]	@ (8007020 <HAL_RCC_ClockConfig+0x1c8>)
 8006ff8:	5ccb      	ldrb	r3, [r1, r3]
 8006ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffe:	4a09      	ldr	r2, [pc, #36]	@ (8007024 <HAL_RCC_ClockConfig+0x1cc>)
 8007000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007002:	4b09      	ldr	r3, [pc, #36]	@ (8007028 <HAL_RCC_ClockConfig+0x1d0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f7fc fa12 	bl	8003430 <HAL_InitTick>

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	40022000 	.word	0x40022000
 800701c:	40021000 	.word	0x40021000
 8007020:	0800bbb0 	.word	0x0800bbb0
 8007024:	20000024 	.word	0x20000024
 8007028:	20000028 	.word	0x20000028

0800702c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	2300      	movs	r3, #0
 8007038:	60bb      	str	r3, [r7, #8]
 800703a:	2300      	movs	r3, #0
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	2300      	movs	r3, #0
 8007040:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007046:	4b1e      	ldr	r3, [pc, #120]	@ (80070c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f003 030c 	and.w	r3, r3, #12
 8007052:	2b04      	cmp	r3, #4
 8007054:	d002      	beq.n	800705c <HAL_RCC_GetSysClockFreq+0x30>
 8007056:	2b08      	cmp	r3, #8
 8007058:	d003      	beq.n	8007062 <HAL_RCC_GetSysClockFreq+0x36>
 800705a:	e027      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800705c:	4b19      	ldr	r3, [pc, #100]	@ (80070c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800705e:	613b      	str	r3, [r7, #16]
      break;
 8007060:	e027      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	0c9b      	lsrs	r3, r3, #18
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	4a17      	ldr	r2, [pc, #92]	@ (80070c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800706c:	5cd3      	ldrb	r3, [r2, r3]
 800706e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d010      	beq.n	800709c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800707a:	4b11      	ldr	r3, [pc, #68]	@ (80070c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	0c5b      	lsrs	r3, r3, #17
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	4a11      	ldr	r2, [pc, #68]	@ (80070cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8007086:	5cd3      	ldrb	r3, [r2, r3]
 8007088:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a0d      	ldr	r2, [pc, #52]	@ (80070c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800708e:	fb03 f202 	mul.w	r2, r3, r2
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	fbb2 f3f3 	udiv	r3, r2, r3
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	e004      	b.n	80070a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a0c      	ldr	r2, [pc, #48]	@ (80070d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80070a0:	fb02 f303 	mul.w	r3, r2, r3
 80070a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	613b      	str	r3, [r7, #16]
      break;
 80070aa:	e002      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070ac:	4b05      	ldr	r3, [pc, #20]	@ (80070c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80070ae:	613b      	str	r3, [r7, #16]
      break;
 80070b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070b2:	693b      	ldr	r3, [r7, #16]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	40021000 	.word	0x40021000
 80070c4:	007a1200 	.word	0x007a1200
 80070c8:	0800bbc8 	.word	0x0800bbc8
 80070cc:	0800bbd8 	.word	0x0800bbd8
 80070d0:	003d0900 	.word	0x003d0900

080070d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070d8:	4b02      	ldr	r3, [pc, #8]	@ (80070e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80070da:	681b      	ldr	r3, [r3, #0]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr
 80070e4:	20000024 	.word	0x20000024

080070e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070ec:	f7ff fff2 	bl	80070d4 <HAL_RCC_GetHCLKFreq>
 80070f0:	4602      	mov	r2, r0
 80070f2:	4b05      	ldr	r3, [pc, #20]	@ (8007108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	0a1b      	lsrs	r3, r3, #8
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	4903      	ldr	r1, [pc, #12]	@ (800710c <HAL_RCC_GetPCLK1Freq+0x24>)
 80070fe:	5ccb      	ldrb	r3, [r1, r3]
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40021000 	.word	0x40021000
 800710c:	0800bbc0 	.word	0x0800bbc0

08007110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007114:	f7ff ffde 	bl	80070d4 <HAL_RCC_GetHCLKFreq>
 8007118:	4602      	mov	r2, r0
 800711a:	4b05      	ldr	r3, [pc, #20]	@ (8007130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	0adb      	lsrs	r3, r3, #11
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	4903      	ldr	r1, [pc, #12]	@ (8007134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007126:	5ccb      	ldrb	r3, [r1, r3]
 8007128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800712c:	4618      	mov	r0, r3
 800712e:	bd80      	pop	{r7, pc}
 8007130:	40021000 	.word	0x40021000
 8007134:	0800bbc0 	.word	0x0800bbc0

08007138 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007140:	4b0a      	ldr	r3, [pc, #40]	@ (800716c <RCC_Delay+0x34>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a0a      	ldr	r2, [pc, #40]	@ (8007170 <RCC_Delay+0x38>)
 8007146:	fba2 2303 	umull	r2, r3, r2, r3
 800714a:	0a5b      	lsrs	r3, r3, #9
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	fb02 f303 	mul.w	r3, r2, r3
 8007152:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007154:	bf00      	nop
  }
  while (Delay --);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1e5a      	subs	r2, r3, #1
 800715a:	60fa      	str	r2, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f9      	bne.n	8007154 <RCC_Delay+0x1c>
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr
 800716c:	20000024 	.word	0x20000024
 8007170:	10624dd3 	.word	0x10624dd3

08007174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e041      	b.n	800720a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d106      	bne.n	80071a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fb fed4 	bl	8002f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4619      	mov	r1, r3
 80071b2:	4610      	mov	r0, r2
 80071b4:	f000 fa5c 	bl	8007670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b01      	cmp	r3, #1
 8007226:	d001      	beq.n	800722c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e03a      	b.n	80072a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a18      	ldr	r2, [pc, #96]	@ (80072ac <HAL_TIM_Base_Start_IT+0x98>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00e      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x58>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007256:	d009      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x58>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a14      	ldr	r2, [pc, #80]	@ (80072b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d004      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x58>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a13      	ldr	r2, [pc, #76]	@ (80072b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d111      	bne.n	8007290 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b06      	cmp	r3, #6
 800727c:	d010      	beq.n	80072a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0201 	orr.w	r2, r2, #1
 800728c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728e:	e007      	b.n	80072a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800

080072b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d020      	beq.n	800731c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01b      	beq.n	800731c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0202 	mvn.w	r2, #2
 80072ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f998 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 8007308:	e005      	b.n	8007316 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f98b 	bl	8007626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f99a 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	d020      	beq.n	8007368 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01b      	beq.n	8007368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0204 	mvn.w	r2, #4
 8007338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f972 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 8007354:	e005      	b.n	8007362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f965 	bl	8007626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f974 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b00      	cmp	r3, #0
 8007370:	d020      	beq.n	80073b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f003 0308 	and.w	r3, r3, #8
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01b      	beq.n	80073b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f06f 0208 	mvn.w	r2, #8
 8007384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2204      	movs	r2, #4
 800738a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f94c 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 80073a0:	e005      	b.n	80073ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f93f 	bl	8007626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f94e 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d020      	beq.n	8007400 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01b      	beq.n	8007400 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f06f 0210 	mvn.w	r2, #16
 80073d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2208      	movs	r2, #8
 80073d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f926 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 80073ec:	e005      	b.n	80073fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f919 	bl	8007626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f928 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00c      	beq.n	8007424 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d007      	beq.n	8007424 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0201 	mvn.w	r2, #1
 800741c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fa fb92 	bl	8001b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00c      	beq.n	8007448 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007434:	2b00      	cmp	r3, #0
 8007436:	d007      	beq.n	8007448 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa7f 	bl	8007946 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00c      	beq.n	800746c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f8f8 	bl	800765c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00c      	beq.n	8007490 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	d007      	beq.n	8007490 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0220 	mvn.w	r2, #32
 8007488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa52 	bl	8007934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d101      	bne.n	80074b4 <HAL_TIM_ConfigClockSource+0x1c>
 80074b0:	2302      	movs	r3, #2
 80074b2:	e0b4      	b.n	800761e <HAL_TIM_ConfigClockSource+0x186>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80074d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074ec:	d03e      	beq.n	800756c <HAL_TIM_ConfigClockSource+0xd4>
 80074ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f2:	f200 8087 	bhi.w	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 80074f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074fa:	f000 8086 	beq.w	800760a <HAL_TIM_ConfigClockSource+0x172>
 80074fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007502:	d87f      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 8007504:	2b70      	cmp	r3, #112	@ 0x70
 8007506:	d01a      	beq.n	800753e <HAL_TIM_ConfigClockSource+0xa6>
 8007508:	2b70      	cmp	r3, #112	@ 0x70
 800750a:	d87b      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 800750c:	2b60      	cmp	r3, #96	@ 0x60
 800750e:	d050      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0x11a>
 8007510:	2b60      	cmp	r3, #96	@ 0x60
 8007512:	d877      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 8007514:	2b50      	cmp	r3, #80	@ 0x50
 8007516:	d03c      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0xfa>
 8007518:	2b50      	cmp	r3, #80	@ 0x50
 800751a:	d873      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 800751c:	2b40      	cmp	r3, #64	@ 0x40
 800751e:	d058      	beq.n	80075d2 <HAL_TIM_ConfigClockSource+0x13a>
 8007520:	2b40      	cmp	r3, #64	@ 0x40
 8007522:	d86f      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 8007524:	2b30      	cmp	r3, #48	@ 0x30
 8007526:	d064      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007528:	2b30      	cmp	r3, #48	@ 0x30
 800752a:	d86b      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 800752c:	2b20      	cmp	r3, #32
 800752e:	d060      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007530:	2b20      	cmp	r3, #32
 8007532:	d867      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d05c      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007538:	2b10      	cmp	r3, #16
 800753a:	d05a      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0x15a>
 800753c:	e062      	b.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800754e:	f000 f974 	bl	800783a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	609a      	str	r2, [r3, #8]
      break;
 800756a:	e04f      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800757c:	f000 f95d 	bl	800783a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800758e:	609a      	str	r2, [r3, #8]
      break;
 8007590:	e03c      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800759e:	461a      	mov	r2, r3
 80075a0:	f000 f8d4 	bl	800774c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2150      	movs	r1, #80	@ 0x50
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f92b 	bl	8007806 <TIM_ITRx_SetConfig>
      break;
 80075b0:	e02c      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075be:	461a      	mov	r2, r3
 80075c0:	f000 f8f2 	bl	80077a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2160      	movs	r1, #96	@ 0x60
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f91b 	bl	8007806 <TIM_ITRx_SetConfig>
      break;
 80075d0:	e01c      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075de:	461a      	mov	r2, r3
 80075e0:	f000 f8b4 	bl	800774c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2140      	movs	r1, #64	@ 0x40
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 f90b 	bl	8007806 <TIM_ITRx_SetConfig>
      break;
 80075f0:	e00c      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4619      	mov	r1, r3
 80075fc:	4610      	mov	r0, r2
 80075fe:	f000 f902 	bl	8007806 <TIM_ITRx_SetConfig>
      break;
 8007602:	e003      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
      break;
 8007608:	e000      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800760a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800761c:	7bfb      	ldrb	r3, [r7, #15]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	bc80      	pop	{r7}
 8007636:	4770      	bx	lr

08007638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr

0800764a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	bc80      	pop	{r7}
 800765a:	4770      	bx	lr

0800765c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	bc80      	pop	{r7}
 800766c:	4770      	bx	lr
	...

08007670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a2f      	ldr	r2, [pc, #188]	@ (8007740 <TIM_Base_SetConfig+0xd0>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00b      	beq.n	80076a0 <TIM_Base_SetConfig+0x30>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800768e:	d007      	beq.n	80076a0 <TIM_Base_SetConfig+0x30>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a2c      	ldr	r2, [pc, #176]	@ (8007744 <TIM_Base_SetConfig+0xd4>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_Base_SetConfig+0x30>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a2b      	ldr	r2, [pc, #172]	@ (8007748 <TIM_Base_SetConfig+0xd8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d108      	bne.n	80076b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a22      	ldr	r2, [pc, #136]	@ (8007740 <TIM_Base_SetConfig+0xd0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00b      	beq.n	80076d2 <TIM_Base_SetConfig+0x62>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c0:	d007      	beq.n	80076d2 <TIM_Base_SetConfig+0x62>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007744 <TIM_Base_SetConfig+0xd4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d003      	beq.n	80076d2 <TIM_Base_SetConfig+0x62>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a1e      	ldr	r2, [pc, #120]	@ (8007748 <TIM_Base_SetConfig+0xd8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d108      	bne.n	80076e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a0d      	ldr	r2, [pc, #52]	@ (8007740 <TIM_Base_SetConfig+0xd0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d103      	bne.n	8007718 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f023 0201 	bic.w	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	611a      	str	r2, [r3, #16]
  }
}
 8007736:	bf00      	nop
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr
 8007740:	40012c00 	.word	0x40012c00
 8007744:	40000400 	.word	0x40000400
 8007748:	40000800 	.word	0x40000800

0800774c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	f023 0201 	bic.w	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	011b      	lsls	r3, r3, #4
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	4313      	orrs	r3, r2
 8007780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f023 030a 	bic.w	r3, r3, #10
 8007788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	621a      	str	r2, [r3, #32]
}
 800779e:	bf00      	nop
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bc80      	pop	{r7}
 80077a6:	4770      	bx	lr

080077a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	f023 0210 	bic.w	r2, r3, #16
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	031b      	lsls	r3, r3, #12
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80077e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	621a      	str	r2, [r3, #32]
}
 80077fc:	bf00      	nop
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr

08007806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800781c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4313      	orrs	r3, r2
 8007824:	f043 0307 	orr.w	r3, r3, #7
 8007828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	609a      	str	r2, [r3, #8]
}
 8007830:	bf00      	nop
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	bc80      	pop	{r7}
 8007838:	4770      	bx	lr

0800783a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800783a:	b480      	push	{r7}
 800783c:	b087      	sub	sp, #28
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
 8007846:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007854:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	021a      	lsls	r2, r3, #8
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	431a      	orrs	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	4313      	orrs	r3, r2
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	609a      	str	r2, [r3, #8]
}
 800786e:	bf00      	nop
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr

08007878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800788c:	2302      	movs	r3, #2
 800788e:	e046      	b.n	800791e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a16      	ldr	r2, [pc, #88]	@ (8007928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00e      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078dc:	d009      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a12      	ldr	r2, [pc, #72]	@ (800792c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d004      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a10      	ldr	r2, [pc, #64]	@ (8007930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d10c      	bne.n	800790c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	4313      	orrs	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	bc80      	pop	{r7}
 8007926:	4770      	bx	lr
 8007928:	40012c00 	.word	0x40012c00
 800792c:	40000400 	.word	0x40000400
 8007930:	40000800 	.word	0x40000800

08007934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr

08007946 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	bc80      	pop	{r7}
 8007956:	4770      	bx	lr

08007958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e042      	b.n	80079f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fb fb24 	bl	8002fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2224      	movs	r2, #36	@ 0x24
 8007988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800799a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fdb7 	bl	8008510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	691a      	ldr	r2, [r3, #16]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2220      	movs	r2, #32
 80079dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	@ 0x28
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b20      	cmp	r3, #32
 8007a16:	d175      	bne.n	8007b04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <HAL_UART_Transmit+0x2c>
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e06e      	b.n	8007b06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2221      	movs	r2, #33	@ 0x21
 8007a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a36:	f7fb fd3d 	bl	80034b4 <HAL_GetTick>
 8007a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	88fa      	ldrh	r2, [r7, #6]
 8007a40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	88fa      	ldrh	r2, [r7, #6]
 8007a46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a50:	d108      	bne.n	8007a64 <HAL_UART_Transmit+0x6c>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d104      	bne.n	8007a64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	61bb      	str	r3, [r7, #24]
 8007a62:	e003      	b.n	8007a6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a6c:	e02e      	b.n	8007acc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2200      	movs	r2, #0
 8007a76:	2180      	movs	r1, #128	@ 0x80
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 fb1c 	bl	80080b6 <UART_WaitOnFlagUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e03a      	b.n	8007b06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10b      	bne.n	8007aae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	3302      	adds	r3, #2
 8007aaa:	61bb      	str	r3, [r7, #24]
 8007aac:	e007      	b.n	8007abe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	781a      	ldrb	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	3301      	adds	r3, #1
 8007abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1cb      	bne.n	8007a6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2200      	movs	r2, #0
 8007ade:	2140      	movs	r1, #64	@ 0x40
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fae8 	bl	80080b6 <UART_WaitOnFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e006      	b.n	8007b06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	e000      	b.n	8007b06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007b04:	2302      	movs	r3, #2
  }
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3720      	adds	r7, #32
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b20      	cmp	r3, #32
 8007b26:	d112      	bne.n	8007b4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_UART_Receive_IT+0x26>
 8007b2e:	88fb      	ldrh	r3, [r7, #6]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e00b      	b.n	8007b50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	461a      	mov	r2, r3
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fb0f 	bl	8008168 <UART_Start_Receive_IT>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	e000      	b.n	8007b50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007b4e:	2302      	movs	r3, #2
  }
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b0ba      	sub	sp, #232	@ 0xe8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b8e:	f003 030f 	and.w	r3, r3, #15
 8007b92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10f      	bne.n	8007bbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d009      	beq.n	8007bbe <HAL_UART_IRQHandler+0x66>
 8007baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bae:	f003 0320 	and.w	r3, r3, #32
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fbec 	bl	8008394 <UART_Receive_IT>
      return;
 8007bbc:	e25b      	b.n	8008076 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 80de 	beq.w	8007d84 <HAL_UART_IRQHandler+0x22c>
 8007bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d106      	bne.n	8007be2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 80d1 	beq.w	8007d84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00b      	beq.n	8007c06 <HAL_UART_IRQHandler+0xae>
 8007bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bfe:	f043 0201 	orr.w	r2, r3, #1
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c0a:	f003 0304 	and.w	r3, r3, #4
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <HAL_UART_IRQHandler+0xd2>
 8007c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c22:	f043 0202 	orr.w	r2, r3, #2
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00b      	beq.n	8007c4e <HAL_UART_IRQHandler+0xf6>
 8007c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d005      	beq.n	8007c4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c46:	f043 0204 	orr.w	r2, r3, #4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c52:	f003 0308 	and.w	r3, r3, #8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d011      	beq.n	8007c7e <HAL_UART_IRQHandler+0x126>
 8007c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d105      	bne.n	8007c72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d005      	beq.n	8007c7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c76:	f043 0208 	orr.w	r2, r3, #8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 81f2 	beq.w	800806c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x14e>
 8007c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c98:	f003 0320 	and.w	r3, r3, #32
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fb77 	bl	8008394 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	bf14      	ite	ne
 8007cb4:	2301      	movne	r3, #1
 8007cb6:	2300      	moveq	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d103      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x17a>
 8007cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d04f      	beq.n	8007d72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa81 	bl	80081da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d041      	beq.n	8007d6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3314      	adds	r3, #20
 8007cec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3314      	adds	r3, #20
 8007d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1d9      	bne.n	8007ce6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d013      	beq.n	8007d62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8007f38 <HAL_UART_IRQHandler+0x3e0>)
 8007d40:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fb fd2a 	bl	80037a0 <HAL_DMA_Abort_IT>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d016      	beq.n	8007d80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d60:	e00e      	b.n	8007d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f993 	bl	800808e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d68:	e00a      	b.n	8007d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f98f 	bl	800808e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d70:	e006      	b.n	8007d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f98b 	bl	800808e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007d7e:	e175      	b.n	800806c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d80:	bf00      	nop
    return;
 8007d82:	e173      	b.n	800806c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	f040 814f 	bne.w	800802c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d92:	f003 0310 	and.w	r3, r3, #16
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 8148 	beq.w	800802c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 8141 	beq.w	800802c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007daa:	2300      	movs	r3, #0
 8007dac:	60bb      	str	r3, [r7, #8]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60bb      	str	r3, [r7, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	60bb      	str	r3, [r7, #8]
 8007dbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 80b6 	beq.w	8007f3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ddc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 8145 	beq.w	8008070 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dee:	429a      	cmp	r2, r3
 8007df0:	f080 813e 	bcs.w	8008070 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	f000 8088 	beq.w	8007f18 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	330c      	adds	r3, #12
 8007e30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007e34:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e40:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1d9      	bne.n	8007e08 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3314      	adds	r3, #20
 8007e5a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e66:	f023 0301 	bic.w	r3, r3, #1
 8007e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3314      	adds	r3, #20
 8007e74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e78:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e80:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e1      	bne.n	8007e54 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3314      	adds	r3, #20
 8007e96:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ea0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3314      	adds	r3, #20
 8007eb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007eb4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007eba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ec2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e3      	bne.n	8007e90 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	330c      	adds	r3, #12
 8007edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ee8:	f023 0310 	bic.w	r3, r3, #16
 8007eec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	330c      	adds	r3, #12
 8007ef6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007efa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007efc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e3      	bne.n	8007ed6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fb fc09 	bl	800372a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f8b6 	bl	80080a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f34:	e09c      	b.n	8008070 <HAL_UART_IRQHandler+0x518>
 8007f36:	bf00      	nop
 8007f38:	0800829f 	.word	0x0800829f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 808e 	beq.w	8008074 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 8089 	beq.w	8008074 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	330c      	adds	r3, #12
 8007f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	330c      	adds	r3, #12
 8007f82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007f86:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e3      	bne.n	8007f62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3314      	adds	r3, #20
 8007fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	f023 0301 	bic.w	r3, r3, #1
 8007fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3314      	adds	r3, #20
 8007fba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007fbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e3      	bne.n	8007f9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0310 	bic.w	r3, r3, #16
 8007ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	330c      	adds	r3, #12
 8008000:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008004:	61fa      	str	r2, [r7, #28]
 8008006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	69b9      	ldr	r1, [r7, #24]
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	617b      	str	r3, [r7, #20]
   return(result);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e3      	bne.n	8007fe0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800801e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f83b 	bl	80080a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800802a:	e023      	b.n	8008074 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800802c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008034:	2b00      	cmp	r3, #0
 8008036:	d009      	beq.n	800804c <HAL_UART_IRQHandler+0x4f4>
 8008038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800803c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008040:	2b00      	cmp	r3, #0
 8008042:	d003      	beq.n	800804c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f93e 	bl	80082c6 <UART_Transmit_IT>
    return;
 800804a:	e014      	b.n	8008076 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800804c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00e      	beq.n	8008076 <HAL_UART_IRQHandler+0x51e>
 8008058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800805c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	d008      	beq.n	8008076 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f97d 	bl	8008364 <UART_EndTransmit_IT>
    return;
 800806a:	e004      	b.n	8008076 <HAL_UART_IRQHandler+0x51e>
    return;
 800806c:	bf00      	nop
 800806e:	e002      	b.n	8008076 <HAL_UART_IRQHandler+0x51e>
      return;
 8008070:	bf00      	nop
 8008072:	e000      	b.n	8008076 <HAL_UART_IRQHandler+0x51e>
      return;
 8008074:	bf00      	nop
  }
}
 8008076:	37e8      	adds	r7, #232	@ 0xe8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	bc80      	pop	{r7}
 800808c:	4770      	bx	lr

0800808e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	bc80      	pop	{r7}
 800809e:	4770      	bx	lr

080080a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bc80      	pop	{r7}
 80080b4:	4770      	bx	lr

080080b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b086      	sub	sp, #24
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	603b      	str	r3, [r7, #0]
 80080c2:	4613      	mov	r3, r2
 80080c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080c6:	e03b      	b.n	8008140 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080ce:	d037      	beq.n	8008140 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d0:	f7fb f9f0 	bl	80034b4 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	6a3a      	ldr	r2, [r7, #32]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d302      	bcc.n	80080e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e03a      	b.n	8008160 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d023      	beq.n	8008140 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2b80      	cmp	r3, #128	@ 0x80
 80080fc:	d020      	beq.n	8008140 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b40      	cmp	r3, #64	@ 0x40
 8008102:	d01d      	beq.n	8008140 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0308 	and.w	r3, r3, #8
 800810e:	2b08      	cmp	r3, #8
 8008110:	d116      	bne.n	8008140 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008112:	2300      	movs	r3, #0
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	617b      	str	r3, [r7, #20]
 8008126:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f856 	bl	80081da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2208      	movs	r2, #8
 8008132:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e00f      	b.n	8008160 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	4013      	ands	r3, r2
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	429a      	cmp	r2, r3
 800814e:	bf0c      	ite	eq
 8008150:	2301      	moveq	r3, #1
 8008152:	2300      	movne	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	429a      	cmp	r2, r3
 800815c:	d0b4      	beq.n	80080c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	4613      	mov	r3, r2
 8008174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	88fa      	ldrh	r2, [r7, #6]
 8008180:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	88fa      	ldrh	r2, [r7, #6]
 8008186:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2222      	movs	r2, #34	@ 0x22
 8008192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d007      	beq.n	80081ae <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	695a      	ldr	r2, [r3, #20]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f042 0201 	orr.w	r2, r2, #1
 80081bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f042 0220 	orr.w	r2, r2, #32
 80081cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr

080081da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081da:	b480      	push	{r7}
 80081dc:	b095      	sub	sp, #84	@ 0x54
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	330c      	adds	r3, #12
 80081e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	330c      	adds	r3, #12
 8008200:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008202:	643a      	str	r2, [r7, #64]	@ 0x40
 8008204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008206:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008208:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e5      	bne.n	80081e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3314      	adds	r3, #20
 800821c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	61fb      	str	r3, [r7, #28]
   return(result);
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	f023 0301 	bic.w	r3, r3, #1
 800822c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3314      	adds	r3, #20
 8008234:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008238:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800823c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e5      	bne.n	8008216 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824e:	2b01      	cmp	r3, #1
 8008250:	d119      	bne.n	8008286 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	330c      	adds	r3, #12
 8008258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	60bb      	str	r3, [r7, #8]
   return(result);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f023 0310 	bic.w	r3, r3, #16
 8008268:	647b      	str	r3, [r7, #68]	@ 0x44
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	330c      	adds	r3, #12
 8008270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008272:	61ba      	str	r2, [r7, #24]
 8008274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	6979      	ldr	r1, [r7, #20]
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	613b      	str	r3, [r7, #16]
   return(result);
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e5      	bne.n	8008252 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008294:	bf00      	nop
 8008296:	3754      	adds	r7, #84	@ 0x54
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr

0800829e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7ff fee8 	bl	800808e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082be:	bf00      	nop
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b085      	sub	sp, #20
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b21      	cmp	r3, #33	@ 0x21
 80082d8:	d13e      	bne.n	8008358 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e2:	d114      	bne.n	800830e <UART_Transmit_IT+0x48>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d110      	bne.n	800830e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008300:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	1c9a      	adds	r2, r3, #2
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	621a      	str	r2, [r3, #32]
 800830c:	e008      	b.n	8008320 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	1c59      	adds	r1, r3, #1
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6211      	str	r1, [r2, #32]
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	b29b      	uxth	r3, r3
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	4619      	mov	r1, r3
 800832e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10f      	bne.n	8008354 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008342:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008352:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	e000      	b.n	800835a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008358:	2302      	movs	r3, #2
  }
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	bc80      	pop	{r7}
 8008362:	4770      	bx	lr

08008364 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800837a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2220      	movs	r2, #32
 8008380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff fe79 	bl	800807c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08c      	sub	sp, #48	@ 0x30
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b22      	cmp	r3, #34	@ 0x22
 80083a6:	f040 80ae 	bne.w	8008506 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b2:	d117      	bne.n	80083e4 <UART_Receive_IT+0x50>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d113      	bne.n	80083e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083bc:	2300      	movs	r3, #0
 80083be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083dc:	1c9a      	adds	r2, r3, #2
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80083e2:	e026      	b.n	8008432 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083f6:	d007      	beq.n	8008408 <UART_Receive_IT+0x74>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10a      	bne.n	8008416 <UART_Receive_IT+0x82>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d106      	bne.n	8008416 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	b2da      	uxtb	r2, r3
 8008410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	e008      	b.n	8008428 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008422:	b2da      	uxtb	r2, r3
 8008424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008426:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008436:	b29b      	uxth	r3, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	b29b      	uxth	r3, r3
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	4619      	mov	r1, r3
 8008440:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008442:	2b00      	cmp	r3, #0
 8008444:	d15d      	bne.n	8008502 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0220 	bic.w	r2, r2, #32
 8008454:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68da      	ldr	r2, [r3, #12]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008464:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	695a      	ldr	r2, [r3, #20]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 0201 	bic.w	r2, r2, #1
 8008474:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2220      	movs	r2, #32
 800847a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008488:	2b01      	cmp	r3, #1
 800848a:	d135      	bne.n	80084f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	330c      	adds	r3, #12
 8008498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	613b      	str	r3, [r7, #16]
   return(result);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f023 0310 	bic.w	r3, r3, #16
 80084a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	330c      	adds	r3, #12
 80084b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b2:	623a      	str	r2, [r7, #32]
 80084b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	69f9      	ldr	r1, [r7, #28]
 80084b8:	6a3a      	ldr	r2, [r7, #32]
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	61bb      	str	r3, [r7, #24]
   return(result);
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e5      	bne.n	8008492 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0310 	and.w	r3, r3, #16
 80084d0:	2b10      	cmp	r3, #16
 80084d2:	d10a      	bne.n	80084ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084d4:	2300      	movs	r3, #0
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff fdd5 	bl	80080a0 <HAL_UARTEx_RxEventCallback>
 80084f6:	e002      	b.n	80084fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7f9 f8e5 	bl	80016c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	e002      	b.n	8008508 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	e000      	b.n	8008508 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008506:	2302      	movs	r3, #2
  }
}
 8008508:	4618      	mov	r0, r3
 800850a:	3730      	adds	r7, #48	@ 0x30
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689a      	ldr	r2, [r3, #8]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	431a      	orrs	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800854a:	f023 030c 	bic.w	r3, r3, #12
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6812      	ldr	r2, [r2, #0]
 8008552:	68b9      	ldr	r1, [r7, #8]
 8008554:	430b      	orrs	r3, r1
 8008556:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a2c      	ldr	r2, [pc, #176]	@ (8008624 <UART_SetConfig+0x114>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d103      	bne.n	8008580 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008578:	f7fe fdca 	bl	8007110 <HAL_RCC_GetPCLK2Freq>
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	e002      	b.n	8008586 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008580:	f7fe fdb2 	bl	80070e8 <HAL_RCC_GetPCLK1Freq>
 8008584:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009a      	lsls	r2, r3, #2
 8008590:	441a      	add	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	fbb2 f3f3 	udiv	r3, r2, r3
 800859c:	4a22      	ldr	r2, [pc, #136]	@ (8008628 <UART_SetConfig+0x118>)
 800859e:	fba2 2303 	umull	r2, r3, r2, r3
 80085a2:	095b      	lsrs	r3, r3, #5
 80085a4:	0119      	lsls	r1, r3, #4
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009a      	lsls	r2, r3, #2
 80085b0:	441a      	add	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80085bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008628 <UART_SetConfig+0x118>)
 80085be:	fba3 0302 	umull	r0, r3, r3, r2
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	2064      	movs	r0, #100	@ 0x64
 80085c6:	fb00 f303 	mul.w	r3, r0, r3
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	3332      	adds	r3, #50	@ 0x32
 80085d0:	4a15      	ldr	r2, [pc, #84]	@ (8008628 <UART_SetConfig+0x118>)
 80085d2:	fba2 2303 	umull	r2, r3, r2, r3
 80085d6:	095b      	lsrs	r3, r3, #5
 80085d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085dc:	4419      	add	r1, r3
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	009a      	lsls	r2, r3, #2
 80085e8:	441a      	add	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80085f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008628 <UART_SetConfig+0x118>)
 80085f6:	fba3 0302 	umull	r0, r3, r3, r2
 80085fa:	095b      	lsrs	r3, r3, #5
 80085fc:	2064      	movs	r0, #100	@ 0x64
 80085fe:	fb00 f303 	mul.w	r3, r0, r3
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	011b      	lsls	r3, r3, #4
 8008606:	3332      	adds	r3, #50	@ 0x32
 8008608:	4a07      	ldr	r2, [pc, #28]	@ (8008628 <UART_SetConfig+0x118>)
 800860a:	fba2 2303 	umull	r2, r3, r2, r3
 800860e:	095b      	lsrs	r3, r3, #5
 8008610:	f003 020f 	and.w	r2, r3, #15
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	440a      	add	r2, r1
 800861a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800861c:	bf00      	nop
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	40013800 	.word	0x40013800
 8008628:	51eb851f 	.word	0x51eb851f

0800862c <__cvt>:
 800862c:	2b00      	cmp	r3, #0
 800862e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008632:	461d      	mov	r5, r3
 8008634:	bfbb      	ittet	lt
 8008636:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800863a:	461d      	movlt	r5, r3
 800863c:	2300      	movge	r3, #0
 800863e:	232d      	movlt	r3, #45	@ 0x2d
 8008640:	b088      	sub	sp, #32
 8008642:	4614      	mov	r4, r2
 8008644:	bfb8      	it	lt
 8008646:	4614      	movlt	r4, r2
 8008648:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800864a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800864c:	7013      	strb	r3, [r2, #0]
 800864e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008650:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008654:	f023 0820 	bic.w	r8, r3, #32
 8008658:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800865c:	d005      	beq.n	800866a <__cvt+0x3e>
 800865e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008662:	d100      	bne.n	8008666 <__cvt+0x3a>
 8008664:	3601      	adds	r6, #1
 8008666:	2302      	movs	r3, #2
 8008668:	e000      	b.n	800866c <__cvt+0x40>
 800866a:	2303      	movs	r3, #3
 800866c:	aa07      	add	r2, sp, #28
 800866e:	9204      	str	r2, [sp, #16]
 8008670:	aa06      	add	r2, sp, #24
 8008672:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008676:	e9cd 3600 	strd	r3, r6, [sp]
 800867a:	4622      	mov	r2, r4
 800867c:	462b      	mov	r3, r5
 800867e:	f000 fe6f 	bl	8009360 <_dtoa_r>
 8008682:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008686:	4607      	mov	r7, r0
 8008688:	d119      	bne.n	80086be <__cvt+0x92>
 800868a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800868c:	07db      	lsls	r3, r3, #31
 800868e:	d50e      	bpl.n	80086ae <__cvt+0x82>
 8008690:	eb00 0906 	add.w	r9, r0, r6
 8008694:	2200      	movs	r2, #0
 8008696:	2300      	movs	r3, #0
 8008698:	4620      	mov	r0, r4
 800869a:	4629      	mov	r1, r5
 800869c:	f7f8 f984 	bl	80009a8 <__aeabi_dcmpeq>
 80086a0:	b108      	cbz	r0, 80086a6 <__cvt+0x7a>
 80086a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80086a6:	2230      	movs	r2, #48	@ 0x30
 80086a8:	9b07      	ldr	r3, [sp, #28]
 80086aa:	454b      	cmp	r3, r9
 80086ac:	d31e      	bcc.n	80086ec <__cvt+0xc0>
 80086ae:	4638      	mov	r0, r7
 80086b0:	9b07      	ldr	r3, [sp, #28]
 80086b2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80086b4:	1bdb      	subs	r3, r3, r7
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	b008      	add	sp, #32
 80086ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80086c2:	eb00 0906 	add.w	r9, r0, r6
 80086c6:	d1e5      	bne.n	8008694 <__cvt+0x68>
 80086c8:	7803      	ldrb	r3, [r0, #0]
 80086ca:	2b30      	cmp	r3, #48	@ 0x30
 80086cc:	d10a      	bne.n	80086e4 <__cvt+0xb8>
 80086ce:	2200      	movs	r2, #0
 80086d0:	2300      	movs	r3, #0
 80086d2:	4620      	mov	r0, r4
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f8 f967 	bl	80009a8 <__aeabi_dcmpeq>
 80086da:	b918      	cbnz	r0, 80086e4 <__cvt+0xb8>
 80086dc:	f1c6 0601 	rsb	r6, r6, #1
 80086e0:	f8ca 6000 	str.w	r6, [sl]
 80086e4:	f8da 3000 	ldr.w	r3, [sl]
 80086e8:	4499      	add	r9, r3
 80086ea:	e7d3      	b.n	8008694 <__cvt+0x68>
 80086ec:	1c59      	adds	r1, r3, #1
 80086ee:	9107      	str	r1, [sp, #28]
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	e7d9      	b.n	80086a8 <__cvt+0x7c>

080086f4 <__exponent>:
 80086f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086f6:	2900      	cmp	r1, #0
 80086f8:	bfb6      	itet	lt
 80086fa:	232d      	movlt	r3, #45	@ 0x2d
 80086fc:	232b      	movge	r3, #43	@ 0x2b
 80086fe:	4249      	neglt	r1, r1
 8008700:	2909      	cmp	r1, #9
 8008702:	7002      	strb	r2, [r0, #0]
 8008704:	7043      	strb	r3, [r0, #1]
 8008706:	dd29      	ble.n	800875c <__exponent+0x68>
 8008708:	f10d 0307 	add.w	r3, sp, #7
 800870c:	461d      	mov	r5, r3
 800870e:	270a      	movs	r7, #10
 8008710:	fbb1 f6f7 	udiv	r6, r1, r7
 8008714:	461a      	mov	r2, r3
 8008716:	fb07 1416 	mls	r4, r7, r6, r1
 800871a:	3430      	adds	r4, #48	@ 0x30
 800871c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008720:	460c      	mov	r4, r1
 8008722:	2c63      	cmp	r4, #99	@ 0x63
 8008724:	4631      	mov	r1, r6
 8008726:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800872a:	dcf1      	bgt.n	8008710 <__exponent+0x1c>
 800872c:	3130      	adds	r1, #48	@ 0x30
 800872e:	1e94      	subs	r4, r2, #2
 8008730:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008734:	4623      	mov	r3, r4
 8008736:	1c41      	adds	r1, r0, #1
 8008738:	42ab      	cmp	r3, r5
 800873a:	d30a      	bcc.n	8008752 <__exponent+0x5e>
 800873c:	f10d 0309 	add.w	r3, sp, #9
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	42ac      	cmp	r4, r5
 8008744:	bf88      	it	hi
 8008746:	2300      	movhi	r3, #0
 8008748:	3302      	adds	r3, #2
 800874a:	4403      	add	r3, r0
 800874c:	1a18      	subs	r0, r3, r0
 800874e:	b003      	add	sp, #12
 8008750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008752:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008756:	f801 6f01 	strb.w	r6, [r1, #1]!
 800875a:	e7ed      	b.n	8008738 <__exponent+0x44>
 800875c:	2330      	movs	r3, #48	@ 0x30
 800875e:	3130      	adds	r1, #48	@ 0x30
 8008760:	7083      	strb	r3, [r0, #2]
 8008762:	70c1      	strb	r1, [r0, #3]
 8008764:	1d03      	adds	r3, r0, #4
 8008766:	e7f1      	b.n	800874c <__exponent+0x58>

08008768 <_printf_float>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	b091      	sub	sp, #68	@ 0x44
 800876e:	460c      	mov	r4, r1
 8008770:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008774:	4616      	mov	r6, r2
 8008776:	461f      	mov	r7, r3
 8008778:	4605      	mov	r5, r0
 800877a:	f000 fce1 	bl	8009140 <_localeconv_r>
 800877e:	6803      	ldr	r3, [r0, #0]
 8008780:	4618      	mov	r0, r3
 8008782:	9308      	str	r3, [sp, #32]
 8008784:	f7f7 fce4 	bl	8000150 <strlen>
 8008788:	2300      	movs	r3, #0
 800878a:	930e      	str	r3, [sp, #56]	@ 0x38
 800878c:	f8d8 3000 	ldr.w	r3, [r8]
 8008790:	9009      	str	r0, [sp, #36]	@ 0x24
 8008792:	3307      	adds	r3, #7
 8008794:	f023 0307 	bic.w	r3, r3, #7
 8008798:	f103 0208 	add.w	r2, r3, #8
 800879c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80087a0:	f8d4 b000 	ldr.w	fp, [r4]
 80087a4:	f8c8 2000 	str.w	r2, [r8]
 80087a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80087b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087b2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80087b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80087be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80087c2:	4b9c      	ldr	r3, [pc, #624]	@ (8008a34 <_printf_float+0x2cc>)
 80087c4:	f7f8 f922 	bl	8000a0c <__aeabi_dcmpun>
 80087c8:	bb70      	cbnz	r0, 8008828 <_printf_float+0xc0>
 80087ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80087ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087d2:	4b98      	ldr	r3, [pc, #608]	@ (8008a34 <_printf_float+0x2cc>)
 80087d4:	f7f8 f8fc 	bl	80009d0 <__aeabi_dcmple>
 80087d8:	bb30      	cbnz	r0, 8008828 <_printf_float+0xc0>
 80087da:	2200      	movs	r2, #0
 80087dc:	2300      	movs	r3, #0
 80087de:	4640      	mov	r0, r8
 80087e0:	4649      	mov	r1, r9
 80087e2:	f7f8 f8eb 	bl	80009bc <__aeabi_dcmplt>
 80087e6:	b110      	cbz	r0, 80087ee <_printf_float+0x86>
 80087e8:	232d      	movs	r3, #45	@ 0x2d
 80087ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087ee:	4a92      	ldr	r2, [pc, #584]	@ (8008a38 <_printf_float+0x2d0>)
 80087f0:	4b92      	ldr	r3, [pc, #584]	@ (8008a3c <_printf_float+0x2d4>)
 80087f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80087f6:	bf8c      	ite	hi
 80087f8:	4690      	movhi	r8, r2
 80087fa:	4698      	movls	r8, r3
 80087fc:	2303      	movs	r3, #3
 80087fe:	f04f 0900 	mov.w	r9, #0
 8008802:	6123      	str	r3, [r4, #16]
 8008804:	f02b 0304 	bic.w	r3, fp, #4
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	4633      	mov	r3, r6
 800880c:	4621      	mov	r1, r4
 800880e:	4628      	mov	r0, r5
 8008810:	9700      	str	r7, [sp, #0]
 8008812:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008814:	f000 f9d4 	bl	8008bc0 <_printf_common>
 8008818:	3001      	adds	r0, #1
 800881a:	f040 8090 	bne.w	800893e <_printf_float+0x1d6>
 800881e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008822:	b011      	add	sp, #68	@ 0x44
 8008824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008828:	4642      	mov	r2, r8
 800882a:	464b      	mov	r3, r9
 800882c:	4640      	mov	r0, r8
 800882e:	4649      	mov	r1, r9
 8008830:	f7f8 f8ec 	bl	8000a0c <__aeabi_dcmpun>
 8008834:	b148      	cbz	r0, 800884a <_printf_float+0xe2>
 8008836:	464b      	mov	r3, r9
 8008838:	2b00      	cmp	r3, #0
 800883a:	bfb8      	it	lt
 800883c:	232d      	movlt	r3, #45	@ 0x2d
 800883e:	4a80      	ldr	r2, [pc, #512]	@ (8008a40 <_printf_float+0x2d8>)
 8008840:	bfb8      	it	lt
 8008842:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008846:	4b7f      	ldr	r3, [pc, #508]	@ (8008a44 <_printf_float+0x2dc>)
 8008848:	e7d3      	b.n	80087f2 <_printf_float+0x8a>
 800884a:	6863      	ldr	r3, [r4, #4]
 800884c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	d13f      	bne.n	80088d4 <_printf_float+0x16c>
 8008854:	2306      	movs	r3, #6
 8008856:	6063      	str	r3, [r4, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800885e:	6023      	str	r3, [r4, #0]
 8008860:	9206      	str	r2, [sp, #24]
 8008862:	aa0e      	add	r2, sp, #56	@ 0x38
 8008864:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008868:	aa0d      	add	r2, sp, #52	@ 0x34
 800886a:	9203      	str	r2, [sp, #12]
 800886c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008870:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008874:	6863      	ldr	r3, [r4, #4]
 8008876:	4642      	mov	r2, r8
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	4628      	mov	r0, r5
 800887c:	464b      	mov	r3, r9
 800887e:	910a      	str	r1, [sp, #40]	@ 0x28
 8008880:	f7ff fed4 	bl	800862c <__cvt>
 8008884:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008886:	4680      	mov	r8, r0
 8008888:	2947      	cmp	r1, #71	@ 0x47
 800888a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800888c:	d128      	bne.n	80088e0 <_printf_float+0x178>
 800888e:	1cc8      	adds	r0, r1, #3
 8008890:	db02      	blt.n	8008898 <_printf_float+0x130>
 8008892:	6863      	ldr	r3, [r4, #4]
 8008894:	4299      	cmp	r1, r3
 8008896:	dd40      	ble.n	800891a <_printf_float+0x1b2>
 8008898:	f1aa 0a02 	sub.w	sl, sl, #2
 800889c:	fa5f fa8a 	uxtb.w	sl, sl
 80088a0:	4652      	mov	r2, sl
 80088a2:	3901      	subs	r1, #1
 80088a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80088a8:	910d      	str	r1, [sp, #52]	@ 0x34
 80088aa:	f7ff ff23 	bl	80086f4 <__exponent>
 80088ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088b0:	4681      	mov	r9, r0
 80088b2:	1813      	adds	r3, r2, r0
 80088b4:	2a01      	cmp	r2, #1
 80088b6:	6123      	str	r3, [r4, #16]
 80088b8:	dc02      	bgt.n	80088c0 <_printf_float+0x158>
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	07d2      	lsls	r2, r2, #31
 80088be:	d501      	bpl.n	80088c4 <_printf_float+0x15c>
 80088c0:	3301      	adds	r3, #1
 80088c2:	6123      	str	r3, [r4, #16]
 80088c4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d09e      	beq.n	800880a <_printf_float+0xa2>
 80088cc:	232d      	movs	r3, #45	@ 0x2d
 80088ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088d2:	e79a      	b.n	800880a <_printf_float+0xa2>
 80088d4:	2947      	cmp	r1, #71	@ 0x47
 80088d6:	d1bf      	bne.n	8008858 <_printf_float+0xf0>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1bd      	bne.n	8008858 <_printf_float+0xf0>
 80088dc:	2301      	movs	r3, #1
 80088de:	e7ba      	b.n	8008856 <_printf_float+0xee>
 80088e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80088e4:	d9dc      	bls.n	80088a0 <_printf_float+0x138>
 80088e6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80088ea:	d118      	bne.n	800891e <_printf_float+0x1b6>
 80088ec:	2900      	cmp	r1, #0
 80088ee:	6863      	ldr	r3, [r4, #4]
 80088f0:	dd0b      	ble.n	800890a <_printf_float+0x1a2>
 80088f2:	6121      	str	r1, [r4, #16]
 80088f4:	b913      	cbnz	r3, 80088fc <_printf_float+0x194>
 80088f6:	6822      	ldr	r2, [r4, #0]
 80088f8:	07d0      	lsls	r0, r2, #31
 80088fa:	d502      	bpl.n	8008902 <_printf_float+0x19a>
 80088fc:	3301      	adds	r3, #1
 80088fe:	440b      	add	r3, r1
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	f04f 0900 	mov.w	r9, #0
 8008906:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008908:	e7dc      	b.n	80088c4 <_printf_float+0x15c>
 800890a:	b913      	cbnz	r3, 8008912 <_printf_float+0x1aa>
 800890c:	6822      	ldr	r2, [r4, #0]
 800890e:	07d2      	lsls	r2, r2, #31
 8008910:	d501      	bpl.n	8008916 <_printf_float+0x1ae>
 8008912:	3302      	adds	r3, #2
 8008914:	e7f4      	b.n	8008900 <_printf_float+0x198>
 8008916:	2301      	movs	r3, #1
 8008918:	e7f2      	b.n	8008900 <_printf_float+0x198>
 800891a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800891e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008920:	4299      	cmp	r1, r3
 8008922:	db05      	blt.n	8008930 <_printf_float+0x1c8>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	6121      	str	r1, [r4, #16]
 8008928:	07d8      	lsls	r0, r3, #31
 800892a:	d5ea      	bpl.n	8008902 <_printf_float+0x19a>
 800892c:	1c4b      	adds	r3, r1, #1
 800892e:	e7e7      	b.n	8008900 <_printf_float+0x198>
 8008930:	2900      	cmp	r1, #0
 8008932:	bfcc      	ite	gt
 8008934:	2201      	movgt	r2, #1
 8008936:	f1c1 0202 	rsble	r2, r1, #2
 800893a:	4413      	add	r3, r2
 800893c:	e7e0      	b.n	8008900 <_printf_float+0x198>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	055a      	lsls	r2, r3, #21
 8008942:	d407      	bmi.n	8008954 <_printf_float+0x1ec>
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	4642      	mov	r2, r8
 8008948:	4631      	mov	r1, r6
 800894a:	4628      	mov	r0, r5
 800894c:	47b8      	blx	r7
 800894e:	3001      	adds	r0, #1
 8008950:	d12b      	bne.n	80089aa <_printf_float+0x242>
 8008952:	e764      	b.n	800881e <_printf_float+0xb6>
 8008954:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008958:	f240 80dc 	bls.w	8008b14 <_printf_float+0x3ac>
 800895c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008960:	2200      	movs	r2, #0
 8008962:	2300      	movs	r3, #0
 8008964:	f7f8 f820 	bl	80009a8 <__aeabi_dcmpeq>
 8008968:	2800      	cmp	r0, #0
 800896a:	d033      	beq.n	80089d4 <_printf_float+0x26c>
 800896c:	2301      	movs	r3, #1
 800896e:	4631      	mov	r1, r6
 8008970:	4628      	mov	r0, r5
 8008972:	4a35      	ldr	r2, [pc, #212]	@ (8008a48 <_printf_float+0x2e0>)
 8008974:	47b8      	blx	r7
 8008976:	3001      	adds	r0, #1
 8008978:	f43f af51 	beq.w	800881e <_printf_float+0xb6>
 800897c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008980:	4543      	cmp	r3, r8
 8008982:	db02      	blt.n	800898a <_printf_float+0x222>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	07d8      	lsls	r0, r3, #31
 8008988:	d50f      	bpl.n	80089aa <_printf_float+0x242>
 800898a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800898e:	4631      	mov	r1, r6
 8008990:	4628      	mov	r0, r5
 8008992:	47b8      	blx	r7
 8008994:	3001      	adds	r0, #1
 8008996:	f43f af42 	beq.w	800881e <_printf_float+0xb6>
 800899a:	f04f 0900 	mov.w	r9, #0
 800899e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80089a2:	f104 0a1a 	add.w	sl, r4, #26
 80089a6:	45c8      	cmp	r8, r9
 80089a8:	dc09      	bgt.n	80089be <_printf_float+0x256>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	079b      	lsls	r3, r3, #30
 80089ae:	f100 8102 	bmi.w	8008bb6 <_printf_float+0x44e>
 80089b2:	68e0      	ldr	r0, [r4, #12]
 80089b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089b6:	4298      	cmp	r0, r3
 80089b8:	bfb8      	it	lt
 80089ba:	4618      	movlt	r0, r3
 80089bc:	e731      	b.n	8008822 <_printf_float+0xba>
 80089be:	2301      	movs	r3, #1
 80089c0:	4652      	mov	r2, sl
 80089c2:	4631      	mov	r1, r6
 80089c4:	4628      	mov	r0, r5
 80089c6:	47b8      	blx	r7
 80089c8:	3001      	adds	r0, #1
 80089ca:	f43f af28 	beq.w	800881e <_printf_float+0xb6>
 80089ce:	f109 0901 	add.w	r9, r9, #1
 80089d2:	e7e8      	b.n	80089a6 <_printf_float+0x23e>
 80089d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	dc38      	bgt.n	8008a4c <_printf_float+0x2e4>
 80089da:	2301      	movs	r3, #1
 80089dc:	4631      	mov	r1, r6
 80089de:	4628      	mov	r0, r5
 80089e0:	4a19      	ldr	r2, [pc, #100]	@ (8008a48 <_printf_float+0x2e0>)
 80089e2:	47b8      	blx	r7
 80089e4:	3001      	adds	r0, #1
 80089e6:	f43f af1a 	beq.w	800881e <_printf_float+0xb6>
 80089ea:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80089ee:	ea59 0303 	orrs.w	r3, r9, r3
 80089f2:	d102      	bne.n	80089fa <_printf_float+0x292>
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	07d9      	lsls	r1, r3, #31
 80089f8:	d5d7      	bpl.n	80089aa <_printf_float+0x242>
 80089fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089fe:	4631      	mov	r1, r6
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b8      	blx	r7
 8008a04:	3001      	adds	r0, #1
 8008a06:	f43f af0a 	beq.w	800881e <_printf_float+0xb6>
 8008a0a:	f04f 0a00 	mov.w	sl, #0
 8008a0e:	f104 0b1a 	add.w	fp, r4, #26
 8008a12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a14:	425b      	negs	r3, r3
 8008a16:	4553      	cmp	r3, sl
 8008a18:	dc01      	bgt.n	8008a1e <_printf_float+0x2b6>
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	e793      	b.n	8008946 <_printf_float+0x1de>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	465a      	mov	r2, fp
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f aef8 	beq.w	800881e <_printf_float+0xb6>
 8008a2e:	f10a 0a01 	add.w	sl, sl, #1
 8008a32:	e7ee      	b.n	8008a12 <_printf_float+0x2aa>
 8008a34:	7fefffff 	.word	0x7fefffff
 8008a38:	0800bbde 	.word	0x0800bbde
 8008a3c:	0800bbda 	.word	0x0800bbda
 8008a40:	0800bbe6 	.word	0x0800bbe6
 8008a44:	0800bbe2 	.word	0x0800bbe2
 8008a48:	0800bbea 	.word	0x0800bbea
 8008a4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a4e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008a52:	4553      	cmp	r3, sl
 8008a54:	bfa8      	it	ge
 8008a56:	4653      	movge	r3, sl
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	4699      	mov	r9, r3
 8008a5c:	dc36      	bgt.n	8008acc <_printf_float+0x364>
 8008a5e:	f04f 0b00 	mov.w	fp, #0
 8008a62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a66:	f104 021a 	add.w	r2, r4, #26
 8008a6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a6e:	eba3 0309 	sub.w	r3, r3, r9
 8008a72:	455b      	cmp	r3, fp
 8008a74:	dc31      	bgt.n	8008ada <_printf_float+0x372>
 8008a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a78:	459a      	cmp	sl, r3
 8008a7a:	dc3a      	bgt.n	8008af2 <_printf_float+0x38a>
 8008a7c:	6823      	ldr	r3, [r4, #0]
 8008a7e:	07da      	lsls	r2, r3, #31
 8008a80:	d437      	bmi.n	8008af2 <_printf_float+0x38a>
 8008a82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a84:	ebaa 0903 	sub.w	r9, sl, r3
 8008a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a8a:	ebaa 0303 	sub.w	r3, sl, r3
 8008a8e:	4599      	cmp	r9, r3
 8008a90:	bfa8      	it	ge
 8008a92:	4699      	movge	r9, r3
 8008a94:	f1b9 0f00 	cmp.w	r9, #0
 8008a98:	dc33      	bgt.n	8008b02 <_printf_float+0x39a>
 8008a9a:	f04f 0800 	mov.w	r8, #0
 8008a9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008aa2:	f104 0b1a 	add.w	fp, r4, #26
 8008aa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008aa8:	ebaa 0303 	sub.w	r3, sl, r3
 8008aac:	eba3 0309 	sub.w	r3, r3, r9
 8008ab0:	4543      	cmp	r3, r8
 8008ab2:	f77f af7a 	ble.w	80089aa <_printf_float+0x242>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	465a      	mov	r2, fp
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	f43f aeac 	beq.w	800881e <_printf_float+0xb6>
 8008ac6:	f108 0801 	add.w	r8, r8, #1
 8008aca:	e7ec      	b.n	8008aa6 <_printf_float+0x33e>
 8008acc:	4642      	mov	r2, r8
 8008ace:	4631      	mov	r1, r6
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	47b8      	blx	r7
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d1c2      	bne.n	8008a5e <_printf_float+0x2f6>
 8008ad8:	e6a1      	b.n	800881e <_printf_float+0xb6>
 8008ada:	2301      	movs	r3, #1
 8008adc:	4631      	mov	r1, r6
 8008ade:	4628      	mov	r0, r5
 8008ae0:	920a      	str	r2, [sp, #40]	@ 0x28
 8008ae2:	47b8      	blx	r7
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	f43f ae9a 	beq.w	800881e <_printf_float+0xb6>
 8008aea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008aec:	f10b 0b01 	add.w	fp, fp, #1
 8008af0:	e7bb      	b.n	8008a6a <_printf_float+0x302>
 8008af2:	4631      	mov	r1, r6
 8008af4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b8      	blx	r7
 8008afc:	3001      	adds	r0, #1
 8008afe:	d1c0      	bne.n	8008a82 <_printf_float+0x31a>
 8008b00:	e68d      	b.n	800881e <_printf_float+0xb6>
 8008b02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b04:	464b      	mov	r3, r9
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	4442      	add	r2, r8
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d1c3      	bne.n	8008a9a <_printf_float+0x332>
 8008b12:	e684      	b.n	800881e <_printf_float+0xb6>
 8008b14:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008b18:	f1ba 0f01 	cmp.w	sl, #1
 8008b1c:	dc01      	bgt.n	8008b22 <_printf_float+0x3ba>
 8008b1e:	07db      	lsls	r3, r3, #31
 8008b20:	d536      	bpl.n	8008b90 <_printf_float+0x428>
 8008b22:	2301      	movs	r3, #1
 8008b24:	4642      	mov	r2, r8
 8008b26:	4631      	mov	r1, r6
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b8      	blx	r7
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	f43f ae76 	beq.w	800881e <_printf_float+0xb6>
 8008b32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b36:	4631      	mov	r1, r6
 8008b38:	4628      	mov	r0, r5
 8008b3a:	47b8      	blx	r7
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	f43f ae6e 	beq.w	800881e <_printf_float+0xb6>
 8008b42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b46:	2200      	movs	r2, #0
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008b4e:	f7f7 ff2b 	bl	80009a8 <__aeabi_dcmpeq>
 8008b52:	b9c0      	cbnz	r0, 8008b86 <_printf_float+0x41e>
 8008b54:	4653      	mov	r3, sl
 8008b56:	f108 0201 	add.w	r2, r8, #1
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	47b8      	blx	r7
 8008b60:	3001      	adds	r0, #1
 8008b62:	d10c      	bne.n	8008b7e <_printf_float+0x416>
 8008b64:	e65b      	b.n	800881e <_printf_float+0xb6>
 8008b66:	2301      	movs	r3, #1
 8008b68:	465a      	mov	r2, fp
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b8      	blx	r7
 8008b70:	3001      	adds	r0, #1
 8008b72:	f43f ae54 	beq.w	800881e <_printf_float+0xb6>
 8008b76:	f108 0801 	add.w	r8, r8, #1
 8008b7a:	45d0      	cmp	r8, sl
 8008b7c:	dbf3      	blt.n	8008b66 <_printf_float+0x3fe>
 8008b7e:	464b      	mov	r3, r9
 8008b80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b84:	e6e0      	b.n	8008948 <_printf_float+0x1e0>
 8008b86:	f04f 0800 	mov.w	r8, #0
 8008b8a:	f104 0b1a 	add.w	fp, r4, #26
 8008b8e:	e7f4      	b.n	8008b7a <_printf_float+0x412>
 8008b90:	2301      	movs	r3, #1
 8008b92:	4642      	mov	r2, r8
 8008b94:	e7e1      	b.n	8008b5a <_printf_float+0x3f2>
 8008b96:	2301      	movs	r3, #1
 8008b98:	464a      	mov	r2, r9
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	47b8      	blx	r7
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	f43f ae3c 	beq.w	800881e <_printf_float+0xb6>
 8008ba6:	f108 0801 	add.w	r8, r8, #1
 8008baa:	68e3      	ldr	r3, [r4, #12]
 8008bac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008bae:	1a5b      	subs	r3, r3, r1
 8008bb0:	4543      	cmp	r3, r8
 8008bb2:	dcf0      	bgt.n	8008b96 <_printf_float+0x42e>
 8008bb4:	e6fd      	b.n	80089b2 <_printf_float+0x24a>
 8008bb6:	f04f 0800 	mov.w	r8, #0
 8008bba:	f104 0919 	add.w	r9, r4, #25
 8008bbe:	e7f4      	b.n	8008baa <_printf_float+0x442>

08008bc0 <_printf_common>:
 8008bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	4616      	mov	r6, r2
 8008bc6:	4698      	mov	r8, r3
 8008bc8:	688a      	ldr	r2, [r1, #8]
 8008bca:	690b      	ldr	r3, [r1, #16]
 8008bcc:	4607      	mov	r7, r0
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	bfb8      	it	lt
 8008bd2:	4613      	movlt	r3, r2
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008bda:	460c      	mov	r4, r1
 8008bdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008be0:	b10a      	cbz	r2, 8008be6 <_printf_common+0x26>
 8008be2:	3301      	adds	r3, #1
 8008be4:	6033      	str	r3, [r6, #0]
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	0699      	lsls	r1, r3, #26
 8008bea:	bf42      	ittt	mi
 8008bec:	6833      	ldrmi	r3, [r6, #0]
 8008bee:	3302      	addmi	r3, #2
 8008bf0:	6033      	strmi	r3, [r6, #0]
 8008bf2:	6825      	ldr	r5, [r4, #0]
 8008bf4:	f015 0506 	ands.w	r5, r5, #6
 8008bf8:	d106      	bne.n	8008c08 <_printf_common+0x48>
 8008bfa:	f104 0a19 	add.w	sl, r4, #25
 8008bfe:	68e3      	ldr	r3, [r4, #12]
 8008c00:	6832      	ldr	r2, [r6, #0]
 8008c02:	1a9b      	subs	r3, r3, r2
 8008c04:	42ab      	cmp	r3, r5
 8008c06:	dc2b      	bgt.n	8008c60 <_printf_common+0xa0>
 8008c08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c0c:	6822      	ldr	r2, [r4, #0]
 8008c0e:	3b00      	subs	r3, #0
 8008c10:	bf18      	it	ne
 8008c12:	2301      	movne	r3, #1
 8008c14:	0692      	lsls	r2, r2, #26
 8008c16:	d430      	bmi.n	8008c7a <_printf_common+0xba>
 8008c18:	4641      	mov	r1, r8
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c20:	47c8      	blx	r9
 8008c22:	3001      	adds	r0, #1
 8008c24:	d023      	beq.n	8008c6e <_printf_common+0xae>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	6922      	ldr	r2, [r4, #16]
 8008c2a:	f003 0306 	and.w	r3, r3, #6
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	bf14      	ite	ne
 8008c32:	2500      	movne	r5, #0
 8008c34:	6833      	ldreq	r3, [r6, #0]
 8008c36:	f04f 0600 	mov.w	r6, #0
 8008c3a:	bf08      	it	eq
 8008c3c:	68e5      	ldreq	r5, [r4, #12]
 8008c3e:	f104 041a 	add.w	r4, r4, #26
 8008c42:	bf08      	it	eq
 8008c44:	1aed      	subeq	r5, r5, r3
 8008c46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008c4a:	bf08      	it	eq
 8008c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c50:	4293      	cmp	r3, r2
 8008c52:	bfc4      	itt	gt
 8008c54:	1a9b      	subgt	r3, r3, r2
 8008c56:	18ed      	addgt	r5, r5, r3
 8008c58:	42b5      	cmp	r5, r6
 8008c5a:	d11a      	bne.n	8008c92 <_printf_common+0xd2>
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e008      	b.n	8008c72 <_printf_common+0xb2>
 8008c60:	2301      	movs	r3, #1
 8008c62:	4652      	mov	r2, sl
 8008c64:	4641      	mov	r1, r8
 8008c66:	4638      	mov	r0, r7
 8008c68:	47c8      	blx	r9
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d103      	bne.n	8008c76 <_printf_common+0xb6>
 8008c6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c76:	3501      	adds	r5, #1
 8008c78:	e7c1      	b.n	8008bfe <_printf_common+0x3e>
 8008c7a:	2030      	movs	r0, #48	@ 0x30
 8008c7c:	18e1      	adds	r1, r4, r3
 8008c7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c88:	4422      	add	r2, r4
 8008c8a:	3302      	adds	r3, #2
 8008c8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c90:	e7c2      	b.n	8008c18 <_printf_common+0x58>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4622      	mov	r2, r4
 8008c96:	4641      	mov	r1, r8
 8008c98:	4638      	mov	r0, r7
 8008c9a:	47c8      	blx	r9
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d0e6      	beq.n	8008c6e <_printf_common+0xae>
 8008ca0:	3601      	adds	r6, #1
 8008ca2:	e7d9      	b.n	8008c58 <_printf_common+0x98>

08008ca4 <_printf_i>:
 8008ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	7e0f      	ldrb	r7, [r1, #24]
 8008caa:	4691      	mov	r9, r2
 8008cac:	2f78      	cmp	r7, #120	@ 0x78
 8008cae:	4680      	mov	r8, r0
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	469a      	mov	sl, r3
 8008cb4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008cba:	d807      	bhi.n	8008ccc <_printf_i+0x28>
 8008cbc:	2f62      	cmp	r7, #98	@ 0x62
 8008cbe:	d80a      	bhi.n	8008cd6 <_printf_i+0x32>
 8008cc0:	2f00      	cmp	r7, #0
 8008cc2:	f000 80d1 	beq.w	8008e68 <_printf_i+0x1c4>
 8008cc6:	2f58      	cmp	r7, #88	@ 0x58
 8008cc8:	f000 80b8 	beq.w	8008e3c <_printf_i+0x198>
 8008ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008cd4:	e03a      	b.n	8008d4c <_printf_i+0xa8>
 8008cd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008cda:	2b15      	cmp	r3, #21
 8008cdc:	d8f6      	bhi.n	8008ccc <_printf_i+0x28>
 8008cde:	a101      	add	r1, pc, #4	@ (adr r1, 8008ce4 <_printf_i+0x40>)
 8008ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ce4:	08008d3d 	.word	0x08008d3d
 8008ce8:	08008d51 	.word	0x08008d51
 8008cec:	08008ccd 	.word	0x08008ccd
 8008cf0:	08008ccd 	.word	0x08008ccd
 8008cf4:	08008ccd 	.word	0x08008ccd
 8008cf8:	08008ccd 	.word	0x08008ccd
 8008cfc:	08008d51 	.word	0x08008d51
 8008d00:	08008ccd 	.word	0x08008ccd
 8008d04:	08008ccd 	.word	0x08008ccd
 8008d08:	08008ccd 	.word	0x08008ccd
 8008d0c:	08008ccd 	.word	0x08008ccd
 8008d10:	08008e4f 	.word	0x08008e4f
 8008d14:	08008d7b 	.word	0x08008d7b
 8008d18:	08008e09 	.word	0x08008e09
 8008d1c:	08008ccd 	.word	0x08008ccd
 8008d20:	08008ccd 	.word	0x08008ccd
 8008d24:	08008e71 	.word	0x08008e71
 8008d28:	08008ccd 	.word	0x08008ccd
 8008d2c:	08008d7b 	.word	0x08008d7b
 8008d30:	08008ccd 	.word	0x08008ccd
 8008d34:	08008ccd 	.word	0x08008ccd
 8008d38:	08008e11 	.word	0x08008e11
 8008d3c:	6833      	ldr	r3, [r6, #0]
 8008d3e:	1d1a      	adds	r2, r3, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6032      	str	r2, [r6, #0]
 8008d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e09c      	b.n	8008e8a <_printf_i+0x1e6>
 8008d50:	6833      	ldr	r3, [r6, #0]
 8008d52:	6820      	ldr	r0, [r4, #0]
 8008d54:	1d19      	adds	r1, r3, #4
 8008d56:	6031      	str	r1, [r6, #0]
 8008d58:	0606      	lsls	r6, r0, #24
 8008d5a:	d501      	bpl.n	8008d60 <_printf_i+0xbc>
 8008d5c:	681d      	ldr	r5, [r3, #0]
 8008d5e:	e003      	b.n	8008d68 <_printf_i+0xc4>
 8008d60:	0645      	lsls	r5, r0, #25
 8008d62:	d5fb      	bpl.n	8008d5c <_printf_i+0xb8>
 8008d64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	da03      	bge.n	8008d74 <_printf_i+0xd0>
 8008d6c:	232d      	movs	r3, #45	@ 0x2d
 8008d6e:	426d      	negs	r5, r5
 8008d70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d74:	230a      	movs	r3, #10
 8008d76:	4858      	ldr	r0, [pc, #352]	@ (8008ed8 <_printf_i+0x234>)
 8008d78:	e011      	b.n	8008d9e <_printf_i+0xfa>
 8008d7a:	6821      	ldr	r1, [r4, #0]
 8008d7c:	6833      	ldr	r3, [r6, #0]
 8008d7e:	0608      	lsls	r0, r1, #24
 8008d80:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d84:	d402      	bmi.n	8008d8c <_printf_i+0xe8>
 8008d86:	0649      	lsls	r1, r1, #25
 8008d88:	bf48      	it	mi
 8008d8a:	b2ad      	uxthmi	r5, r5
 8008d8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d8e:	6033      	str	r3, [r6, #0]
 8008d90:	bf14      	ite	ne
 8008d92:	230a      	movne	r3, #10
 8008d94:	2308      	moveq	r3, #8
 8008d96:	4850      	ldr	r0, [pc, #320]	@ (8008ed8 <_printf_i+0x234>)
 8008d98:	2100      	movs	r1, #0
 8008d9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d9e:	6866      	ldr	r6, [r4, #4]
 8008da0:	2e00      	cmp	r6, #0
 8008da2:	60a6      	str	r6, [r4, #8]
 8008da4:	db05      	blt.n	8008db2 <_printf_i+0x10e>
 8008da6:	6821      	ldr	r1, [r4, #0]
 8008da8:	432e      	orrs	r6, r5
 8008daa:	f021 0104 	bic.w	r1, r1, #4
 8008dae:	6021      	str	r1, [r4, #0]
 8008db0:	d04b      	beq.n	8008e4a <_printf_i+0x1a6>
 8008db2:	4616      	mov	r6, r2
 8008db4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008db8:	fb03 5711 	mls	r7, r3, r1, r5
 8008dbc:	5dc7      	ldrb	r7, [r0, r7]
 8008dbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dc2:	462f      	mov	r7, r5
 8008dc4:	42bb      	cmp	r3, r7
 8008dc6:	460d      	mov	r5, r1
 8008dc8:	d9f4      	bls.n	8008db4 <_printf_i+0x110>
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d10b      	bne.n	8008de6 <_printf_i+0x142>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	07df      	lsls	r7, r3, #31
 8008dd2:	d508      	bpl.n	8008de6 <_printf_i+0x142>
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	6861      	ldr	r1, [r4, #4]
 8008dd8:	4299      	cmp	r1, r3
 8008dda:	bfde      	ittt	le
 8008ddc:	2330      	movle	r3, #48	@ 0x30
 8008dde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008de2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008de6:	1b92      	subs	r2, r2, r6
 8008de8:	6122      	str	r2, [r4, #16]
 8008dea:	464b      	mov	r3, r9
 8008dec:	4621      	mov	r1, r4
 8008dee:	4640      	mov	r0, r8
 8008df0:	f8cd a000 	str.w	sl, [sp]
 8008df4:	aa03      	add	r2, sp, #12
 8008df6:	f7ff fee3 	bl	8008bc0 <_printf_common>
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d14a      	bne.n	8008e94 <_printf_i+0x1f0>
 8008dfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e02:	b004      	add	sp, #16
 8008e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	f043 0320 	orr.w	r3, r3, #32
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	2778      	movs	r7, #120	@ 0x78
 8008e12:	4832      	ldr	r0, [pc, #200]	@ (8008edc <_printf_i+0x238>)
 8008e14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	6831      	ldr	r1, [r6, #0]
 8008e1c:	061f      	lsls	r7, r3, #24
 8008e1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e22:	d402      	bmi.n	8008e2a <_printf_i+0x186>
 8008e24:	065f      	lsls	r7, r3, #25
 8008e26:	bf48      	it	mi
 8008e28:	b2ad      	uxthmi	r5, r5
 8008e2a:	6031      	str	r1, [r6, #0]
 8008e2c:	07d9      	lsls	r1, r3, #31
 8008e2e:	bf44      	itt	mi
 8008e30:	f043 0320 	orrmi.w	r3, r3, #32
 8008e34:	6023      	strmi	r3, [r4, #0]
 8008e36:	b11d      	cbz	r5, 8008e40 <_printf_i+0x19c>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	e7ad      	b.n	8008d98 <_printf_i+0xf4>
 8008e3c:	4826      	ldr	r0, [pc, #152]	@ (8008ed8 <_printf_i+0x234>)
 8008e3e:	e7e9      	b.n	8008e14 <_printf_i+0x170>
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	f023 0320 	bic.w	r3, r3, #32
 8008e46:	6023      	str	r3, [r4, #0]
 8008e48:	e7f6      	b.n	8008e38 <_printf_i+0x194>
 8008e4a:	4616      	mov	r6, r2
 8008e4c:	e7bd      	b.n	8008dca <_printf_i+0x126>
 8008e4e:	6833      	ldr	r3, [r6, #0]
 8008e50:	6825      	ldr	r5, [r4, #0]
 8008e52:	1d18      	adds	r0, r3, #4
 8008e54:	6961      	ldr	r1, [r4, #20]
 8008e56:	6030      	str	r0, [r6, #0]
 8008e58:	062e      	lsls	r6, r5, #24
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	d501      	bpl.n	8008e62 <_printf_i+0x1be>
 8008e5e:	6019      	str	r1, [r3, #0]
 8008e60:	e002      	b.n	8008e68 <_printf_i+0x1c4>
 8008e62:	0668      	lsls	r0, r5, #25
 8008e64:	d5fb      	bpl.n	8008e5e <_printf_i+0x1ba>
 8008e66:	8019      	strh	r1, [r3, #0]
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4616      	mov	r6, r2
 8008e6c:	6123      	str	r3, [r4, #16]
 8008e6e:	e7bc      	b.n	8008dea <_printf_i+0x146>
 8008e70:	6833      	ldr	r3, [r6, #0]
 8008e72:	2100      	movs	r1, #0
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	6032      	str	r2, [r6, #0]
 8008e78:	681e      	ldr	r6, [r3, #0]
 8008e7a:	6862      	ldr	r2, [r4, #4]
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f000 f9d6 	bl	800922e <memchr>
 8008e82:	b108      	cbz	r0, 8008e88 <_printf_i+0x1e4>
 8008e84:	1b80      	subs	r0, r0, r6
 8008e86:	6060      	str	r0, [r4, #4]
 8008e88:	6863      	ldr	r3, [r4, #4]
 8008e8a:	6123      	str	r3, [r4, #16]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e92:	e7aa      	b.n	8008dea <_printf_i+0x146>
 8008e94:	4632      	mov	r2, r6
 8008e96:	4649      	mov	r1, r9
 8008e98:	4640      	mov	r0, r8
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	47d0      	blx	sl
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d0ad      	beq.n	8008dfe <_printf_i+0x15a>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	079b      	lsls	r3, r3, #30
 8008ea6:	d413      	bmi.n	8008ed0 <_printf_i+0x22c>
 8008ea8:	68e0      	ldr	r0, [r4, #12]
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	4298      	cmp	r0, r3
 8008eae:	bfb8      	it	lt
 8008eb0:	4618      	movlt	r0, r3
 8008eb2:	e7a6      	b.n	8008e02 <_printf_i+0x15e>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	4632      	mov	r2, r6
 8008eb8:	4649      	mov	r1, r9
 8008eba:	4640      	mov	r0, r8
 8008ebc:	47d0      	blx	sl
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d09d      	beq.n	8008dfe <_printf_i+0x15a>
 8008ec2:	3501      	adds	r5, #1
 8008ec4:	68e3      	ldr	r3, [r4, #12]
 8008ec6:	9903      	ldr	r1, [sp, #12]
 8008ec8:	1a5b      	subs	r3, r3, r1
 8008eca:	42ab      	cmp	r3, r5
 8008ecc:	dcf2      	bgt.n	8008eb4 <_printf_i+0x210>
 8008ece:	e7eb      	b.n	8008ea8 <_printf_i+0x204>
 8008ed0:	2500      	movs	r5, #0
 8008ed2:	f104 0619 	add.w	r6, r4, #25
 8008ed6:	e7f5      	b.n	8008ec4 <_printf_i+0x220>
 8008ed8:	0800bbec 	.word	0x0800bbec
 8008edc:	0800bbfd 	.word	0x0800bbfd

08008ee0 <std>:
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8008eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eee:	6083      	str	r3, [r0, #8]
 8008ef0:	8181      	strh	r1, [r0, #12]
 8008ef2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ef4:	81c2      	strh	r2, [r0, #14]
 8008ef6:	6183      	str	r3, [r0, #24]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	2208      	movs	r2, #8
 8008efc:	305c      	adds	r0, #92	@ 0x5c
 8008efe:	f000 f916 	bl	800912e <memset>
 8008f02:	4b0d      	ldr	r3, [pc, #52]	@ (8008f38 <std+0x58>)
 8008f04:	6224      	str	r4, [r4, #32]
 8008f06:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f08:	4b0c      	ldr	r3, [pc, #48]	@ (8008f3c <std+0x5c>)
 8008f0a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f40 <std+0x60>)
 8008f0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f10:	4b0c      	ldr	r3, [pc, #48]	@ (8008f44 <std+0x64>)
 8008f12:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f14:	4b0c      	ldr	r3, [pc, #48]	@ (8008f48 <std+0x68>)
 8008f16:	429c      	cmp	r4, r3
 8008f18:	d006      	beq.n	8008f28 <std+0x48>
 8008f1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f1e:	4294      	cmp	r4, r2
 8008f20:	d002      	beq.n	8008f28 <std+0x48>
 8008f22:	33d0      	adds	r3, #208	@ 0xd0
 8008f24:	429c      	cmp	r4, r3
 8008f26:	d105      	bne.n	8008f34 <std+0x54>
 8008f28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f30:	f000 b97a 	b.w	8009228 <__retarget_lock_init_recursive>
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	bf00      	nop
 8008f38:	080090a9 	.word	0x080090a9
 8008f3c:	080090cb 	.word	0x080090cb
 8008f40:	08009103 	.word	0x08009103
 8008f44:	08009127 	.word	0x08009127
 8008f48:	200008c0 	.word	0x200008c0

08008f4c <stdio_exit_handler>:
 8008f4c:	4a02      	ldr	r2, [pc, #8]	@ (8008f58 <stdio_exit_handler+0xc>)
 8008f4e:	4903      	ldr	r1, [pc, #12]	@ (8008f5c <stdio_exit_handler+0x10>)
 8008f50:	4803      	ldr	r0, [pc, #12]	@ (8008f60 <stdio_exit_handler+0x14>)
 8008f52:	f000 b869 	b.w	8009028 <_fwalk_sglue>
 8008f56:	bf00      	nop
 8008f58:	20000030 	.word	0x20000030
 8008f5c:	0800aba9 	.word	0x0800aba9
 8008f60:	20000040 	.word	0x20000040

08008f64 <cleanup_stdio>:
 8008f64:	6841      	ldr	r1, [r0, #4]
 8008f66:	4b0c      	ldr	r3, [pc, #48]	@ (8008f98 <cleanup_stdio+0x34>)
 8008f68:	b510      	push	{r4, lr}
 8008f6a:	4299      	cmp	r1, r3
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	d001      	beq.n	8008f74 <cleanup_stdio+0x10>
 8008f70:	f001 fe1a 	bl	800aba8 <_fflush_r>
 8008f74:	68a1      	ldr	r1, [r4, #8]
 8008f76:	4b09      	ldr	r3, [pc, #36]	@ (8008f9c <cleanup_stdio+0x38>)
 8008f78:	4299      	cmp	r1, r3
 8008f7a:	d002      	beq.n	8008f82 <cleanup_stdio+0x1e>
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f001 fe13 	bl	800aba8 <_fflush_r>
 8008f82:	68e1      	ldr	r1, [r4, #12]
 8008f84:	4b06      	ldr	r3, [pc, #24]	@ (8008fa0 <cleanup_stdio+0x3c>)
 8008f86:	4299      	cmp	r1, r3
 8008f88:	d004      	beq.n	8008f94 <cleanup_stdio+0x30>
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f90:	f001 be0a 	b.w	800aba8 <_fflush_r>
 8008f94:	bd10      	pop	{r4, pc}
 8008f96:	bf00      	nop
 8008f98:	200008c0 	.word	0x200008c0
 8008f9c:	20000928 	.word	0x20000928
 8008fa0:	20000990 	.word	0x20000990

08008fa4 <global_stdio_init.part.0>:
 8008fa4:	b510      	push	{r4, lr}
 8008fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd4 <global_stdio_init.part.0+0x30>)
 8008fa8:	4c0b      	ldr	r4, [pc, #44]	@ (8008fd8 <global_stdio_init.part.0+0x34>)
 8008faa:	4a0c      	ldr	r2, [pc, #48]	@ (8008fdc <global_stdio_init.part.0+0x38>)
 8008fac:	4620      	mov	r0, r4
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	2104      	movs	r1, #4
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f7ff ff94 	bl	8008ee0 <std>
 8008fb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	2109      	movs	r1, #9
 8008fc0:	f7ff ff8e 	bl	8008ee0 <std>
 8008fc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008fc8:	2202      	movs	r2, #2
 8008fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fce:	2112      	movs	r1, #18
 8008fd0:	f7ff bf86 	b.w	8008ee0 <std>
 8008fd4:	200009f8 	.word	0x200009f8
 8008fd8:	200008c0 	.word	0x200008c0
 8008fdc:	08008f4d 	.word	0x08008f4d

08008fe0 <__sfp_lock_acquire>:
 8008fe0:	4801      	ldr	r0, [pc, #4]	@ (8008fe8 <__sfp_lock_acquire+0x8>)
 8008fe2:	f000 b922 	b.w	800922a <__retarget_lock_acquire_recursive>
 8008fe6:	bf00      	nop
 8008fe8:	20000a01 	.word	0x20000a01

08008fec <__sfp_lock_release>:
 8008fec:	4801      	ldr	r0, [pc, #4]	@ (8008ff4 <__sfp_lock_release+0x8>)
 8008fee:	f000 b91d 	b.w	800922c <__retarget_lock_release_recursive>
 8008ff2:	bf00      	nop
 8008ff4:	20000a01 	.word	0x20000a01

08008ff8 <__sinit>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	f7ff fff0 	bl	8008fe0 <__sfp_lock_acquire>
 8009000:	6a23      	ldr	r3, [r4, #32]
 8009002:	b11b      	cbz	r3, 800900c <__sinit+0x14>
 8009004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009008:	f7ff bff0 	b.w	8008fec <__sfp_lock_release>
 800900c:	4b04      	ldr	r3, [pc, #16]	@ (8009020 <__sinit+0x28>)
 800900e:	6223      	str	r3, [r4, #32]
 8009010:	4b04      	ldr	r3, [pc, #16]	@ (8009024 <__sinit+0x2c>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1f5      	bne.n	8009004 <__sinit+0xc>
 8009018:	f7ff ffc4 	bl	8008fa4 <global_stdio_init.part.0>
 800901c:	e7f2      	b.n	8009004 <__sinit+0xc>
 800901e:	bf00      	nop
 8009020:	08008f65 	.word	0x08008f65
 8009024:	200009f8 	.word	0x200009f8

08009028 <_fwalk_sglue>:
 8009028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800902c:	4607      	mov	r7, r0
 800902e:	4688      	mov	r8, r1
 8009030:	4614      	mov	r4, r2
 8009032:	2600      	movs	r6, #0
 8009034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009038:	f1b9 0901 	subs.w	r9, r9, #1
 800903c:	d505      	bpl.n	800904a <_fwalk_sglue+0x22>
 800903e:	6824      	ldr	r4, [r4, #0]
 8009040:	2c00      	cmp	r4, #0
 8009042:	d1f7      	bne.n	8009034 <_fwalk_sglue+0xc>
 8009044:	4630      	mov	r0, r6
 8009046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800904a:	89ab      	ldrh	r3, [r5, #12]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d907      	bls.n	8009060 <_fwalk_sglue+0x38>
 8009050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009054:	3301      	adds	r3, #1
 8009056:	d003      	beq.n	8009060 <_fwalk_sglue+0x38>
 8009058:	4629      	mov	r1, r5
 800905a:	4638      	mov	r0, r7
 800905c:	47c0      	blx	r8
 800905e:	4306      	orrs	r6, r0
 8009060:	3568      	adds	r5, #104	@ 0x68
 8009062:	e7e9      	b.n	8009038 <_fwalk_sglue+0x10>

08009064 <siprintf>:
 8009064:	b40e      	push	{r1, r2, r3}
 8009066:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800906a:	b510      	push	{r4, lr}
 800906c:	2400      	movs	r4, #0
 800906e:	b09d      	sub	sp, #116	@ 0x74
 8009070:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009072:	9002      	str	r0, [sp, #8]
 8009074:	9006      	str	r0, [sp, #24]
 8009076:	9107      	str	r1, [sp, #28]
 8009078:	9104      	str	r1, [sp, #16]
 800907a:	4809      	ldr	r0, [pc, #36]	@ (80090a0 <siprintf+0x3c>)
 800907c:	4909      	ldr	r1, [pc, #36]	@ (80090a4 <siprintf+0x40>)
 800907e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009082:	9105      	str	r1, [sp, #20]
 8009084:	6800      	ldr	r0, [r0, #0]
 8009086:	a902      	add	r1, sp, #8
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800908c:	f001 fc10 	bl	800a8b0 <_svfiprintf_r>
 8009090:	9b02      	ldr	r3, [sp, #8]
 8009092:	701c      	strb	r4, [r3, #0]
 8009094:	b01d      	add	sp, #116	@ 0x74
 8009096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800909a:	b003      	add	sp, #12
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	2000003c 	.word	0x2000003c
 80090a4:	ffff0208 	.word	0xffff0208

080090a8 <__sread>:
 80090a8:	b510      	push	{r4, lr}
 80090aa:	460c      	mov	r4, r1
 80090ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b0:	f000 f86c 	bl	800918c <_read_r>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	bfab      	itete	ge
 80090b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090ba:	89a3      	ldrhlt	r3, [r4, #12]
 80090bc:	181b      	addge	r3, r3, r0
 80090be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090c2:	bfac      	ite	ge
 80090c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090c6:	81a3      	strhlt	r3, [r4, #12]
 80090c8:	bd10      	pop	{r4, pc}

080090ca <__swrite>:
 80090ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ce:	461f      	mov	r7, r3
 80090d0:	898b      	ldrh	r3, [r1, #12]
 80090d2:	4605      	mov	r5, r0
 80090d4:	05db      	lsls	r3, r3, #23
 80090d6:	460c      	mov	r4, r1
 80090d8:	4616      	mov	r6, r2
 80090da:	d505      	bpl.n	80090e8 <__swrite+0x1e>
 80090dc:	2302      	movs	r3, #2
 80090de:	2200      	movs	r2, #0
 80090e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e4:	f000 f840 	bl	8009168 <_lseek_r>
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	4632      	mov	r2, r6
 80090ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090f0:	81a3      	strh	r3, [r4, #12]
 80090f2:	4628      	mov	r0, r5
 80090f4:	463b      	mov	r3, r7
 80090f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090fe:	f000 b857 	b.w	80091b0 <_write_r>

08009102 <__sseek>:
 8009102:	b510      	push	{r4, lr}
 8009104:	460c      	mov	r4, r1
 8009106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910a:	f000 f82d 	bl	8009168 <_lseek_r>
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	bf15      	itete	ne
 8009114:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009116:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800911a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800911e:	81a3      	strheq	r3, [r4, #12]
 8009120:	bf18      	it	ne
 8009122:	81a3      	strhne	r3, [r4, #12]
 8009124:	bd10      	pop	{r4, pc}

08009126 <__sclose>:
 8009126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912a:	f000 b80d 	b.w	8009148 <_close_r>

0800912e <memset>:
 800912e:	4603      	mov	r3, r0
 8009130:	4402      	add	r2, r0
 8009132:	4293      	cmp	r3, r2
 8009134:	d100      	bne.n	8009138 <memset+0xa>
 8009136:	4770      	bx	lr
 8009138:	f803 1b01 	strb.w	r1, [r3], #1
 800913c:	e7f9      	b.n	8009132 <memset+0x4>
	...

08009140 <_localeconv_r>:
 8009140:	4800      	ldr	r0, [pc, #0]	@ (8009144 <_localeconv_r+0x4>)
 8009142:	4770      	bx	lr
 8009144:	2000017c 	.word	0x2000017c

08009148 <_close_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	2300      	movs	r3, #0
 800914c:	4d05      	ldr	r5, [pc, #20]	@ (8009164 <_close_r+0x1c>)
 800914e:	4604      	mov	r4, r0
 8009150:	4608      	mov	r0, r1
 8009152:	602b      	str	r3, [r5, #0]
 8009154:	f7fa f8c3 	bl	80032de <_close>
 8009158:	1c43      	adds	r3, r0, #1
 800915a:	d102      	bne.n	8009162 <_close_r+0x1a>
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	b103      	cbz	r3, 8009162 <_close_r+0x1a>
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	bd38      	pop	{r3, r4, r5, pc}
 8009164:	200009fc 	.word	0x200009fc

08009168 <_lseek_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4604      	mov	r4, r0
 800916c:	4608      	mov	r0, r1
 800916e:	4611      	mov	r1, r2
 8009170:	2200      	movs	r2, #0
 8009172:	4d05      	ldr	r5, [pc, #20]	@ (8009188 <_lseek_r+0x20>)
 8009174:	602a      	str	r2, [r5, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	f7fa f8d5 	bl	8003326 <_lseek>
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	d102      	bne.n	8009186 <_lseek_r+0x1e>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	b103      	cbz	r3, 8009186 <_lseek_r+0x1e>
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	bd38      	pop	{r3, r4, r5, pc}
 8009188:	200009fc 	.word	0x200009fc

0800918c <_read_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4604      	mov	r4, r0
 8009190:	4608      	mov	r0, r1
 8009192:	4611      	mov	r1, r2
 8009194:	2200      	movs	r2, #0
 8009196:	4d05      	ldr	r5, [pc, #20]	@ (80091ac <_read_r+0x20>)
 8009198:	602a      	str	r2, [r5, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	f7fa f866 	bl	800326c <_read>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_read_r+0x1e>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_read_r+0x1e>
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	200009fc 	.word	0x200009fc

080091b0 <_write_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	2200      	movs	r2, #0
 80091ba:	4d05      	ldr	r5, [pc, #20]	@ (80091d0 <_write_r+0x20>)
 80091bc:	602a      	str	r2, [r5, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	f7fa f871 	bl	80032a6 <_write>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_write_r+0x1e>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_write_r+0x1e>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	200009fc 	.word	0x200009fc

080091d4 <__errno>:
 80091d4:	4b01      	ldr	r3, [pc, #4]	@ (80091dc <__errno+0x8>)
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	2000003c 	.word	0x2000003c

080091e0 <__libc_init_array>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	2600      	movs	r6, #0
 80091e4:	4d0c      	ldr	r5, [pc, #48]	@ (8009218 <__libc_init_array+0x38>)
 80091e6:	4c0d      	ldr	r4, [pc, #52]	@ (800921c <__libc_init_array+0x3c>)
 80091e8:	1b64      	subs	r4, r4, r5
 80091ea:	10a4      	asrs	r4, r4, #2
 80091ec:	42a6      	cmp	r6, r4
 80091ee:	d109      	bne.n	8009204 <__libc_init_array+0x24>
 80091f0:	f002 f876 	bl	800b2e0 <_init>
 80091f4:	2600      	movs	r6, #0
 80091f6:	4d0a      	ldr	r5, [pc, #40]	@ (8009220 <__libc_init_array+0x40>)
 80091f8:	4c0a      	ldr	r4, [pc, #40]	@ (8009224 <__libc_init_array+0x44>)
 80091fa:	1b64      	subs	r4, r4, r5
 80091fc:	10a4      	asrs	r4, r4, #2
 80091fe:	42a6      	cmp	r6, r4
 8009200:	d105      	bne.n	800920e <__libc_init_array+0x2e>
 8009202:	bd70      	pop	{r4, r5, r6, pc}
 8009204:	f855 3b04 	ldr.w	r3, [r5], #4
 8009208:	4798      	blx	r3
 800920a:	3601      	adds	r6, #1
 800920c:	e7ee      	b.n	80091ec <__libc_init_array+0xc>
 800920e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009212:	4798      	blx	r3
 8009214:	3601      	adds	r6, #1
 8009216:	e7f2      	b.n	80091fe <__libc_init_array+0x1e>
 8009218:	0800bf54 	.word	0x0800bf54
 800921c:	0800bf54 	.word	0x0800bf54
 8009220:	0800bf54 	.word	0x0800bf54
 8009224:	0800bf58 	.word	0x0800bf58

08009228 <__retarget_lock_init_recursive>:
 8009228:	4770      	bx	lr

0800922a <__retarget_lock_acquire_recursive>:
 800922a:	4770      	bx	lr

0800922c <__retarget_lock_release_recursive>:
 800922c:	4770      	bx	lr

0800922e <memchr>:
 800922e:	4603      	mov	r3, r0
 8009230:	b510      	push	{r4, lr}
 8009232:	b2c9      	uxtb	r1, r1
 8009234:	4402      	add	r2, r0
 8009236:	4293      	cmp	r3, r2
 8009238:	4618      	mov	r0, r3
 800923a:	d101      	bne.n	8009240 <memchr+0x12>
 800923c:	2000      	movs	r0, #0
 800923e:	e003      	b.n	8009248 <memchr+0x1a>
 8009240:	7804      	ldrb	r4, [r0, #0]
 8009242:	3301      	adds	r3, #1
 8009244:	428c      	cmp	r4, r1
 8009246:	d1f6      	bne.n	8009236 <memchr+0x8>
 8009248:	bd10      	pop	{r4, pc}

0800924a <quorem>:
 800924a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924e:	6903      	ldr	r3, [r0, #16]
 8009250:	690c      	ldr	r4, [r1, #16]
 8009252:	4607      	mov	r7, r0
 8009254:	42a3      	cmp	r3, r4
 8009256:	db7e      	blt.n	8009356 <quorem+0x10c>
 8009258:	3c01      	subs	r4, #1
 800925a:	00a3      	lsls	r3, r4, #2
 800925c:	f100 0514 	add.w	r5, r0, #20
 8009260:	f101 0814 	add.w	r8, r1, #20
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800926a:	9301      	str	r3, [sp, #4]
 800926c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009270:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009274:	3301      	adds	r3, #1
 8009276:	429a      	cmp	r2, r3
 8009278:	fbb2 f6f3 	udiv	r6, r2, r3
 800927c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009280:	d32e      	bcc.n	80092e0 <quorem+0x96>
 8009282:	f04f 0a00 	mov.w	sl, #0
 8009286:	46c4      	mov	ip, r8
 8009288:	46ae      	mov	lr, r5
 800928a:	46d3      	mov	fp, sl
 800928c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009290:	b298      	uxth	r0, r3
 8009292:	fb06 a000 	mla	r0, r6, r0, sl
 8009296:	0c1b      	lsrs	r3, r3, #16
 8009298:	0c02      	lsrs	r2, r0, #16
 800929a:	fb06 2303 	mla	r3, r6, r3, r2
 800929e:	f8de 2000 	ldr.w	r2, [lr]
 80092a2:	b280      	uxth	r0, r0
 80092a4:	b292      	uxth	r2, r2
 80092a6:	1a12      	subs	r2, r2, r0
 80092a8:	445a      	add	r2, fp
 80092aa:	f8de 0000 	ldr.w	r0, [lr]
 80092ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092bc:	b292      	uxth	r2, r2
 80092be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092c2:	45e1      	cmp	r9, ip
 80092c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092c8:	f84e 2b04 	str.w	r2, [lr], #4
 80092cc:	d2de      	bcs.n	800928c <quorem+0x42>
 80092ce:	9b00      	ldr	r3, [sp, #0]
 80092d0:	58eb      	ldr	r3, [r5, r3]
 80092d2:	b92b      	cbnz	r3, 80092e0 <quorem+0x96>
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	3b04      	subs	r3, #4
 80092d8:	429d      	cmp	r5, r3
 80092da:	461a      	mov	r2, r3
 80092dc:	d32f      	bcc.n	800933e <quorem+0xf4>
 80092de:	613c      	str	r4, [r7, #16]
 80092e0:	4638      	mov	r0, r7
 80092e2:	f001 f981 	bl	800a5e8 <__mcmp>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	db25      	blt.n	8009336 <quorem+0xec>
 80092ea:	4629      	mov	r1, r5
 80092ec:	2000      	movs	r0, #0
 80092ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80092f2:	f8d1 c000 	ldr.w	ip, [r1]
 80092f6:	fa1f fe82 	uxth.w	lr, r2
 80092fa:	fa1f f38c 	uxth.w	r3, ip
 80092fe:	eba3 030e 	sub.w	r3, r3, lr
 8009302:	4403      	add	r3, r0
 8009304:	0c12      	lsrs	r2, r2, #16
 8009306:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800930a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800930e:	b29b      	uxth	r3, r3
 8009310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009314:	45c1      	cmp	r9, r8
 8009316:	ea4f 4022 	mov.w	r0, r2, asr #16
 800931a:	f841 3b04 	str.w	r3, [r1], #4
 800931e:	d2e6      	bcs.n	80092ee <quorem+0xa4>
 8009320:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009324:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009328:	b922      	cbnz	r2, 8009334 <quorem+0xea>
 800932a:	3b04      	subs	r3, #4
 800932c:	429d      	cmp	r5, r3
 800932e:	461a      	mov	r2, r3
 8009330:	d30b      	bcc.n	800934a <quorem+0x100>
 8009332:	613c      	str	r4, [r7, #16]
 8009334:	3601      	adds	r6, #1
 8009336:	4630      	mov	r0, r6
 8009338:	b003      	add	sp, #12
 800933a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933e:	6812      	ldr	r2, [r2, #0]
 8009340:	3b04      	subs	r3, #4
 8009342:	2a00      	cmp	r2, #0
 8009344:	d1cb      	bne.n	80092de <quorem+0x94>
 8009346:	3c01      	subs	r4, #1
 8009348:	e7c6      	b.n	80092d8 <quorem+0x8e>
 800934a:	6812      	ldr	r2, [r2, #0]
 800934c:	3b04      	subs	r3, #4
 800934e:	2a00      	cmp	r2, #0
 8009350:	d1ef      	bne.n	8009332 <quorem+0xe8>
 8009352:	3c01      	subs	r4, #1
 8009354:	e7ea      	b.n	800932c <quorem+0xe2>
 8009356:	2000      	movs	r0, #0
 8009358:	e7ee      	b.n	8009338 <quorem+0xee>
 800935a:	0000      	movs	r0, r0
 800935c:	0000      	movs	r0, r0
	...

08009360 <_dtoa_r>:
 8009360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009364:	4614      	mov	r4, r2
 8009366:	461d      	mov	r5, r3
 8009368:	69c7      	ldr	r7, [r0, #28]
 800936a:	b097      	sub	sp, #92	@ 0x5c
 800936c:	4681      	mov	r9, r0
 800936e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009372:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009374:	b97f      	cbnz	r7, 8009396 <_dtoa_r+0x36>
 8009376:	2010      	movs	r0, #16
 8009378:	f000 fe0e 	bl	8009f98 <malloc>
 800937c:	4602      	mov	r2, r0
 800937e:	f8c9 001c 	str.w	r0, [r9, #28]
 8009382:	b920      	cbnz	r0, 800938e <_dtoa_r+0x2e>
 8009384:	21ef      	movs	r1, #239	@ 0xef
 8009386:	4bac      	ldr	r3, [pc, #688]	@ (8009638 <_dtoa_r+0x2d8>)
 8009388:	48ac      	ldr	r0, [pc, #688]	@ (800963c <_dtoa_r+0x2dc>)
 800938a:	f001 fc6d 	bl	800ac68 <__assert_func>
 800938e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009392:	6007      	str	r7, [r0, #0]
 8009394:	60c7      	str	r7, [r0, #12]
 8009396:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800939a:	6819      	ldr	r1, [r3, #0]
 800939c:	b159      	cbz	r1, 80093b6 <_dtoa_r+0x56>
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	2301      	movs	r3, #1
 80093a2:	4093      	lsls	r3, r2
 80093a4:	604a      	str	r2, [r1, #4]
 80093a6:	608b      	str	r3, [r1, #8]
 80093a8:	4648      	mov	r0, r9
 80093aa:	f000 feeb 	bl	800a184 <_Bfree>
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	1e2b      	subs	r3, r5, #0
 80093b8:	bfaf      	iteee	ge
 80093ba:	2300      	movge	r3, #0
 80093bc:	2201      	movlt	r2, #1
 80093be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093c2:	9307      	strlt	r3, [sp, #28]
 80093c4:	bfa8      	it	ge
 80093c6:	6033      	strge	r3, [r6, #0]
 80093c8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80093cc:	4b9c      	ldr	r3, [pc, #624]	@ (8009640 <_dtoa_r+0x2e0>)
 80093ce:	bfb8      	it	lt
 80093d0:	6032      	strlt	r2, [r6, #0]
 80093d2:	ea33 0308 	bics.w	r3, r3, r8
 80093d6:	d112      	bne.n	80093fe <_dtoa_r+0x9e>
 80093d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80093e4:	4323      	orrs	r3, r4
 80093e6:	f000 855e 	beq.w	8009ea6 <_dtoa_r+0xb46>
 80093ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80093ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009644 <_dtoa_r+0x2e4>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 8560 	beq.w	8009eb6 <_dtoa_r+0xb56>
 80093f6:	f10a 0303 	add.w	r3, sl, #3
 80093fa:	f000 bd5a 	b.w	8009eb2 <_dtoa_r+0xb52>
 80093fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009402:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800940a:	2200      	movs	r2, #0
 800940c:	2300      	movs	r3, #0
 800940e:	f7f7 facb 	bl	80009a8 <__aeabi_dcmpeq>
 8009412:	4607      	mov	r7, r0
 8009414:	b158      	cbz	r0, 800942e <_dtoa_r+0xce>
 8009416:	2301      	movs	r3, #1
 8009418:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800941a:	6013      	str	r3, [r2, #0]
 800941c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800941e:	b113      	cbz	r3, 8009426 <_dtoa_r+0xc6>
 8009420:	4b89      	ldr	r3, [pc, #548]	@ (8009648 <_dtoa_r+0x2e8>)
 8009422:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800964c <_dtoa_r+0x2ec>
 800942a:	f000 bd44 	b.w	8009eb6 <_dtoa_r+0xb56>
 800942e:	ab14      	add	r3, sp, #80	@ 0x50
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	ab15      	add	r3, sp, #84	@ 0x54
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	4648      	mov	r0, r9
 8009438:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800943c:	f001 f984 	bl	800a748 <__d2b>
 8009440:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009444:	9003      	str	r0, [sp, #12]
 8009446:	2e00      	cmp	r6, #0
 8009448:	d078      	beq.n	800953c <_dtoa_r+0x1dc>
 800944a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800944e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009450:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009458:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800945c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009460:	9712      	str	r7, [sp, #72]	@ 0x48
 8009462:	4619      	mov	r1, r3
 8009464:	2200      	movs	r2, #0
 8009466:	4b7a      	ldr	r3, [pc, #488]	@ (8009650 <_dtoa_r+0x2f0>)
 8009468:	f7f6 fe7e 	bl	8000168 <__aeabi_dsub>
 800946c:	a36c      	add	r3, pc, #432	@ (adr r3, 8009620 <_dtoa_r+0x2c0>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f7f7 f831 	bl	80004d8 <__aeabi_dmul>
 8009476:	a36c      	add	r3, pc, #432	@ (adr r3, 8009628 <_dtoa_r+0x2c8>)
 8009478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947c:	f7f6 fe76 	bl	800016c <__adddf3>
 8009480:	4604      	mov	r4, r0
 8009482:	4630      	mov	r0, r6
 8009484:	460d      	mov	r5, r1
 8009486:	f7f6 ffbd 	bl	8000404 <__aeabi_i2d>
 800948a:	a369      	add	r3, pc, #420	@ (adr r3, 8009630 <_dtoa_r+0x2d0>)
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f7f7 f822 	bl	80004d8 <__aeabi_dmul>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4620      	mov	r0, r4
 800949a:	4629      	mov	r1, r5
 800949c:	f7f6 fe66 	bl	800016c <__adddf3>
 80094a0:	4604      	mov	r4, r0
 80094a2:	460d      	mov	r5, r1
 80094a4:	f7f7 fac8 	bl	8000a38 <__aeabi_d2iz>
 80094a8:	2200      	movs	r2, #0
 80094aa:	4607      	mov	r7, r0
 80094ac:	2300      	movs	r3, #0
 80094ae:	4620      	mov	r0, r4
 80094b0:	4629      	mov	r1, r5
 80094b2:	f7f7 fa83 	bl	80009bc <__aeabi_dcmplt>
 80094b6:	b140      	cbz	r0, 80094ca <_dtoa_r+0x16a>
 80094b8:	4638      	mov	r0, r7
 80094ba:	f7f6 ffa3 	bl	8000404 <__aeabi_i2d>
 80094be:	4622      	mov	r2, r4
 80094c0:	462b      	mov	r3, r5
 80094c2:	f7f7 fa71 	bl	80009a8 <__aeabi_dcmpeq>
 80094c6:	b900      	cbnz	r0, 80094ca <_dtoa_r+0x16a>
 80094c8:	3f01      	subs	r7, #1
 80094ca:	2f16      	cmp	r7, #22
 80094cc:	d854      	bhi.n	8009578 <_dtoa_r+0x218>
 80094ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094d2:	4b60      	ldr	r3, [pc, #384]	@ (8009654 <_dtoa_r+0x2f4>)
 80094d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	f7f7 fa6e 	bl	80009bc <__aeabi_dcmplt>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d04b      	beq.n	800957c <_dtoa_r+0x21c>
 80094e4:	2300      	movs	r3, #0
 80094e6:	3f01      	subs	r7, #1
 80094e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094ec:	1b9b      	subs	r3, r3, r6
 80094ee:	1e5a      	subs	r2, r3, #1
 80094f0:	bf49      	itett	mi
 80094f2:	f1c3 0301 	rsbmi	r3, r3, #1
 80094f6:	2300      	movpl	r3, #0
 80094f8:	9304      	strmi	r3, [sp, #16]
 80094fa:	2300      	movmi	r3, #0
 80094fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80094fe:	bf54      	ite	pl
 8009500:	9304      	strpl	r3, [sp, #16]
 8009502:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009504:	2f00      	cmp	r7, #0
 8009506:	db3b      	blt.n	8009580 <_dtoa_r+0x220>
 8009508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800950a:	970e      	str	r7, [sp, #56]	@ 0x38
 800950c:	443b      	add	r3, r7
 800950e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009510:	2300      	movs	r3, #0
 8009512:	930a      	str	r3, [sp, #40]	@ 0x28
 8009514:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009516:	2b09      	cmp	r3, #9
 8009518:	d865      	bhi.n	80095e6 <_dtoa_r+0x286>
 800951a:	2b05      	cmp	r3, #5
 800951c:	bfc4      	itt	gt
 800951e:	3b04      	subgt	r3, #4
 8009520:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009522:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009524:	bfc8      	it	gt
 8009526:	2400      	movgt	r4, #0
 8009528:	f1a3 0302 	sub.w	r3, r3, #2
 800952c:	bfd8      	it	le
 800952e:	2401      	movle	r4, #1
 8009530:	2b03      	cmp	r3, #3
 8009532:	d864      	bhi.n	80095fe <_dtoa_r+0x29e>
 8009534:	e8df f003 	tbb	[pc, r3]
 8009538:	2c385553 	.word	0x2c385553
 800953c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009540:	441e      	add	r6, r3
 8009542:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009546:	2b20      	cmp	r3, #32
 8009548:	bfc1      	itttt	gt
 800954a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800954e:	fa08 f803 	lslgt.w	r8, r8, r3
 8009552:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009556:	fa24 f303 	lsrgt.w	r3, r4, r3
 800955a:	bfd6      	itet	le
 800955c:	f1c3 0320 	rsble	r3, r3, #32
 8009560:	ea48 0003 	orrgt.w	r0, r8, r3
 8009564:	fa04 f003 	lslle.w	r0, r4, r3
 8009568:	f7f6 ff3c 	bl	80003e4 <__aeabi_ui2d>
 800956c:	2201      	movs	r2, #1
 800956e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009572:	3e01      	subs	r6, #1
 8009574:	9212      	str	r2, [sp, #72]	@ 0x48
 8009576:	e774      	b.n	8009462 <_dtoa_r+0x102>
 8009578:	2301      	movs	r3, #1
 800957a:	e7b5      	b.n	80094e8 <_dtoa_r+0x188>
 800957c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800957e:	e7b4      	b.n	80094ea <_dtoa_r+0x18a>
 8009580:	9b04      	ldr	r3, [sp, #16]
 8009582:	1bdb      	subs	r3, r3, r7
 8009584:	9304      	str	r3, [sp, #16]
 8009586:	427b      	negs	r3, r7
 8009588:	930a      	str	r3, [sp, #40]	@ 0x28
 800958a:	2300      	movs	r3, #0
 800958c:	930e      	str	r3, [sp, #56]	@ 0x38
 800958e:	e7c1      	b.n	8009514 <_dtoa_r+0x1b4>
 8009590:	2301      	movs	r3, #1
 8009592:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009594:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009596:	eb07 0b03 	add.w	fp, r7, r3
 800959a:	f10b 0301 	add.w	r3, fp, #1
 800959e:	2b01      	cmp	r3, #1
 80095a0:	9308      	str	r3, [sp, #32]
 80095a2:	bfb8      	it	lt
 80095a4:	2301      	movlt	r3, #1
 80095a6:	e006      	b.n	80095b6 <_dtoa_r+0x256>
 80095a8:	2301      	movs	r3, #1
 80095aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	dd28      	ble.n	8009604 <_dtoa_r+0x2a4>
 80095b2:	469b      	mov	fp, r3
 80095b4:	9308      	str	r3, [sp, #32]
 80095b6:	2100      	movs	r1, #0
 80095b8:	2204      	movs	r2, #4
 80095ba:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80095be:	f102 0514 	add.w	r5, r2, #20
 80095c2:	429d      	cmp	r5, r3
 80095c4:	d926      	bls.n	8009614 <_dtoa_r+0x2b4>
 80095c6:	6041      	str	r1, [r0, #4]
 80095c8:	4648      	mov	r0, r9
 80095ca:	f000 fd9b 	bl	800a104 <_Balloc>
 80095ce:	4682      	mov	sl, r0
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d143      	bne.n	800965c <_dtoa_r+0x2fc>
 80095d4:	4602      	mov	r2, r0
 80095d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80095da:	4b1f      	ldr	r3, [pc, #124]	@ (8009658 <_dtoa_r+0x2f8>)
 80095dc:	e6d4      	b.n	8009388 <_dtoa_r+0x28>
 80095de:	2300      	movs	r3, #0
 80095e0:	e7e3      	b.n	80095aa <_dtoa_r+0x24a>
 80095e2:	2300      	movs	r3, #0
 80095e4:	e7d5      	b.n	8009592 <_dtoa_r+0x232>
 80095e6:	2401      	movs	r4, #1
 80095e8:	2300      	movs	r3, #0
 80095ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095ec:	9320      	str	r3, [sp, #128]	@ 0x80
 80095ee:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80095f2:	2200      	movs	r2, #0
 80095f4:	2312      	movs	r3, #18
 80095f6:	f8cd b020 	str.w	fp, [sp, #32]
 80095fa:	9221      	str	r2, [sp, #132]	@ 0x84
 80095fc:	e7db      	b.n	80095b6 <_dtoa_r+0x256>
 80095fe:	2301      	movs	r3, #1
 8009600:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009602:	e7f4      	b.n	80095ee <_dtoa_r+0x28e>
 8009604:	f04f 0b01 	mov.w	fp, #1
 8009608:	465b      	mov	r3, fp
 800960a:	f8cd b020 	str.w	fp, [sp, #32]
 800960e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8009612:	e7d0      	b.n	80095b6 <_dtoa_r+0x256>
 8009614:	3101      	adds	r1, #1
 8009616:	0052      	lsls	r2, r2, #1
 8009618:	e7d1      	b.n	80095be <_dtoa_r+0x25e>
 800961a:	bf00      	nop
 800961c:	f3af 8000 	nop.w
 8009620:	636f4361 	.word	0x636f4361
 8009624:	3fd287a7 	.word	0x3fd287a7
 8009628:	8b60c8b3 	.word	0x8b60c8b3
 800962c:	3fc68a28 	.word	0x3fc68a28
 8009630:	509f79fb 	.word	0x509f79fb
 8009634:	3fd34413 	.word	0x3fd34413
 8009638:	0800bc1b 	.word	0x0800bc1b
 800963c:	0800bc32 	.word	0x0800bc32
 8009640:	7ff00000 	.word	0x7ff00000
 8009644:	0800bc17 	.word	0x0800bc17
 8009648:	0800bbeb 	.word	0x0800bbeb
 800964c:	0800bbea 	.word	0x0800bbea
 8009650:	3ff80000 	.word	0x3ff80000
 8009654:	0800bd80 	.word	0x0800bd80
 8009658:	0800bc8a 	.word	0x0800bc8a
 800965c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009660:	6018      	str	r0, [r3, #0]
 8009662:	9b08      	ldr	r3, [sp, #32]
 8009664:	2b0e      	cmp	r3, #14
 8009666:	f200 80a1 	bhi.w	80097ac <_dtoa_r+0x44c>
 800966a:	2c00      	cmp	r4, #0
 800966c:	f000 809e 	beq.w	80097ac <_dtoa_r+0x44c>
 8009670:	2f00      	cmp	r7, #0
 8009672:	dd33      	ble.n	80096dc <_dtoa_r+0x37c>
 8009674:	4b9c      	ldr	r3, [pc, #624]	@ (80098e8 <_dtoa_r+0x588>)
 8009676:	f007 020f 	and.w	r2, r7, #15
 800967a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800967e:	05f8      	lsls	r0, r7, #23
 8009680:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009684:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8009688:	ea4f 1427 	mov.w	r4, r7, asr #4
 800968c:	d516      	bpl.n	80096bc <_dtoa_r+0x35c>
 800968e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009692:	4b96      	ldr	r3, [pc, #600]	@ (80098ec <_dtoa_r+0x58c>)
 8009694:	2603      	movs	r6, #3
 8009696:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800969a:	f7f7 f847 	bl	800072c <__aeabi_ddiv>
 800969e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80096a2:	f004 040f 	and.w	r4, r4, #15
 80096a6:	4d91      	ldr	r5, [pc, #580]	@ (80098ec <_dtoa_r+0x58c>)
 80096a8:	b954      	cbnz	r4, 80096c0 <_dtoa_r+0x360>
 80096aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096b2:	f7f7 f83b 	bl	800072c <__aeabi_ddiv>
 80096b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80096ba:	e028      	b.n	800970e <_dtoa_r+0x3ae>
 80096bc:	2602      	movs	r6, #2
 80096be:	e7f2      	b.n	80096a6 <_dtoa_r+0x346>
 80096c0:	07e1      	lsls	r1, r4, #31
 80096c2:	d508      	bpl.n	80096d6 <_dtoa_r+0x376>
 80096c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096cc:	f7f6 ff04 	bl	80004d8 <__aeabi_dmul>
 80096d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096d4:	3601      	adds	r6, #1
 80096d6:	1064      	asrs	r4, r4, #1
 80096d8:	3508      	adds	r5, #8
 80096da:	e7e5      	b.n	80096a8 <_dtoa_r+0x348>
 80096dc:	f000 80af 	beq.w	800983e <_dtoa_r+0x4de>
 80096e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096e4:	427c      	negs	r4, r7
 80096e6:	4b80      	ldr	r3, [pc, #512]	@ (80098e8 <_dtoa_r+0x588>)
 80096e8:	f004 020f 	and.w	r2, r4, #15
 80096ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f7f6 fef0 	bl	80004d8 <__aeabi_dmul>
 80096f8:	2602      	movs	r6, #2
 80096fa:	2300      	movs	r3, #0
 80096fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009700:	4d7a      	ldr	r5, [pc, #488]	@ (80098ec <_dtoa_r+0x58c>)
 8009702:	1124      	asrs	r4, r4, #4
 8009704:	2c00      	cmp	r4, #0
 8009706:	f040 808f 	bne.w	8009828 <_dtoa_r+0x4c8>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1d3      	bne.n	80096b6 <_dtoa_r+0x356>
 800970e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009712:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 8094 	beq.w	8009842 <_dtoa_r+0x4e2>
 800971a:	2200      	movs	r2, #0
 800971c:	4620      	mov	r0, r4
 800971e:	4629      	mov	r1, r5
 8009720:	4b73      	ldr	r3, [pc, #460]	@ (80098f0 <_dtoa_r+0x590>)
 8009722:	f7f7 f94b 	bl	80009bc <__aeabi_dcmplt>
 8009726:	2800      	cmp	r0, #0
 8009728:	f000 808b 	beq.w	8009842 <_dtoa_r+0x4e2>
 800972c:	9b08      	ldr	r3, [sp, #32]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 8087 	beq.w	8009842 <_dtoa_r+0x4e2>
 8009734:	f1bb 0f00 	cmp.w	fp, #0
 8009738:	dd34      	ble.n	80097a4 <_dtoa_r+0x444>
 800973a:	4620      	mov	r0, r4
 800973c:	2200      	movs	r2, #0
 800973e:	4629      	mov	r1, r5
 8009740:	4b6c      	ldr	r3, [pc, #432]	@ (80098f4 <_dtoa_r+0x594>)
 8009742:	f7f6 fec9 	bl	80004d8 <__aeabi_dmul>
 8009746:	465c      	mov	r4, fp
 8009748:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800974c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009750:	3601      	adds	r6, #1
 8009752:	4630      	mov	r0, r6
 8009754:	f7f6 fe56 	bl	8000404 <__aeabi_i2d>
 8009758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800975c:	f7f6 febc 	bl	80004d8 <__aeabi_dmul>
 8009760:	2200      	movs	r2, #0
 8009762:	4b65      	ldr	r3, [pc, #404]	@ (80098f8 <_dtoa_r+0x598>)
 8009764:	f7f6 fd02 	bl	800016c <__adddf3>
 8009768:	4605      	mov	r5, r0
 800976a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800976e:	2c00      	cmp	r4, #0
 8009770:	d16a      	bne.n	8009848 <_dtoa_r+0x4e8>
 8009772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009776:	2200      	movs	r2, #0
 8009778:	4b60      	ldr	r3, [pc, #384]	@ (80098fc <_dtoa_r+0x59c>)
 800977a:	f7f6 fcf5 	bl	8000168 <__aeabi_dsub>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009786:	462a      	mov	r2, r5
 8009788:	4633      	mov	r3, r6
 800978a:	f7f7 f935 	bl	80009f8 <__aeabi_dcmpgt>
 800978e:	2800      	cmp	r0, #0
 8009790:	f040 8298 	bne.w	8009cc4 <_dtoa_r+0x964>
 8009794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009798:	462a      	mov	r2, r5
 800979a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800979e:	f7f7 f90d 	bl	80009bc <__aeabi_dcmplt>
 80097a2:	bb38      	cbnz	r0, 80097f4 <_dtoa_r+0x494>
 80097a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80097a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80097ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f2c0 8157 	blt.w	8009a62 <_dtoa_r+0x702>
 80097b4:	2f0e      	cmp	r7, #14
 80097b6:	f300 8154 	bgt.w	8009a62 <_dtoa_r+0x702>
 80097ba:	4b4b      	ldr	r3, [pc, #300]	@ (80098e8 <_dtoa_r+0x588>)
 80097bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f280 80e5 	bge.w	800999a <_dtoa_r+0x63a>
 80097d0:	9b08      	ldr	r3, [sp, #32]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f300 80e1 	bgt.w	800999a <_dtoa_r+0x63a>
 80097d8:	d10c      	bne.n	80097f4 <_dtoa_r+0x494>
 80097da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097de:	2200      	movs	r2, #0
 80097e0:	4b46      	ldr	r3, [pc, #280]	@ (80098fc <_dtoa_r+0x59c>)
 80097e2:	f7f6 fe79 	bl	80004d8 <__aeabi_dmul>
 80097e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097ea:	f7f7 f8fb 	bl	80009e4 <__aeabi_dcmpge>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	f000 8266 	beq.w	8009cc0 <_dtoa_r+0x960>
 80097f4:	2400      	movs	r4, #0
 80097f6:	4625      	mov	r5, r4
 80097f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097fa:	4656      	mov	r6, sl
 80097fc:	ea6f 0803 	mvn.w	r8, r3
 8009800:	2700      	movs	r7, #0
 8009802:	4621      	mov	r1, r4
 8009804:	4648      	mov	r0, r9
 8009806:	f000 fcbd 	bl	800a184 <_Bfree>
 800980a:	2d00      	cmp	r5, #0
 800980c:	f000 80bd 	beq.w	800998a <_dtoa_r+0x62a>
 8009810:	b12f      	cbz	r7, 800981e <_dtoa_r+0x4be>
 8009812:	42af      	cmp	r7, r5
 8009814:	d003      	beq.n	800981e <_dtoa_r+0x4be>
 8009816:	4639      	mov	r1, r7
 8009818:	4648      	mov	r0, r9
 800981a:	f000 fcb3 	bl	800a184 <_Bfree>
 800981e:	4629      	mov	r1, r5
 8009820:	4648      	mov	r0, r9
 8009822:	f000 fcaf 	bl	800a184 <_Bfree>
 8009826:	e0b0      	b.n	800998a <_dtoa_r+0x62a>
 8009828:	07e2      	lsls	r2, r4, #31
 800982a:	d505      	bpl.n	8009838 <_dtoa_r+0x4d8>
 800982c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009830:	f7f6 fe52 	bl	80004d8 <__aeabi_dmul>
 8009834:	2301      	movs	r3, #1
 8009836:	3601      	adds	r6, #1
 8009838:	1064      	asrs	r4, r4, #1
 800983a:	3508      	adds	r5, #8
 800983c:	e762      	b.n	8009704 <_dtoa_r+0x3a4>
 800983e:	2602      	movs	r6, #2
 8009840:	e765      	b.n	800970e <_dtoa_r+0x3ae>
 8009842:	46b8      	mov	r8, r7
 8009844:	9c08      	ldr	r4, [sp, #32]
 8009846:	e784      	b.n	8009752 <_dtoa_r+0x3f2>
 8009848:	4b27      	ldr	r3, [pc, #156]	@ (80098e8 <_dtoa_r+0x588>)
 800984a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800984c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009850:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009854:	4454      	add	r4, sl
 8009856:	2900      	cmp	r1, #0
 8009858:	d054      	beq.n	8009904 <_dtoa_r+0x5a4>
 800985a:	2000      	movs	r0, #0
 800985c:	4928      	ldr	r1, [pc, #160]	@ (8009900 <_dtoa_r+0x5a0>)
 800985e:	f7f6 ff65 	bl	800072c <__aeabi_ddiv>
 8009862:	4633      	mov	r3, r6
 8009864:	462a      	mov	r2, r5
 8009866:	f7f6 fc7f 	bl	8000168 <__aeabi_dsub>
 800986a:	4656      	mov	r6, sl
 800986c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009874:	f7f7 f8e0 	bl	8000a38 <__aeabi_d2iz>
 8009878:	4605      	mov	r5, r0
 800987a:	f7f6 fdc3 	bl	8000404 <__aeabi_i2d>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009886:	f7f6 fc6f 	bl	8000168 <__aeabi_dsub>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	3530      	adds	r5, #48	@ 0x30
 8009890:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009894:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009898:	f806 5b01 	strb.w	r5, [r6], #1
 800989c:	f7f7 f88e 	bl	80009bc <__aeabi_dcmplt>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d172      	bne.n	800998a <_dtoa_r+0x62a>
 80098a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098a8:	2000      	movs	r0, #0
 80098aa:	4911      	ldr	r1, [pc, #68]	@ (80098f0 <_dtoa_r+0x590>)
 80098ac:	f7f6 fc5c 	bl	8000168 <__aeabi_dsub>
 80098b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098b4:	f7f7 f882 	bl	80009bc <__aeabi_dcmplt>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	f040 80b4 	bne.w	8009a26 <_dtoa_r+0x6c6>
 80098be:	42a6      	cmp	r6, r4
 80098c0:	f43f af70 	beq.w	80097a4 <_dtoa_r+0x444>
 80098c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80098c8:	2200      	movs	r2, #0
 80098ca:	4b0a      	ldr	r3, [pc, #40]	@ (80098f4 <_dtoa_r+0x594>)
 80098cc:	f7f6 fe04 	bl	80004d8 <__aeabi_dmul>
 80098d0:	2200      	movs	r2, #0
 80098d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098da:	4b06      	ldr	r3, [pc, #24]	@ (80098f4 <_dtoa_r+0x594>)
 80098dc:	f7f6 fdfc 	bl	80004d8 <__aeabi_dmul>
 80098e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80098e4:	e7c4      	b.n	8009870 <_dtoa_r+0x510>
 80098e6:	bf00      	nop
 80098e8:	0800bd80 	.word	0x0800bd80
 80098ec:	0800bd58 	.word	0x0800bd58
 80098f0:	3ff00000 	.word	0x3ff00000
 80098f4:	40240000 	.word	0x40240000
 80098f8:	401c0000 	.word	0x401c0000
 80098fc:	40140000 	.word	0x40140000
 8009900:	3fe00000 	.word	0x3fe00000
 8009904:	4631      	mov	r1, r6
 8009906:	4628      	mov	r0, r5
 8009908:	f7f6 fde6 	bl	80004d8 <__aeabi_dmul>
 800990c:	4656      	mov	r6, sl
 800990e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009912:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009914:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009918:	f7f7 f88e 	bl	8000a38 <__aeabi_d2iz>
 800991c:	4605      	mov	r5, r0
 800991e:	f7f6 fd71 	bl	8000404 <__aeabi_i2d>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800992a:	f7f6 fc1d 	bl	8000168 <__aeabi_dsub>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	3530      	adds	r5, #48	@ 0x30
 8009934:	f806 5b01 	strb.w	r5, [r6], #1
 8009938:	42a6      	cmp	r6, r4
 800993a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800993e:	f04f 0200 	mov.w	r2, #0
 8009942:	d124      	bne.n	800998e <_dtoa_r+0x62e>
 8009944:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009948:	4bae      	ldr	r3, [pc, #696]	@ (8009c04 <_dtoa_r+0x8a4>)
 800994a:	f7f6 fc0f 	bl	800016c <__adddf3>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009956:	f7f7 f84f 	bl	80009f8 <__aeabi_dcmpgt>
 800995a:	2800      	cmp	r0, #0
 800995c:	d163      	bne.n	8009a26 <_dtoa_r+0x6c6>
 800995e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009962:	2000      	movs	r0, #0
 8009964:	49a7      	ldr	r1, [pc, #668]	@ (8009c04 <_dtoa_r+0x8a4>)
 8009966:	f7f6 fbff 	bl	8000168 <__aeabi_dsub>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009972:	f7f7 f823 	bl	80009bc <__aeabi_dcmplt>
 8009976:	2800      	cmp	r0, #0
 8009978:	f43f af14 	beq.w	80097a4 <_dtoa_r+0x444>
 800997c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800997e:	1e73      	subs	r3, r6, #1
 8009980:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009982:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009986:	2b30      	cmp	r3, #48	@ 0x30
 8009988:	d0f8      	beq.n	800997c <_dtoa_r+0x61c>
 800998a:	4647      	mov	r7, r8
 800998c:	e03b      	b.n	8009a06 <_dtoa_r+0x6a6>
 800998e:	4b9e      	ldr	r3, [pc, #632]	@ (8009c08 <_dtoa_r+0x8a8>)
 8009990:	f7f6 fda2 	bl	80004d8 <__aeabi_dmul>
 8009994:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009998:	e7bc      	b.n	8009914 <_dtoa_r+0x5b4>
 800999a:	4656      	mov	r6, sl
 800999c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80099a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f7f6 fec0 	bl	800072c <__aeabi_ddiv>
 80099ac:	f7f7 f844 	bl	8000a38 <__aeabi_d2iz>
 80099b0:	4680      	mov	r8, r0
 80099b2:	f7f6 fd27 	bl	8000404 <__aeabi_i2d>
 80099b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099ba:	f7f6 fd8d 	bl	80004d8 <__aeabi_dmul>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4620      	mov	r0, r4
 80099c4:	4629      	mov	r1, r5
 80099c6:	f7f6 fbcf 	bl	8000168 <__aeabi_dsub>
 80099ca:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099ce:	9d08      	ldr	r5, [sp, #32]
 80099d0:	f806 4b01 	strb.w	r4, [r6], #1
 80099d4:	eba6 040a 	sub.w	r4, r6, sl
 80099d8:	42a5      	cmp	r5, r4
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	d133      	bne.n	8009a48 <_dtoa_r+0x6e8>
 80099e0:	f7f6 fbc4 	bl	800016c <__adddf3>
 80099e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099e8:	4604      	mov	r4, r0
 80099ea:	460d      	mov	r5, r1
 80099ec:	f7f7 f804 	bl	80009f8 <__aeabi_dcmpgt>
 80099f0:	b9c0      	cbnz	r0, 8009a24 <_dtoa_r+0x6c4>
 80099f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099f6:	4620      	mov	r0, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7f6 ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80099fe:	b110      	cbz	r0, 8009a06 <_dtoa_r+0x6a6>
 8009a00:	f018 0f01 	tst.w	r8, #1
 8009a04:	d10e      	bne.n	8009a24 <_dtoa_r+0x6c4>
 8009a06:	4648      	mov	r0, r9
 8009a08:	9903      	ldr	r1, [sp, #12]
 8009a0a:	f000 fbbb 	bl	800a184 <_Bfree>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	7033      	strb	r3, [r6, #0]
 8009a12:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009a14:	3701      	adds	r7, #1
 8009a16:	601f      	str	r7, [r3, #0]
 8009a18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 824b 	beq.w	8009eb6 <_dtoa_r+0xb56>
 8009a20:	601e      	str	r6, [r3, #0]
 8009a22:	e248      	b.n	8009eb6 <_dtoa_r+0xb56>
 8009a24:	46b8      	mov	r8, r7
 8009a26:	4633      	mov	r3, r6
 8009a28:	461e      	mov	r6, r3
 8009a2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a2e:	2a39      	cmp	r2, #57	@ 0x39
 8009a30:	d106      	bne.n	8009a40 <_dtoa_r+0x6e0>
 8009a32:	459a      	cmp	sl, r3
 8009a34:	d1f8      	bne.n	8009a28 <_dtoa_r+0x6c8>
 8009a36:	2230      	movs	r2, #48	@ 0x30
 8009a38:	f108 0801 	add.w	r8, r8, #1
 8009a3c:	f88a 2000 	strb.w	r2, [sl]
 8009a40:	781a      	ldrb	r2, [r3, #0]
 8009a42:	3201      	adds	r2, #1
 8009a44:	701a      	strb	r2, [r3, #0]
 8009a46:	e7a0      	b.n	800998a <_dtoa_r+0x62a>
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4b6f      	ldr	r3, [pc, #444]	@ (8009c08 <_dtoa_r+0x8a8>)
 8009a4c:	f7f6 fd44 	bl	80004d8 <__aeabi_dmul>
 8009a50:	2200      	movs	r2, #0
 8009a52:	2300      	movs	r3, #0
 8009a54:	4604      	mov	r4, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	f7f6 ffa6 	bl	80009a8 <__aeabi_dcmpeq>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d09f      	beq.n	80099a0 <_dtoa_r+0x640>
 8009a60:	e7d1      	b.n	8009a06 <_dtoa_r+0x6a6>
 8009a62:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a64:	2a00      	cmp	r2, #0
 8009a66:	f000 80ea 	beq.w	8009c3e <_dtoa_r+0x8de>
 8009a6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009a6c:	2a01      	cmp	r2, #1
 8009a6e:	f300 80cd 	bgt.w	8009c0c <_dtoa_r+0x8ac>
 8009a72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a74:	2a00      	cmp	r2, #0
 8009a76:	f000 80c1 	beq.w	8009bfc <_dtoa_r+0x89c>
 8009a7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a80:	9e04      	ldr	r6, [sp, #16]
 8009a82:	9a04      	ldr	r2, [sp, #16]
 8009a84:	2101      	movs	r1, #1
 8009a86:	441a      	add	r2, r3
 8009a88:	9204      	str	r2, [sp, #16]
 8009a8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a8c:	4648      	mov	r0, r9
 8009a8e:	441a      	add	r2, r3
 8009a90:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a92:	f000 fc2b 	bl	800a2ec <__i2b>
 8009a96:	4605      	mov	r5, r0
 8009a98:	b166      	cbz	r6, 8009ab4 <_dtoa_r+0x754>
 8009a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dd09      	ble.n	8009ab4 <_dtoa_r+0x754>
 8009aa0:	42b3      	cmp	r3, r6
 8009aa2:	bfa8      	it	ge
 8009aa4:	4633      	movge	r3, r6
 8009aa6:	9a04      	ldr	r2, [sp, #16]
 8009aa8:	1af6      	subs	r6, r6, r3
 8009aaa:	1ad2      	subs	r2, r2, r3
 8009aac:	9204      	str	r2, [sp, #16]
 8009aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ab6:	b30b      	cbz	r3, 8009afc <_dtoa_r+0x79c>
 8009ab8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f000 80c6 	beq.w	8009c4c <_dtoa_r+0x8ec>
 8009ac0:	2c00      	cmp	r4, #0
 8009ac2:	f000 80c0 	beq.w	8009c46 <_dtoa_r+0x8e6>
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	4622      	mov	r2, r4
 8009aca:	4648      	mov	r0, r9
 8009acc:	f000 fcc6 	bl	800a45c <__pow5mult>
 8009ad0:	9a03      	ldr	r2, [sp, #12]
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	4648      	mov	r0, r9
 8009ad8:	f000 fc1e 	bl	800a318 <__multiply>
 8009adc:	9903      	ldr	r1, [sp, #12]
 8009ade:	4680      	mov	r8, r0
 8009ae0:	4648      	mov	r0, r9
 8009ae2:	f000 fb4f 	bl	800a184 <_Bfree>
 8009ae6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ae8:	1b1b      	subs	r3, r3, r4
 8009aea:	930a      	str	r3, [sp, #40]	@ 0x28
 8009aec:	f000 80b1 	beq.w	8009c52 <_dtoa_r+0x8f2>
 8009af0:	4641      	mov	r1, r8
 8009af2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009af4:	4648      	mov	r0, r9
 8009af6:	f000 fcb1 	bl	800a45c <__pow5mult>
 8009afa:	9003      	str	r0, [sp, #12]
 8009afc:	2101      	movs	r1, #1
 8009afe:	4648      	mov	r0, r9
 8009b00:	f000 fbf4 	bl	800a2ec <__i2b>
 8009b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b06:	4604      	mov	r4, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f000 81d8 	beq.w	8009ebe <_dtoa_r+0xb5e>
 8009b0e:	461a      	mov	r2, r3
 8009b10:	4601      	mov	r1, r0
 8009b12:	4648      	mov	r0, r9
 8009b14:	f000 fca2 	bl	800a45c <__pow5mult>
 8009b18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	f300 809f 	bgt.w	8009c60 <_dtoa_r+0x900>
 8009b22:	9b06      	ldr	r3, [sp, #24]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f040 8097 	bne.w	8009c58 <_dtoa_r+0x8f8>
 8009b2a:	9b07      	ldr	r3, [sp, #28]
 8009b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f040 8093 	bne.w	8009c5c <_dtoa_r+0x8fc>
 8009b36:	9b07      	ldr	r3, [sp, #28]
 8009b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b3c:	0d1b      	lsrs	r3, r3, #20
 8009b3e:	051b      	lsls	r3, r3, #20
 8009b40:	b133      	cbz	r3, 8009b50 <_dtoa_r+0x7f0>
 8009b42:	9b04      	ldr	r3, [sp, #16]
 8009b44:	3301      	adds	r3, #1
 8009b46:	9304      	str	r3, [sp, #16]
 8009b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b4e:	2301      	movs	r3, #1
 8009b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 81b8 	beq.w	8009eca <_dtoa_r+0xb6a>
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b60:	6918      	ldr	r0, [r3, #16]
 8009b62:	f000 fb77 	bl	800a254 <__hi0bits>
 8009b66:	f1c0 0020 	rsb	r0, r0, #32
 8009b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b6c:	4418      	add	r0, r3
 8009b6e:	f010 001f 	ands.w	r0, r0, #31
 8009b72:	f000 8082 	beq.w	8009c7a <_dtoa_r+0x91a>
 8009b76:	f1c0 0320 	rsb	r3, r0, #32
 8009b7a:	2b04      	cmp	r3, #4
 8009b7c:	dd73      	ble.n	8009c66 <_dtoa_r+0x906>
 8009b7e:	9b04      	ldr	r3, [sp, #16]
 8009b80:	f1c0 001c 	rsb	r0, r0, #28
 8009b84:	4403      	add	r3, r0
 8009b86:	9304      	str	r3, [sp, #16]
 8009b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b8a:	4406      	add	r6, r0
 8009b8c:	4403      	add	r3, r0
 8009b8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b90:	9b04      	ldr	r3, [sp, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	dd05      	ble.n	8009ba2 <_dtoa_r+0x842>
 8009b96:	461a      	mov	r2, r3
 8009b98:	4648      	mov	r0, r9
 8009b9a:	9903      	ldr	r1, [sp, #12]
 8009b9c:	f000 fcb8 	bl	800a510 <__lshift>
 8009ba0:	9003      	str	r0, [sp, #12]
 8009ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	dd05      	ble.n	8009bb4 <_dtoa_r+0x854>
 8009ba8:	4621      	mov	r1, r4
 8009baa:	461a      	mov	r2, r3
 8009bac:	4648      	mov	r0, r9
 8009bae:	f000 fcaf 	bl	800a510 <__lshift>
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d061      	beq.n	8009c7e <_dtoa_r+0x91e>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	9803      	ldr	r0, [sp, #12]
 8009bbe:	f000 fd13 	bl	800a5e8 <__mcmp>
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	da5b      	bge.n	8009c7e <_dtoa_r+0x91e>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	220a      	movs	r2, #10
 8009bca:	4648      	mov	r0, r9
 8009bcc:	9903      	ldr	r1, [sp, #12]
 8009bce:	f000 fafb 	bl	800a1c8 <__multadd>
 8009bd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bd4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009bd8:	9003      	str	r0, [sp, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f000 8177 	beq.w	8009ece <_dtoa_r+0xb6e>
 8009be0:	4629      	mov	r1, r5
 8009be2:	2300      	movs	r3, #0
 8009be4:	220a      	movs	r2, #10
 8009be6:	4648      	mov	r0, r9
 8009be8:	f000 faee 	bl	800a1c8 <__multadd>
 8009bec:	f1bb 0f00 	cmp.w	fp, #0
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	dc6f      	bgt.n	8009cd4 <_dtoa_r+0x974>
 8009bf4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	dc49      	bgt.n	8009c8e <_dtoa_r+0x92e>
 8009bfa:	e06b      	b.n	8009cd4 <_dtoa_r+0x974>
 8009bfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009bfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c02:	e73c      	b.n	8009a7e <_dtoa_r+0x71e>
 8009c04:	3fe00000 	.word	0x3fe00000
 8009c08:	40240000 	.word	0x40240000
 8009c0c:	9b08      	ldr	r3, [sp, #32]
 8009c0e:	1e5c      	subs	r4, r3, #1
 8009c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c12:	42a3      	cmp	r3, r4
 8009c14:	db09      	blt.n	8009c2a <_dtoa_r+0x8ca>
 8009c16:	1b1c      	subs	r4, r3, r4
 8009c18:	9b08      	ldr	r3, [sp, #32]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f6bf af30 	bge.w	8009a80 <_dtoa_r+0x720>
 8009c20:	9b04      	ldr	r3, [sp, #16]
 8009c22:	9a08      	ldr	r2, [sp, #32]
 8009c24:	1a9e      	subs	r6, r3, r2
 8009c26:	2300      	movs	r3, #0
 8009c28:	e72b      	b.n	8009a82 <_dtoa_r+0x722>
 8009c2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c2e:	1ae3      	subs	r3, r4, r3
 8009c30:	441a      	add	r2, r3
 8009c32:	940a      	str	r4, [sp, #40]	@ 0x28
 8009c34:	9e04      	ldr	r6, [sp, #16]
 8009c36:	2400      	movs	r4, #0
 8009c38:	9b08      	ldr	r3, [sp, #32]
 8009c3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c3c:	e721      	b.n	8009a82 <_dtoa_r+0x722>
 8009c3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c40:	9e04      	ldr	r6, [sp, #16]
 8009c42:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009c44:	e728      	b.n	8009a98 <_dtoa_r+0x738>
 8009c46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009c4a:	e751      	b.n	8009af0 <_dtoa_r+0x790>
 8009c4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c4e:	9903      	ldr	r1, [sp, #12]
 8009c50:	e750      	b.n	8009af4 <_dtoa_r+0x794>
 8009c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c56:	e751      	b.n	8009afc <_dtoa_r+0x79c>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	e779      	b.n	8009b50 <_dtoa_r+0x7f0>
 8009c5c:	9b06      	ldr	r3, [sp, #24]
 8009c5e:	e777      	b.n	8009b50 <_dtoa_r+0x7f0>
 8009c60:	2300      	movs	r3, #0
 8009c62:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c64:	e779      	b.n	8009b5a <_dtoa_r+0x7fa>
 8009c66:	d093      	beq.n	8009b90 <_dtoa_r+0x830>
 8009c68:	9a04      	ldr	r2, [sp, #16]
 8009c6a:	331c      	adds	r3, #28
 8009c6c:	441a      	add	r2, r3
 8009c6e:	9204      	str	r2, [sp, #16]
 8009c70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c72:	441e      	add	r6, r3
 8009c74:	441a      	add	r2, r3
 8009c76:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c78:	e78a      	b.n	8009b90 <_dtoa_r+0x830>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	e7f4      	b.n	8009c68 <_dtoa_r+0x908>
 8009c7e:	9b08      	ldr	r3, [sp, #32]
 8009c80:	46b8      	mov	r8, r7
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dc20      	bgt.n	8009cc8 <_dtoa_r+0x968>
 8009c86:	469b      	mov	fp, r3
 8009c88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	dd1e      	ble.n	8009ccc <_dtoa_r+0x96c>
 8009c8e:	f1bb 0f00 	cmp.w	fp, #0
 8009c92:	f47f adb1 	bne.w	80097f8 <_dtoa_r+0x498>
 8009c96:	4621      	mov	r1, r4
 8009c98:	465b      	mov	r3, fp
 8009c9a:	2205      	movs	r2, #5
 8009c9c:	4648      	mov	r0, r9
 8009c9e:	f000 fa93 	bl	800a1c8 <__multadd>
 8009ca2:	4601      	mov	r1, r0
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	9803      	ldr	r0, [sp, #12]
 8009ca8:	f000 fc9e 	bl	800a5e8 <__mcmp>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	f77f ada3 	ble.w	80097f8 <_dtoa_r+0x498>
 8009cb2:	4656      	mov	r6, sl
 8009cb4:	2331      	movs	r3, #49	@ 0x31
 8009cb6:	f108 0801 	add.w	r8, r8, #1
 8009cba:	f806 3b01 	strb.w	r3, [r6], #1
 8009cbe:	e59f      	b.n	8009800 <_dtoa_r+0x4a0>
 8009cc0:	46b8      	mov	r8, r7
 8009cc2:	9c08      	ldr	r4, [sp, #32]
 8009cc4:	4625      	mov	r5, r4
 8009cc6:	e7f4      	b.n	8009cb2 <_dtoa_r+0x952>
 8009cc8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009ccc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 8101 	beq.w	8009ed6 <_dtoa_r+0xb76>
 8009cd4:	2e00      	cmp	r6, #0
 8009cd6:	dd05      	ble.n	8009ce4 <_dtoa_r+0x984>
 8009cd8:	4629      	mov	r1, r5
 8009cda:	4632      	mov	r2, r6
 8009cdc:	4648      	mov	r0, r9
 8009cde:	f000 fc17 	bl	800a510 <__lshift>
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d05c      	beq.n	8009da4 <_dtoa_r+0xa44>
 8009cea:	4648      	mov	r0, r9
 8009cec:	6869      	ldr	r1, [r5, #4]
 8009cee:	f000 fa09 	bl	800a104 <_Balloc>
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	b928      	cbnz	r0, 8009d02 <_dtoa_r+0x9a2>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009cfc:	4b80      	ldr	r3, [pc, #512]	@ (8009f00 <_dtoa_r+0xba0>)
 8009cfe:	f7ff bb43 	b.w	8009388 <_dtoa_r+0x28>
 8009d02:	692a      	ldr	r2, [r5, #16]
 8009d04:	f105 010c 	add.w	r1, r5, #12
 8009d08:	3202      	adds	r2, #2
 8009d0a:	0092      	lsls	r2, r2, #2
 8009d0c:	300c      	adds	r0, #12
 8009d0e:	f000 ff9d 	bl	800ac4c <memcpy>
 8009d12:	2201      	movs	r2, #1
 8009d14:	4631      	mov	r1, r6
 8009d16:	4648      	mov	r0, r9
 8009d18:	f000 fbfa 	bl	800a510 <__lshift>
 8009d1c:	462f      	mov	r7, r5
 8009d1e:	4605      	mov	r5, r0
 8009d20:	f10a 0301 	add.w	r3, sl, #1
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	eb0a 030b 	add.w	r3, sl, fp
 8009d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d2c:	9b06      	ldr	r3, [sp, #24]
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d34:	9b04      	ldr	r3, [sp, #16]
 8009d36:	4621      	mov	r1, r4
 8009d38:	9803      	ldr	r0, [sp, #12]
 8009d3a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009d3e:	f7ff fa84 	bl	800924a <quorem>
 8009d42:	4603      	mov	r3, r0
 8009d44:	4639      	mov	r1, r7
 8009d46:	3330      	adds	r3, #48	@ 0x30
 8009d48:	9006      	str	r0, [sp, #24]
 8009d4a:	9803      	ldr	r0, [sp, #12]
 8009d4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d4e:	f000 fc4b 	bl	800a5e8 <__mcmp>
 8009d52:	462a      	mov	r2, r5
 8009d54:	9008      	str	r0, [sp, #32]
 8009d56:	4621      	mov	r1, r4
 8009d58:	4648      	mov	r0, r9
 8009d5a:	f000 fc61 	bl	800a620 <__mdiff>
 8009d5e:	68c2      	ldr	r2, [r0, #12]
 8009d60:	4606      	mov	r6, r0
 8009d62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d64:	bb02      	cbnz	r2, 8009da8 <_dtoa_r+0xa48>
 8009d66:	4601      	mov	r1, r0
 8009d68:	9803      	ldr	r0, [sp, #12]
 8009d6a:	f000 fc3d 	bl	800a5e8 <__mcmp>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d72:	4631      	mov	r1, r6
 8009d74:	4648      	mov	r0, r9
 8009d76:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8009d7a:	f000 fa03 	bl	800a184 <_Bfree>
 8009d7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d82:	9e04      	ldr	r6, [sp, #16]
 8009d84:	ea42 0103 	orr.w	r1, r2, r3
 8009d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d8a:	4319      	orrs	r1, r3
 8009d8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d8e:	d10d      	bne.n	8009dac <_dtoa_r+0xa4c>
 8009d90:	2b39      	cmp	r3, #57	@ 0x39
 8009d92:	d027      	beq.n	8009de4 <_dtoa_r+0xa84>
 8009d94:	9a08      	ldr	r2, [sp, #32]
 8009d96:	2a00      	cmp	r2, #0
 8009d98:	dd01      	ble.n	8009d9e <_dtoa_r+0xa3e>
 8009d9a:	9b06      	ldr	r3, [sp, #24]
 8009d9c:	3331      	adds	r3, #49	@ 0x31
 8009d9e:	f88b 3000 	strb.w	r3, [fp]
 8009da2:	e52e      	b.n	8009802 <_dtoa_r+0x4a2>
 8009da4:	4628      	mov	r0, r5
 8009da6:	e7b9      	b.n	8009d1c <_dtoa_r+0x9bc>
 8009da8:	2201      	movs	r2, #1
 8009daa:	e7e2      	b.n	8009d72 <_dtoa_r+0xa12>
 8009dac:	9908      	ldr	r1, [sp, #32]
 8009dae:	2900      	cmp	r1, #0
 8009db0:	db04      	blt.n	8009dbc <_dtoa_r+0xa5c>
 8009db2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8009db4:	4301      	orrs	r1, r0
 8009db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009db8:	4301      	orrs	r1, r0
 8009dba:	d120      	bne.n	8009dfe <_dtoa_r+0xa9e>
 8009dbc:	2a00      	cmp	r2, #0
 8009dbe:	ddee      	ble.n	8009d9e <_dtoa_r+0xa3e>
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	9903      	ldr	r1, [sp, #12]
 8009dc4:	4648      	mov	r0, r9
 8009dc6:	9304      	str	r3, [sp, #16]
 8009dc8:	f000 fba2 	bl	800a510 <__lshift>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	9003      	str	r0, [sp, #12]
 8009dd0:	f000 fc0a 	bl	800a5e8 <__mcmp>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	9b04      	ldr	r3, [sp, #16]
 8009dd8:	dc02      	bgt.n	8009de0 <_dtoa_r+0xa80>
 8009dda:	d1e0      	bne.n	8009d9e <_dtoa_r+0xa3e>
 8009ddc:	07da      	lsls	r2, r3, #31
 8009dde:	d5de      	bpl.n	8009d9e <_dtoa_r+0xa3e>
 8009de0:	2b39      	cmp	r3, #57	@ 0x39
 8009de2:	d1da      	bne.n	8009d9a <_dtoa_r+0xa3a>
 8009de4:	2339      	movs	r3, #57	@ 0x39
 8009de6:	f88b 3000 	strb.w	r3, [fp]
 8009dea:	4633      	mov	r3, r6
 8009dec:	461e      	mov	r6, r3
 8009dee:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	2a39      	cmp	r2, #57	@ 0x39
 8009df6:	d04e      	beq.n	8009e96 <_dtoa_r+0xb36>
 8009df8:	3201      	adds	r2, #1
 8009dfa:	701a      	strb	r2, [r3, #0]
 8009dfc:	e501      	b.n	8009802 <_dtoa_r+0x4a2>
 8009dfe:	2a00      	cmp	r2, #0
 8009e00:	dd03      	ble.n	8009e0a <_dtoa_r+0xaaa>
 8009e02:	2b39      	cmp	r3, #57	@ 0x39
 8009e04:	d0ee      	beq.n	8009de4 <_dtoa_r+0xa84>
 8009e06:	3301      	adds	r3, #1
 8009e08:	e7c9      	b.n	8009d9e <_dtoa_r+0xa3e>
 8009e0a:	9a04      	ldr	r2, [sp, #16]
 8009e0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e12:	428a      	cmp	r2, r1
 8009e14:	d028      	beq.n	8009e68 <_dtoa_r+0xb08>
 8009e16:	2300      	movs	r3, #0
 8009e18:	220a      	movs	r2, #10
 8009e1a:	9903      	ldr	r1, [sp, #12]
 8009e1c:	4648      	mov	r0, r9
 8009e1e:	f000 f9d3 	bl	800a1c8 <__multadd>
 8009e22:	42af      	cmp	r7, r5
 8009e24:	9003      	str	r0, [sp, #12]
 8009e26:	f04f 0300 	mov.w	r3, #0
 8009e2a:	f04f 020a 	mov.w	r2, #10
 8009e2e:	4639      	mov	r1, r7
 8009e30:	4648      	mov	r0, r9
 8009e32:	d107      	bne.n	8009e44 <_dtoa_r+0xae4>
 8009e34:	f000 f9c8 	bl	800a1c8 <__multadd>
 8009e38:	4607      	mov	r7, r0
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	9b04      	ldr	r3, [sp, #16]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	9304      	str	r3, [sp, #16]
 8009e42:	e777      	b.n	8009d34 <_dtoa_r+0x9d4>
 8009e44:	f000 f9c0 	bl	800a1c8 <__multadd>
 8009e48:	4629      	mov	r1, r5
 8009e4a:	4607      	mov	r7, r0
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	220a      	movs	r2, #10
 8009e50:	4648      	mov	r0, r9
 8009e52:	f000 f9b9 	bl	800a1c8 <__multadd>
 8009e56:	4605      	mov	r5, r0
 8009e58:	e7f0      	b.n	8009e3c <_dtoa_r+0xadc>
 8009e5a:	f1bb 0f00 	cmp.w	fp, #0
 8009e5e:	bfcc      	ite	gt
 8009e60:	465e      	movgt	r6, fp
 8009e62:	2601      	movle	r6, #1
 8009e64:	2700      	movs	r7, #0
 8009e66:	4456      	add	r6, sl
 8009e68:	2201      	movs	r2, #1
 8009e6a:	9903      	ldr	r1, [sp, #12]
 8009e6c:	4648      	mov	r0, r9
 8009e6e:	9304      	str	r3, [sp, #16]
 8009e70:	f000 fb4e 	bl	800a510 <__lshift>
 8009e74:	4621      	mov	r1, r4
 8009e76:	9003      	str	r0, [sp, #12]
 8009e78:	f000 fbb6 	bl	800a5e8 <__mcmp>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	dcb4      	bgt.n	8009dea <_dtoa_r+0xa8a>
 8009e80:	d102      	bne.n	8009e88 <_dtoa_r+0xb28>
 8009e82:	9b04      	ldr	r3, [sp, #16]
 8009e84:	07db      	lsls	r3, r3, #31
 8009e86:	d4b0      	bmi.n	8009dea <_dtoa_r+0xa8a>
 8009e88:	4633      	mov	r3, r6
 8009e8a:	461e      	mov	r6, r3
 8009e8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e90:	2a30      	cmp	r2, #48	@ 0x30
 8009e92:	d0fa      	beq.n	8009e8a <_dtoa_r+0xb2a>
 8009e94:	e4b5      	b.n	8009802 <_dtoa_r+0x4a2>
 8009e96:	459a      	cmp	sl, r3
 8009e98:	d1a8      	bne.n	8009dec <_dtoa_r+0xa8c>
 8009e9a:	2331      	movs	r3, #49	@ 0x31
 8009e9c:	f108 0801 	add.w	r8, r8, #1
 8009ea0:	f88a 3000 	strb.w	r3, [sl]
 8009ea4:	e4ad      	b.n	8009802 <_dtoa_r+0x4a2>
 8009ea6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009ea8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009f04 <_dtoa_r+0xba4>
 8009eac:	b11b      	cbz	r3, 8009eb6 <_dtoa_r+0xb56>
 8009eae:	f10a 0308 	add.w	r3, sl, #8
 8009eb2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	4650      	mov	r0, sl
 8009eb8:	b017      	add	sp, #92	@ 0x5c
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	f77f ae2e 	ble.w	8009b22 <_dtoa_r+0x7c2>
 8009ec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ec8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009eca:	2001      	movs	r0, #1
 8009ecc:	e64d      	b.n	8009b6a <_dtoa_r+0x80a>
 8009ece:	f1bb 0f00 	cmp.w	fp, #0
 8009ed2:	f77f aed9 	ble.w	8009c88 <_dtoa_r+0x928>
 8009ed6:	4656      	mov	r6, sl
 8009ed8:	4621      	mov	r1, r4
 8009eda:	9803      	ldr	r0, [sp, #12]
 8009edc:	f7ff f9b5 	bl	800924a <quorem>
 8009ee0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009ee4:	f806 3b01 	strb.w	r3, [r6], #1
 8009ee8:	eba6 020a 	sub.w	r2, r6, sl
 8009eec:	4593      	cmp	fp, r2
 8009eee:	ddb4      	ble.n	8009e5a <_dtoa_r+0xafa>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	220a      	movs	r2, #10
 8009ef4:	4648      	mov	r0, r9
 8009ef6:	9903      	ldr	r1, [sp, #12]
 8009ef8:	f000 f966 	bl	800a1c8 <__multadd>
 8009efc:	9003      	str	r0, [sp, #12]
 8009efe:	e7eb      	b.n	8009ed8 <_dtoa_r+0xb78>
 8009f00:	0800bc8a 	.word	0x0800bc8a
 8009f04:	0800bc0e 	.word	0x0800bc0e

08009f08 <_free_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4605      	mov	r5, r0
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	d040      	beq.n	8009f92 <_free_r+0x8a>
 8009f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f14:	1f0c      	subs	r4, r1, #4
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	bfb8      	it	lt
 8009f1a:	18e4      	addlt	r4, r4, r3
 8009f1c:	f000 f8e6 	bl	800a0ec <__malloc_lock>
 8009f20:	4a1c      	ldr	r2, [pc, #112]	@ (8009f94 <_free_r+0x8c>)
 8009f22:	6813      	ldr	r3, [r2, #0]
 8009f24:	b933      	cbnz	r3, 8009f34 <_free_r+0x2c>
 8009f26:	6063      	str	r3, [r4, #4]
 8009f28:	6014      	str	r4, [r2, #0]
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f30:	f000 b8e2 	b.w	800a0f8 <__malloc_unlock>
 8009f34:	42a3      	cmp	r3, r4
 8009f36:	d908      	bls.n	8009f4a <_free_r+0x42>
 8009f38:	6820      	ldr	r0, [r4, #0]
 8009f3a:	1821      	adds	r1, r4, r0
 8009f3c:	428b      	cmp	r3, r1
 8009f3e:	bf01      	itttt	eq
 8009f40:	6819      	ldreq	r1, [r3, #0]
 8009f42:	685b      	ldreq	r3, [r3, #4]
 8009f44:	1809      	addeq	r1, r1, r0
 8009f46:	6021      	streq	r1, [r4, #0]
 8009f48:	e7ed      	b.n	8009f26 <_free_r+0x1e>
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	b10b      	cbz	r3, 8009f54 <_free_r+0x4c>
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	d9fa      	bls.n	8009f4a <_free_r+0x42>
 8009f54:	6811      	ldr	r1, [r2, #0]
 8009f56:	1850      	adds	r0, r2, r1
 8009f58:	42a0      	cmp	r0, r4
 8009f5a:	d10b      	bne.n	8009f74 <_free_r+0x6c>
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	4401      	add	r1, r0
 8009f60:	1850      	adds	r0, r2, r1
 8009f62:	4283      	cmp	r3, r0
 8009f64:	6011      	str	r1, [r2, #0]
 8009f66:	d1e0      	bne.n	8009f2a <_free_r+0x22>
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	4408      	add	r0, r1
 8009f6e:	6010      	str	r0, [r2, #0]
 8009f70:	6053      	str	r3, [r2, #4]
 8009f72:	e7da      	b.n	8009f2a <_free_r+0x22>
 8009f74:	d902      	bls.n	8009f7c <_free_r+0x74>
 8009f76:	230c      	movs	r3, #12
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	e7d6      	b.n	8009f2a <_free_r+0x22>
 8009f7c:	6820      	ldr	r0, [r4, #0]
 8009f7e:	1821      	adds	r1, r4, r0
 8009f80:	428b      	cmp	r3, r1
 8009f82:	bf01      	itttt	eq
 8009f84:	6819      	ldreq	r1, [r3, #0]
 8009f86:	685b      	ldreq	r3, [r3, #4]
 8009f88:	1809      	addeq	r1, r1, r0
 8009f8a:	6021      	streq	r1, [r4, #0]
 8009f8c:	6063      	str	r3, [r4, #4]
 8009f8e:	6054      	str	r4, [r2, #4]
 8009f90:	e7cb      	b.n	8009f2a <_free_r+0x22>
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	20000a08 	.word	0x20000a08

08009f98 <malloc>:
 8009f98:	4b02      	ldr	r3, [pc, #8]	@ (8009fa4 <malloc+0xc>)
 8009f9a:	4601      	mov	r1, r0
 8009f9c:	6818      	ldr	r0, [r3, #0]
 8009f9e:	f000 b825 	b.w	8009fec <_malloc_r>
 8009fa2:	bf00      	nop
 8009fa4:	2000003c 	.word	0x2000003c

08009fa8 <sbrk_aligned>:
 8009fa8:	b570      	push	{r4, r5, r6, lr}
 8009faa:	4e0f      	ldr	r6, [pc, #60]	@ (8009fe8 <sbrk_aligned+0x40>)
 8009fac:	460c      	mov	r4, r1
 8009fae:	6831      	ldr	r1, [r6, #0]
 8009fb0:	4605      	mov	r5, r0
 8009fb2:	b911      	cbnz	r1, 8009fba <sbrk_aligned+0x12>
 8009fb4:	f000 fe3a 	bl	800ac2c <_sbrk_r>
 8009fb8:	6030      	str	r0, [r6, #0]
 8009fba:	4621      	mov	r1, r4
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f000 fe35 	bl	800ac2c <_sbrk_r>
 8009fc2:	1c43      	adds	r3, r0, #1
 8009fc4:	d103      	bne.n	8009fce <sbrk_aligned+0x26>
 8009fc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009fca:	4620      	mov	r0, r4
 8009fcc:	bd70      	pop	{r4, r5, r6, pc}
 8009fce:	1cc4      	adds	r4, r0, #3
 8009fd0:	f024 0403 	bic.w	r4, r4, #3
 8009fd4:	42a0      	cmp	r0, r4
 8009fd6:	d0f8      	beq.n	8009fca <sbrk_aligned+0x22>
 8009fd8:	1a21      	subs	r1, r4, r0
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 fe26 	bl	800ac2c <_sbrk_r>
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d1f2      	bne.n	8009fca <sbrk_aligned+0x22>
 8009fe4:	e7ef      	b.n	8009fc6 <sbrk_aligned+0x1e>
 8009fe6:	bf00      	nop
 8009fe8:	20000a04 	.word	0x20000a04

08009fec <_malloc_r>:
 8009fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff0:	1ccd      	adds	r5, r1, #3
 8009ff2:	f025 0503 	bic.w	r5, r5, #3
 8009ff6:	3508      	adds	r5, #8
 8009ff8:	2d0c      	cmp	r5, #12
 8009ffa:	bf38      	it	cc
 8009ffc:	250c      	movcc	r5, #12
 8009ffe:	2d00      	cmp	r5, #0
 800a000:	4606      	mov	r6, r0
 800a002:	db01      	blt.n	800a008 <_malloc_r+0x1c>
 800a004:	42a9      	cmp	r1, r5
 800a006:	d904      	bls.n	800a012 <_malloc_r+0x26>
 800a008:	230c      	movs	r3, #12
 800a00a:	6033      	str	r3, [r6, #0]
 800a00c:	2000      	movs	r0, #0
 800a00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0e8 <_malloc_r+0xfc>
 800a016:	f000 f869 	bl	800a0ec <__malloc_lock>
 800a01a:	f8d8 3000 	ldr.w	r3, [r8]
 800a01e:	461c      	mov	r4, r3
 800a020:	bb44      	cbnz	r4, 800a074 <_malloc_r+0x88>
 800a022:	4629      	mov	r1, r5
 800a024:	4630      	mov	r0, r6
 800a026:	f7ff ffbf 	bl	8009fa8 <sbrk_aligned>
 800a02a:	1c43      	adds	r3, r0, #1
 800a02c:	4604      	mov	r4, r0
 800a02e:	d158      	bne.n	800a0e2 <_malloc_r+0xf6>
 800a030:	f8d8 4000 	ldr.w	r4, [r8]
 800a034:	4627      	mov	r7, r4
 800a036:	2f00      	cmp	r7, #0
 800a038:	d143      	bne.n	800a0c2 <_malloc_r+0xd6>
 800a03a:	2c00      	cmp	r4, #0
 800a03c:	d04b      	beq.n	800a0d6 <_malloc_r+0xea>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	4639      	mov	r1, r7
 800a042:	4630      	mov	r0, r6
 800a044:	eb04 0903 	add.w	r9, r4, r3
 800a048:	f000 fdf0 	bl	800ac2c <_sbrk_r>
 800a04c:	4581      	cmp	r9, r0
 800a04e:	d142      	bne.n	800a0d6 <_malloc_r+0xea>
 800a050:	6821      	ldr	r1, [r4, #0]
 800a052:	4630      	mov	r0, r6
 800a054:	1a6d      	subs	r5, r5, r1
 800a056:	4629      	mov	r1, r5
 800a058:	f7ff ffa6 	bl	8009fa8 <sbrk_aligned>
 800a05c:	3001      	adds	r0, #1
 800a05e:	d03a      	beq.n	800a0d6 <_malloc_r+0xea>
 800a060:	6823      	ldr	r3, [r4, #0]
 800a062:	442b      	add	r3, r5
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	f8d8 3000 	ldr.w	r3, [r8]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	bb62      	cbnz	r2, 800a0c8 <_malloc_r+0xdc>
 800a06e:	f8c8 7000 	str.w	r7, [r8]
 800a072:	e00f      	b.n	800a094 <_malloc_r+0xa8>
 800a074:	6822      	ldr	r2, [r4, #0]
 800a076:	1b52      	subs	r2, r2, r5
 800a078:	d420      	bmi.n	800a0bc <_malloc_r+0xd0>
 800a07a:	2a0b      	cmp	r2, #11
 800a07c:	d917      	bls.n	800a0ae <_malloc_r+0xc2>
 800a07e:	1961      	adds	r1, r4, r5
 800a080:	42a3      	cmp	r3, r4
 800a082:	6025      	str	r5, [r4, #0]
 800a084:	bf18      	it	ne
 800a086:	6059      	strne	r1, [r3, #4]
 800a088:	6863      	ldr	r3, [r4, #4]
 800a08a:	bf08      	it	eq
 800a08c:	f8c8 1000 	streq.w	r1, [r8]
 800a090:	5162      	str	r2, [r4, r5]
 800a092:	604b      	str	r3, [r1, #4]
 800a094:	4630      	mov	r0, r6
 800a096:	f000 f82f 	bl	800a0f8 <__malloc_unlock>
 800a09a:	f104 000b 	add.w	r0, r4, #11
 800a09e:	1d23      	adds	r3, r4, #4
 800a0a0:	f020 0007 	bic.w	r0, r0, #7
 800a0a4:	1ac2      	subs	r2, r0, r3
 800a0a6:	bf1c      	itt	ne
 800a0a8:	1a1b      	subne	r3, r3, r0
 800a0aa:	50a3      	strne	r3, [r4, r2]
 800a0ac:	e7af      	b.n	800a00e <_malloc_r+0x22>
 800a0ae:	6862      	ldr	r2, [r4, #4]
 800a0b0:	42a3      	cmp	r3, r4
 800a0b2:	bf0c      	ite	eq
 800a0b4:	f8c8 2000 	streq.w	r2, [r8]
 800a0b8:	605a      	strne	r2, [r3, #4]
 800a0ba:	e7eb      	b.n	800a094 <_malloc_r+0xa8>
 800a0bc:	4623      	mov	r3, r4
 800a0be:	6864      	ldr	r4, [r4, #4]
 800a0c0:	e7ae      	b.n	800a020 <_malloc_r+0x34>
 800a0c2:	463c      	mov	r4, r7
 800a0c4:	687f      	ldr	r7, [r7, #4]
 800a0c6:	e7b6      	b.n	800a036 <_malloc_r+0x4a>
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	42a3      	cmp	r3, r4
 800a0ce:	d1fb      	bne.n	800a0c8 <_malloc_r+0xdc>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	6053      	str	r3, [r2, #4]
 800a0d4:	e7de      	b.n	800a094 <_malloc_r+0xa8>
 800a0d6:	230c      	movs	r3, #12
 800a0d8:	4630      	mov	r0, r6
 800a0da:	6033      	str	r3, [r6, #0]
 800a0dc:	f000 f80c 	bl	800a0f8 <__malloc_unlock>
 800a0e0:	e794      	b.n	800a00c <_malloc_r+0x20>
 800a0e2:	6005      	str	r5, [r0, #0]
 800a0e4:	e7d6      	b.n	800a094 <_malloc_r+0xa8>
 800a0e6:	bf00      	nop
 800a0e8:	20000a08 	.word	0x20000a08

0800a0ec <__malloc_lock>:
 800a0ec:	4801      	ldr	r0, [pc, #4]	@ (800a0f4 <__malloc_lock+0x8>)
 800a0ee:	f7ff b89c 	b.w	800922a <__retarget_lock_acquire_recursive>
 800a0f2:	bf00      	nop
 800a0f4:	20000a00 	.word	0x20000a00

0800a0f8 <__malloc_unlock>:
 800a0f8:	4801      	ldr	r0, [pc, #4]	@ (800a100 <__malloc_unlock+0x8>)
 800a0fa:	f7ff b897 	b.w	800922c <__retarget_lock_release_recursive>
 800a0fe:	bf00      	nop
 800a100:	20000a00 	.word	0x20000a00

0800a104 <_Balloc>:
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	69c6      	ldr	r6, [r0, #28]
 800a108:	4604      	mov	r4, r0
 800a10a:	460d      	mov	r5, r1
 800a10c:	b976      	cbnz	r6, 800a12c <_Balloc+0x28>
 800a10e:	2010      	movs	r0, #16
 800a110:	f7ff ff42 	bl	8009f98 <malloc>
 800a114:	4602      	mov	r2, r0
 800a116:	61e0      	str	r0, [r4, #28]
 800a118:	b920      	cbnz	r0, 800a124 <_Balloc+0x20>
 800a11a:	216b      	movs	r1, #107	@ 0x6b
 800a11c:	4b17      	ldr	r3, [pc, #92]	@ (800a17c <_Balloc+0x78>)
 800a11e:	4818      	ldr	r0, [pc, #96]	@ (800a180 <_Balloc+0x7c>)
 800a120:	f000 fda2 	bl	800ac68 <__assert_func>
 800a124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a128:	6006      	str	r6, [r0, #0]
 800a12a:	60c6      	str	r6, [r0, #12]
 800a12c:	69e6      	ldr	r6, [r4, #28]
 800a12e:	68f3      	ldr	r3, [r6, #12]
 800a130:	b183      	cbz	r3, 800a154 <_Balloc+0x50>
 800a132:	69e3      	ldr	r3, [r4, #28]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a13a:	b9b8      	cbnz	r0, 800a16c <_Balloc+0x68>
 800a13c:	2101      	movs	r1, #1
 800a13e:	fa01 f605 	lsl.w	r6, r1, r5
 800a142:	1d72      	adds	r2, r6, #5
 800a144:	4620      	mov	r0, r4
 800a146:	0092      	lsls	r2, r2, #2
 800a148:	f000 fdac 	bl	800aca4 <_calloc_r>
 800a14c:	b160      	cbz	r0, 800a168 <_Balloc+0x64>
 800a14e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a152:	e00e      	b.n	800a172 <_Balloc+0x6e>
 800a154:	2221      	movs	r2, #33	@ 0x21
 800a156:	2104      	movs	r1, #4
 800a158:	4620      	mov	r0, r4
 800a15a:	f000 fda3 	bl	800aca4 <_calloc_r>
 800a15e:	69e3      	ldr	r3, [r4, #28]
 800a160:	60f0      	str	r0, [r6, #12]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e4      	bne.n	800a132 <_Balloc+0x2e>
 800a168:	2000      	movs	r0, #0
 800a16a:	bd70      	pop	{r4, r5, r6, pc}
 800a16c:	6802      	ldr	r2, [r0, #0]
 800a16e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a172:	2300      	movs	r3, #0
 800a174:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a178:	e7f7      	b.n	800a16a <_Balloc+0x66>
 800a17a:	bf00      	nop
 800a17c:	0800bc1b 	.word	0x0800bc1b
 800a180:	0800bc9b 	.word	0x0800bc9b

0800a184 <_Bfree>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	69c6      	ldr	r6, [r0, #28]
 800a188:	4605      	mov	r5, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	b976      	cbnz	r6, 800a1ac <_Bfree+0x28>
 800a18e:	2010      	movs	r0, #16
 800a190:	f7ff ff02 	bl	8009f98 <malloc>
 800a194:	4602      	mov	r2, r0
 800a196:	61e8      	str	r0, [r5, #28]
 800a198:	b920      	cbnz	r0, 800a1a4 <_Bfree+0x20>
 800a19a:	218f      	movs	r1, #143	@ 0x8f
 800a19c:	4b08      	ldr	r3, [pc, #32]	@ (800a1c0 <_Bfree+0x3c>)
 800a19e:	4809      	ldr	r0, [pc, #36]	@ (800a1c4 <_Bfree+0x40>)
 800a1a0:	f000 fd62 	bl	800ac68 <__assert_func>
 800a1a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1a8:	6006      	str	r6, [r0, #0]
 800a1aa:	60c6      	str	r6, [r0, #12]
 800a1ac:	b13c      	cbz	r4, 800a1be <_Bfree+0x3a>
 800a1ae:	69eb      	ldr	r3, [r5, #28]
 800a1b0:	6862      	ldr	r2, [r4, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1b8:	6021      	str	r1, [r4, #0]
 800a1ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1be:	bd70      	pop	{r4, r5, r6, pc}
 800a1c0:	0800bc1b 	.word	0x0800bc1b
 800a1c4:	0800bc9b 	.word	0x0800bc9b

0800a1c8 <__multadd>:
 800a1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	461e      	mov	r6, r3
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	690d      	ldr	r5, [r1, #16]
 800a1d6:	f101 0c14 	add.w	ip, r1, #20
 800a1da:	f8dc 3000 	ldr.w	r3, [ip]
 800a1de:	3001      	adds	r0, #1
 800a1e0:	b299      	uxth	r1, r3
 800a1e2:	fb02 6101 	mla	r1, r2, r1, r6
 800a1e6:	0c1e      	lsrs	r6, r3, #16
 800a1e8:	0c0b      	lsrs	r3, r1, #16
 800a1ea:	fb02 3306 	mla	r3, r2, r6, r3
 800a1ee:	b289      	uxth	r1, r1
 800a1f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1f4:	4285      	cmp	r5, r0
 800a1f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1fa:	f84c 1b04 	str.w	r1, [ip], #4
 800a1fe:	dcec      	bgt.n	800a1da <__multadd+0x12>
 800a200:	b30e      	cbz	r6, 800a246 <__multadd+0x7e>
 800a202:	68a3      	ldr	r3, [r4, #8]
 800a204:	42ab      	cmp	r3, r5
 800a206:	dc19      	bgt.n	800a23c <__multadd+0x74>
 800a208:	6861      	ldr	r1, [r4, #4]
 800a20a:	4638      	mov	r0, r7
 800a20c:	3101      	adds	r1, #1
 800a20e:	f7ff ff79 	bl	800a104 <_Balloc>
 800a212:	4680      	mov	r8, r0
 800a214:	b928      	cbnz	r0, 800a222 <__multadd+0x5a>
 800a216:	4602      	mov	r2, r0
 800a218:	21ba      	movs	r1, #186	@ 0xba
 800a21a:	4b0c      	ldr	r3, [pc, #48]	@ (800a24c <__multadd+0x84>)
 800a21c:	480c      	ldr	r0, [pc, #48]	@ (800a250 <__multadd+0x88>)
 800a21e:	f000 fd23 	bl	800ac68 <__assert_func>
 800a222:	6922      	ldr	r2, [r4, #16]
 800a224:	f104 010c 	add.w	r1, r4, #12
 800a228:	3202      	adds	r2, #2
 800a22a:	0092      	lsls	r2, r2, #2
 800a22c:	300c      	adds	r0, #12
 800a22e:	f000 fd0d 	bl	800ac4c <memcpy>
 800a232:	4621      	mov	r1, r4
 800a234:	4638      	mov	r0, r7
 800a236:	f7ff ffa5 	bl	800a184 <_Bfree>
 800a23a:	4644      	mov	r4, r8
 800a23c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a240:	3501      	adds	r5, #1
 800a242:	615e      	str	r6, [r3, #20]
 800a244:	6125      	str	r5, [r4, #16]
 800a246:	4620      	mov	r0, r4
 800a248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24c:	0800bc8a 	.word	0x0800bc8a
 800a250:	0800bc9b 	.word	0x0800bc9b

0800a254 <__hi0bits>:
 800a254:	4603      	mov	r3, r0
 800a256:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a25a:	bf3a      	itte	cc
 800a25c:	0403      	lslcc	r3, r0, #16
 800a25e:	2010      	movcc	r0, #16
 800a260:	2000      	movcs	r0, #0
 800a262:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a266:	bf3c      	itt	cc
 800a268:	021b      	lslcc	r3, r3, #8
 800a26a:	3008      	addcc	r0, #8
 800a26c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a270:	bf3c      	itt	cc
 800a272:	011b      	lslcc	r3, r3, #4
 800a274:	3004      	addcc	r0, #4
 800a276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a27a:	bf3c      	itt	cc
 800a27c:	009b      	lslcc	r3, r3, #2
 800a27e:	3002      	addcc	r0, #2
 800a280:	2b00      	cmp	r3, #0
 800a282:	db05      	blt.n	800a290 <__hi0bits+0x3c>
 800a284:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a288:	f100 0001 	add.w	r0, r0, #1
 800a28c:	bf08      	it	eq
 800a28e:	2020      	moveq	r0, #32
 800a290:	4770      	bx	lr

0800a292 <__lo0bits>:
 800a292:	6803      	ldr	r3, [r0, #0]
 800a294:	4602      	mov	r2, r0
 800a296:	f013 0007 	ands.w	r0, r3, #7
 800a29a:	d00b      	beq.n	800a2b4 <__lo0bits+0x22>
 800a29c:	07d9      	lsls	r1, r3, #31
 800a29e:	d421      	bmi.n	800a2e4 <__lo0bits+0x52>
 800a2a0:	0798      	lsls	r0, r3, #30
 800a2a2:	bf49      	itett	mi
 800a2a4:	085b      	lsrmi	r3, r3, #1
 800a2a6:	089b      	lsrpl	r3, r3, #2
 800a2a8:	2001      	movmi	r0, #1
 800a2aa:	6013      	strmi	r3, [r2, #0]
 800a2ac:	bf5c      	itt	pl
 800a2ae:	2002      	movpl	r0, #2
 800a2b0:	6013      	strpl	r3, [r2, #0]
 800a2b2:	4770      	bx	lr
 800a2b4:	b299      	uxth	r1, r3
 800a2b6:	b909      	cbnz	r1, 800a2bc <__lo0bits+0x2a>
 800a2b8:	2010      	movs	r0, #16
 800a2ba:	0c1b      	lsrs	r3, r3, #16
 800a2bc:	b2d9      	uxtb	r1, r3
 800a2be:	b909      	cbnz	r1, 800a2c4 <__lo0bits+0x32>
 800a2c0:	3008      	adds	r0, #8
 800a2c2:	0a1b      	lsrs	r3, r3, #8
 800a2c4:	0719      	lsls	r1, r3, #28
 800a2c6:	bf04      	itt	eq
 800a2c8:	091b      	lsreq	r3, r3, #4
 800a2ca:	3004      	addeq	r0, #4
 800a2cc:	0799      	lsls	r1, r3, #30
 800a2ce:	bf04      	itt	eq
 800a2d0:	089b      	lsreq	r3, r3, #2
 800a2d2:	3002      	addeq	r0, #2
 800a2d4:	07d9      	lsls	r1, r3, #31
 800a2d6:	d403      	bmi.n	800a2e0 <__lo0bits+0x4e>
 800a2d8:	085b      	lsrs	r3, r3, #1
 800a2da:	f100 0001 	add.w	r0, r0, #1
 800a2de:	d003      	beq.n	800a2e8 <__lo0bits+0x56>
 800a2e0:	6013      	str	r3, [r2, #0]
 800a2e2:	4770      	bx	lr
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	4770      	bx	lr
 800a2e8:	2020      	movs	r0, #32
 800a2ea:	4770      	bx	lr

0800a2ec <__i2b>:
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	f7ff ff07 	bl	800a104 <_Balloc>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	b928      	cbnz	r0, 800a306 <__i2b+0x1a>
 800a2fa:	f240 1145 	movw	r1, #325	@ 0x145
 800a2fe:	4b04      	ldr	r3, [pc, #16]	@ (800a310 <__i2b+0x24>)
 800a300:	4804      	ldr	r0, [pc, #16]	@ (800a314 <__i2b+0x28>)
 800a302:	f000 fcb1 	bl	800ac68 <__assert_func>
 800a306:	2301      	movs	r3, #1
 800a308:	6144      	str	r4, [r0, #20]
 800a30a:	6103      	str	r3, [r0, #16]
 800a30c:	bd10      	pop	{r4, pc}
 800a30e:	bf00      	nop
 800a310:	0800bc8a 	.word	0x0800bc8a
 800a314:	0800bc9b 	.word	0x0800bc9b

0800a318 <__multiply>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	4617      	mov	r7, r2
 800a31e:	690a      	ldr	r2, [r1, #16]
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	4689      	mov	r9, r1
 800a324:	429a      	cmp	r2, r3
 800a326:	bfa2      	ittt	ge
 800a328:	463b      	movge	r3, r7
 800a32a:	460f      	movge	r7, r1
 800a32c:	4699      	movge	r9, r3
 800a32e:	693d      	ldr	r5, [r7, #16]
 800a330:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	eb05 060a 	add.w	r6, r5, sl
 800a33c:	42b3      	cmp	r3, r6
 800a33e:	b085      	sub	sp, #20
 800a340:	bfb8      	it	lt
 800a342:	3101      	addlt	r1, #1
 800a344:	f7ff fede 	bl	800a104 <_Balloc>
 800a348:	b930      	cbnz	r0, 800a358 <__multiply+0x40>
 800a34a:	4602      	mov	r2, r0
 800a34c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a350:	4b40      	ldr	r3, [pc, #256]	@ (800a454 <__multiply+0x13c>)
 800a352:	4841      	ldr	r0, [pc, #260]	@ (800a458 <__multiply+0x140>)
 800a354:	f000 fc88 	bl	800ac68 <__assert_func>
 800a358:	f100 0414 	add.w	r4, r0, #20
 800a35c:	4623      	mov	r3, r4
 800a35e:	2200      	movs	r2, #0
 800a360:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a364:	4573      	cmp	r3, lr
 800a366:	d320      	bcc.n	800a3aa <__multiply+0x92>
 800a368:	f107 0814 	add.w	r8, r7, #20
 800a36c:	f109 0114 	add.w	r1, r9, #20
 800a370:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a374:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a378:	9302      	str	r3, [sp, #8]
 800a37a:	1beb      	subs	r3, r5, r7
 800a37c:	3b15      	subs	r3, #21
 800a37e:	f023 0303 	bic.w	r3, r3, #3
 800a382:	3304      	adds	r3, #4
 800a384:	3715      	adds	r7, #21
 800a386:	42bd      	cmp	r5, r7
 800a388:	bf38      	it	cc
 800a38a:	2304      	movcc	r3, #4
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	9b02      	ldr	r3, [sp, #8]
 800a390:	9103      	str	r1, [sp, #12]
 800a392:	428b      	cmp	r3, r1
 800a394:	d80c      	bhi.n	800a3b0 <__multiply+0x98>
 800a396:	2e00      	cmp	r6, #0
 800a398:	dd03      	ble.n	800a3a2 <__multiply+0x8a>
 800a39a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d055      	beq.n	800a44e <__multiply+0x136>
 800a3a2:	6106      	str	r6, [r0, #16]
 800a3a4:	b005      	add	sp, #20
 800a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3aa:	f843 2b04 	str.w	r2, [r3], #4
 800a3ae:	e7d9      	b.n	800a364 <__multiply+0x4c>
 800a3b0:	f8b1 a000 	ldrh.w	sl, [r1]
 800a3b4:	f1ba 0f00 	cmp.w	sl, #0
 800a3b8:	d01f      	beq.n	800a3fa <__multiply+0xe2>
 800a3ba:	46c4      	mov	ip, r8
 800a3bc:	46a1      	mov	r9, r4
 800a3be:	2700      	movs	r7, #0
 800a3c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3c4:	f8d9 3000 	ldr.w	r3, [r9]
 800a3c8:	fa1f fb82 	uxth.w	fp, r2
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	fb0a 330b 	mla	r3, sl, fp, r3
 800a3d2:	443b      	add	r3, r7
 800a3d4:	f8d9 7000 	ldr.w	r7, [r9]
 800a3d8:	0c12      	lsrs	r2, r2, #16
 800a3da:	0c3f      	lsrs	r7, r7, #16
 800a3dc:	fb0a 7202 	mla	r2, sl, r2, r7
 800a3e0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3ea:	4565      	cmp	r5, ip
 800a3ec:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a3f0:	f849 3b04 	str.w	r3, [r9], #4
 800a3f4:	d8e4      	bhi.n	800a3c0 <__multiply+0xa8>
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	50e7      	str	r7, [r4, r3]
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	3104      	adds	r1, #4
 800a3fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a402:	f1b9 0f00 	cmp.w	r9, #0
 800a406:	d020      	beq.n	800a44a <__multiply+0x132>
 800a408:	4647      	mov	r7, r8
 800a40a:	46a4      	mov	ip, r4
 800a40c:	f04f 0a00 	mov.w	sl, #0
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	f8b7 b000 	ldrh.w	fp, [r7]
 800a416:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	fb09 220b 	mla	r2, r9, fp, r2
 800a420:	4452      	add	r2, sl
 800a422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a426:	f84c 3b04 	str.w	r3, [ip], #4
 800a42a:	f857 3b04 	ldr.w	r3, [r7], #4
 800a42e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a432:	f8bc 3000 	ldrh.w	r3, [ip]
 800a436:	42bd      	cmp	r5, r7
 800a438:	fb09 330a 	mla	r3, r9, sl, r3
 800a43c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a440:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a444:	d8e5      	bhi.n	800a412 <__multiply+0xfa>
 800a446:	9a01      	ldr	r2, [sp, #4]
 800a448:	50a3      	str	r3, [r4, r2]
 800a44a:	3404      	adds	r4, #4
 800a44c:	e79f      	b.n	800a38e <__multiply+0x76>
 800a44e:	3e01      	subs	r6, #1
 800a450:	e7a1      	b.n	800a396 <__multiply+0x7e>
 800a452:	bf00      	nop
 800a454:	0800bc8a 	.word	0x0800bc8a
 800a458:	0800bc9b 	.word	0x0800bc9b

0800a45c <__pow5mult>:
 800a45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a460:	4615      	mov	r5, r2
 800a462:	f012 0203 	ands.w	r2, r2, #3
 800a466:	4607      	mov	r7, r0
 800a468:	460e      	mov	r6, r1
 800a46a:	d007      	beq.n	800a47c <__pow5mult+0x20>
 800a46c:	4c25      	ldr	r4, [pc, #148]	@ (800a504 <__pow5mult+0xa8>)
 800a46e:	3a01      	subs	r2, #1
 800a470:	2300      	movs	r3, #0
 800a472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a476:	f7ff fea7 	bl	800a1c8 <__multadd>
 800a47a:	4606      	mov	r6, r0
 800a47c:	10ad      	asrs	r5, r5, #2
 800a47e:	d03d      	beq.n	800a4fc <__pow5mult+0xa0>
 800a480:	69fc      	ldr	r4, [r7, #28]
 800a482:	b97c      	cbnz	r4, 800a4a4 <__pow5mult+0x48>
 800a484:	2010      	movs	r0, #16
 800a486:	f7ff fd87 	bl	8009f98 <malloc>
 800a48a:	4602      	mov	r2, r0
 800a48c:	61f8      	str	r0, [r7, #28]
 800a48e:	b928      	cbnz	r0, 800a49c <__pow5mult+0x40>
 800a490:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a494:	4b1c      	ldr	r3, [pc, #112]	@ (800a508 <__pow5mult+0xac>)
 800a496:	481d      	ldr	r0, [pc, #116]	@ (800a50c <__pow5mult+0xb0>)
 800a498:	f000 fbe6 	bl	800ac68 <__assert_func>
 800a49c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4a0:	6004      	str	r4, [r0, #0]
 800a4a2:	60c4      	str	r4, [r0, #12]
 800a4a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a4a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4ac:	b94c      	cbnz	r4, 800a4c2 <__pow5mult+0x66>
 800a4ae:	f240 2171 	movw	r1, #625	@ 0x271
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	f7ff ff1a 	bl	800a2ec <__i2b>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4c0:	6003      	str	r3, [r0, #0]
 800a4c2:	f04f 0900 	mov.w	r9, #0
 800a4c6:	07eb      	lsls	r3, r5, #31
 800a4c8:	d50a      	bpl.n	800a4e0 <__pow5mult+0x84>
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	f7ff ff22 	bl	800a318 <__multiply>
 800a4d4:	4680      	mov	r8, r0
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	4638      	mov	r0, r7
 800a4da:	f7ff fe53 	bl	800a184 <_Bfree>
 800a4de:	4646      	mov	r6, r8
 800a4e0:	106d      	asrs	r5, r5, #1
 800a4e2:	d00b      	beq.n	800a4fc <__pow5mult+0xa0>
 800a4e4:	6820      	ldr	r0, [r4, #0]
 800a4e6:	b938      	cbnz	r0, 800a4f8 <__pow5mult+0x9c>
 800a4e8:	4622      	mov	r2, r4
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	f7ff ff13 	bl	800a318 <__multiply>
 800a4f2:	6020      	str	r0, [r4, #0]
 800a4f4:	f8c0 9000 	str.w	r9, [r0]
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	e7e4      	b.n	800a4c6 <__pow5mult+0x6a>
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a502:	bf00      	nop
 800a504:	0800bd4c 	.word	0x0800bd4c
 800a508:	0800bc1b 	.word	0x0800bc1b
 800a50c:	0800bc9b 	.word	0x0800bc9b

0800a510 <__lshift>:
 800a510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	4607      	mov	r7, r0
 800a518:	4691      	mov	r9, r2
 800a51a:	6923      	ldr	r3, [r4, #16]
 800a51c:	6849      	ldr	r1, [r1, #4]
 800a51e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a522:	68a3      	ldr	r3, [r4, #8]
 800a524:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a528:	f108 0601 	add.w	r6, r8, #1
 800a52c:	42b3      	cmp	r3, r6
 800a52e:	db0b      	blt.n	800a548 <__lshift+0x38>
 800a530:	4638      	mov	r0, r7
 800a532:	f7ff fde7 	bl	800a104 <_Balloc>
 800a536:	4605      	mov	r5, r0
 800a538:	b948      	cbnz	r0, 800a54e <__lshift+0x3e>
 800a53a:	4602      	mov	r2, r0
 800a53c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a540:	4b27      	ldr	r3, [pc, #156]	@ (800a5e0 <__lshift+0xd0>)
 800a542:	4828      	ldr	r0, [pc, #160]	@ (800a5e4 <__lshift+0xd4>)
 800a544:	f000 fb90 	bl	800ac68 <__assert_func>
 800a548:	3101      	adds	r1, #1
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	e7ee      	b.n	800a52c <__lshift+0x1c>
 800a54e:	2300      	movs	r3, #0
 800a550:	f100 0114 	add.w	r1, r0, #20
 800a554:	f100 0210 	add.w	r2, r0, #16
 800a558:	4618      	mov	r0, r3
 800a55a:	4553      	cmp	r3, sl
 800a55c:	db33      	blt.n	800a5c6 <__lshift+0xb6>
 800a55e:	6920      	ldr	r0, [r4, #16]
 800a560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a564:	f104 0314 	add.w	r3, r4, #20
 800a568:	f019 091f 	ands.w	r9, r9, #31
 800a56c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a570:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a574:	d02b      	beq.n	800a5ce <__lshift+0xbe>
 800a576:	468a      	mov	sl, r1
 800a578:	2200      	movs	r2, #0
 800a57a:	f1c9 0e20 	rsb	lr, r9, #32
 800a57e:	6818      	ldr	r0, [r3, #0]
 800a580:	fa00 f009 	lsl.w	r0, r0, r9
 800a584:	4310      	orrs	r0, r2
 800a586:	f84a 0b04 	str.w	r0, [sl], #4
 800a58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a58e:	459c      	cmp	ip, r3
 800a590:	fa22 f20e 	lsr.w	r2, r2, lr
 800a594:	d8f3      	bhi.n	800a57e <__lshift+0x6e>
 800a596:	ebac 0304 	sub.w	r3, ip, r4
 800a59a:	3b15      	subs	r3, #21
 800a59c:	f023 0303 	bic.w	r3, r3, #3
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	f104 0015 	add.w	r0, r4, #21
 800a5a6:	4560      	cmp	r0, ip
 800a5a8:	bf88      	it	hi
 800a5aa:	2304      	movhi	r3, #4
 800a5ac:	50ca      	str	r2, [r1, r3]
 800a5ae:	b10a      	cbz	r2, 800a5b4 <__lshift+0xa4>
 800a5b0:	f108 0602 	add.w	r6, r8, #2
 800a5b4:	3e01      	subs	r6, #1
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	612e      	str	r6, [r5, #16]
 800a5bc:	f7ff fde2 	bl	800a184 <_Bfree>
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	e7c5      	b.n	800a55a <__lshift+0x4a>
 800a5ce:	3904      	subs	r1, #4
 800a5d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d4:	459c      	cmp	ip, r3
 800a5d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5da:	d8f9      	bhi.n	800a5d0 <__lshift+0xc0>
 800a5dc:	e7ea      	b.n	800a5b4 <__lshift+0xa4>
 800a5de:	bf00      	nop
 800a5e0:	0800bc8a 	.word	0x0800bc8a
 800a5e4:	0800bc9b 	.word	0x0800bc9b

0800a5e8 <__mcmp>:
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	690a      	ldr	r2, [r1, #16]
 800a5ec:	6900      	ldr	r0, [r0, #16]
 800a5ee:	b530      	push	{r4, r5, lr}
 800a5f0:	1a80      	subs	r0, r0, r2
 800a5f2:	d10e      	bne.n	800a612 <__mcmp+0x2a>
 800a5f4:	3314      	adds	r3, #20
 800a5f6:	3114      	adds	r1, #20
 800a5f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a5fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a600:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a604:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a608:	4295      	cmp	r5, r2
 800a60a:	d003      	beq.n	800a614 <__mcmp+0x2c>
 800a60c:	d205      	bcs.n	800a61a <__mcmp+0x32>
 800a60e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a612:	bd30      	pop	{r4, r5, pc}
 800a614:	42a3      	cmp	r3, r4
 800a616:	d3f3      	bcc.n	800a600 <__mcmp+0x18>
 800a618:	e7fb      	b.n	800a612 <__mcmp+0x2a>
 800a61a:	2001      	movs	r0, #1
 800a61c:	e7f9      	b.n	800a612 <__mcmp+0x2a>
	...

0800a620 <__mdiff>:
 800a620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a624:	4689      	mov	r9, r1
 800a626:	4606      	mov	r6, r0
 800a628:	4611      	mov	r1, r2
 800a62a:	4648      	mov	r0, r9
 800a62c:	4614      	mov	r4, r2
 800a62e:	f7ff ffdb 	bl	800a5e8 <__mcmp>
 800a632:	1e05      	subs	r5, r0, #0
 800a634:	d112      	bne.n	800a65c <__mdiff+0x3c>
 800a636:	4629      	mov	r1, r5
 800a638:	4630      	mov	r0, r6
 800a63a:	f7ff fd63 	bl	800a104 <_Balloc>
 800a63e:	4602      	mov	r2, r0
 800a640:	b928      	cbnz	r0, 800a64e <__mdiff+0x2e>
 800a642:	f240 2137 	movw	r1, #567	@ 0x237
 800a646:	4b3e      	ldr	r3, [pc, #248]	@ (800a740 <__mdiff+0x120>)
 800a648:	483e      	ldr	r0, [pc, #248]	@ (800a744 <__mdiff+0x124>)
 800a64a:	f000 fb0d 	bl	800ac68 <__assert_func>
 800a64e:	2301      	movs	r3, #1
 800a650:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a654:	4610      	mov	r0, r2
 800a656:	b003      	add	sp, #12
 800a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65c:	bfbc      	itt	lt
 800a65e:	464b      	movlt	r3, r9
 800a660:	46a1      	movlt	r9, r4
 800a662:	4630      	mov	r0, r6
 800a664:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a668:	bfba      	itte	lt
 800a66a:	461c      	movlt	r4, r3
 800a66c:	2501      	movlt	r5, #1
 800a66e:	2500      	movge	r5, #0
 800a670:	f7ff fd48 	bl	800a104 <_Balloc>
 800a674:	4602      	mov	r2, r0
 800a676:	b918      	cbnz	r0, 800a680 <__mdiff+0x60>
 800a678:	f240 2145 	movw	r1, #581	@ 0x245
 800a67c:	4b30      	ldr	r3, [pc, #192]	@ (800a740 <__mdiff+0x120>)
 800a67e:	e7e3      	b.n	800a648 <__mdiff+0x28>
 800a680:	f100 0b14 	add.w	fp, r0, #20
 800a684:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a688:	f109 0310 	add.w	r3, r9, #16
 800a68c:	60c5      	str	r5, [r0, #12]
 800a68e:	f04f 0c00 	mov.w	ip, #0
 800a692:	f109 0514 	add.w	r5, r9, #20
 800a696:	46d9      	mov	r9, fp
 800a698:	6926      	ldr	r6, [r4, #16]
 800a69a:	f104 0e14 	add.w	lr, r4, #20
 800a69e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a6a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	9b01      	ldr	r3, [sp, #4]
 800a6aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a6ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a6b2:	b281      	uxth	r1, r0
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	fa1f f38a 	uxth.w	r3, sl
 800a6ba:	1a5b      	subs	r3, r3, r1
 800a6bc:	0c00      	lsrs	r0, r0, #16
 800a6be:	4463      	add	r3, ip
 800a6c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a6c4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a6ce:	4576      	cmp	r6, lr
 800a6d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6d4:	f849 3b04 	str.w	r3, [r9], #4
 800a6d8:	d8e6      	bhi.n	800a6a8 <__mdiff+0x88>
 800a6da:	1b33      	subs	r3, r6, r4
 800a6dc:	3b15      	subs	r3, #21
 800a6de:	f023 0303 	bic.w	r3, r3, #3
 800a6e2:	3415      	adds	r4, #21
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	42a6      	cmp	r6, r4
 800a6e8:	bf38      	it	cc
 800a6ea:	2304      	movcc	r3, #4
 800a6ec:	441d      	add	r5, r3
 800a6ee:	445b      	add	r3, fp
 800a6f0:	461e      	mov	r6, r3
 800a6f2:	462c      	mov	r4, r5
 800a6f4:	4544      	cmp	r4, r8
 800a6f6:	d30e      	bcc.n	800a716 <__mdiff+0xf6>
 800a6f8:	f108 0103 	add.w	r1, r8, #3
 800a6fc:	1b49      	subs	r1, r1, r5
 800a6fe:	f021 0103 	bic.w	r1, r1, #3
 800a702:	3d03      	subs	r5, #3
 800a704:	45a8      	cmp	r8, r5
 800a706:	bf38      	it	cc
 800a708:	2100      	movcc	r1, #0
 800a70a:	440b      	add	r3, r1
 800a70c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a710:	b199      	cbz	r1, 800a73a <__mdiff+0x11a>
 800a712:	6117      	str	r7, [r2, #16]
 800a714:	e79e      	b.n	800a654 <__mdiff+0x34>
 800a716:	46e6      	mov	lr, ip
 800a718:	f854 1b04 	ldr.w	r1, [r4], #4
 800a71c:	fa1f fc81 	uxth.w	ip, r1
 800a720:	44f4      	add	ip, lr
 800a722:	0c08      	lsrs	r0, r1, #16
 800a724:	4471      	add	r1, lr
 800a726:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a72a:	b289      	uxth	r1, r1
 800a72c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a730:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a734:	f846 1b04 	str.w	r1, [r6], #4
 800a738:	e7dc      	b.n	800a6f4 <__mdiff+0xd4>
 800a73a:	3f01      	subs	r7, #1
 800a73c:	e7e6      	b.n	800a70c <__mdiff+0xec>
 800a73e:	bf00      	nop
 800a740:	0800bc8a 	.word	0x0800bc8a
 800a744:	0800bc9b 	.word	0x0800bc9b

0800a748 <__d2b>:
 800a748:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a74c:	2101      	movs	r1, #1
 800a74e:	4690      	mov	r8, r2
 800a750:	4699      	mov	r9, r3
 800a752:	9e08      	ldr	r6, [sp, #32]
 800a754:	f7ff fcd6 	bl	800a104 <_Balloc>
 800a758:	4604      	mov	r4, r0
 800a75a:	b930      	cbnz	r0, 800a76a <__d2b+0x22>
 800a75c:	4602      	mov	r2, r0
 800a75e:	f240 310f 	movw	r1, #783	@ 0x30f
 800a762:	4b23      	ldr	r3, [pc, #140]	@ (800a7f0 <__d2b+0xa8>)
 800a764:	4823      	ldr	r0, [pc, #140]	@ (800a7f4 <__d2b+0xac>)
 800a766:	f000 fa7f 	bl	800ac68 <__assert_func>
 800a76a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a76e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a772:	b10d      	cbz	r5, 800a778 <__d2b+0x30>
 800a774:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a778:	9301      	str	r3, [sp, #4]
 800a77a:	f1b8 0300 	subs.w	r3, r8, #0
 800a77e:	d024      	beq.n	800a7ca <__d2b+0x82>
 800a780:	4668      	mov	r0, sp
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	f7ff fd85 	bl	800a292 <__lo0bits>
 800a788:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a78c:	b1d8      	cbz	r0, 800a7c6 <__d2b+0x7e>
 800a78e:	f1c0 0320 	rsb	r3, r0, #32
 800a792:	fa02 f303 	lsl.w	r3, r2, r3
 800a796:	430b      	orrs	r3, r1
 800a798:	40c2      	lsrs	r2, r0
 800a79a:	6163      	str	r3, [r4, #20]
 800a79c:	9201      	str	r2, [sp, #4]
 800a79e:	9b01      	ldr	r3, [sp, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	bf0c      	ite	eq
 800a7a4:	2201      	moveq	r2, #1
 800a7a6:	2202      	movne	r2, #2
 800a7a8:	61a3      	str	r3, [r4, #24]
 800a7aa:	6122      	str	r2, [r4, #16]
 800a7ac:	b1ad      	cbz	r5, 800a7da <__d2b+0x92>
 800a7ae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7b2:	4405      	add	r5, r0
 800a7b4:	6035      	str	r5, [r6, #0]
 800a7b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7bc:	6018      	str	r0, [r3, #0]
 800a7be:	4620      	mov	r0, r4
 800a7c0:	b002      	add	sp, #8
 800a7c2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a7c6:	6161      	str	r1, [r4, #20]
 800a7c8:	e7e9      	b.n	800a79e <__d2b+0x56>
 800a7ca:	a801      	add	r0, sp, #4
 800a7cc:	f7ff fd61 	bl	800a292 <__lo0bits>
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	6163      	str	r3, [r4, #20]
 800a7d6:	3020      	adds	r0, #32
 800a7d8:	e7e7      	b.n	800a7aa <__d2b+0x62>
 800a7da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a7de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7e2:	6030      	str	r0, [r6, #0]
 800a7e4:	6918      	ldr	r0, [r3, #16]
 800a7e6:	f7ff fd35 	bl	800a254 <__hi0bits>
 800a7ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7ee:	e7e4      	b.n	800a7ba <__d2b+0x72>
 800a7f0:	0800bc8a 	.word	0x0800bc8a
 800a7f4:	0800bc9b 	.word	0x0800bc9b

0800a7f8 <__ssputs_r>:
 800a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7fc:	461f      	mov	r7, r3
 800a7fe:	688e      	ldr	r6, [r1, #8]
 800a800:	4682      	mov	sl, r0
 800a802:	42be      	cmp	r6, r7
 800a804:	460c      	mov	r4, r1
 800a806:	4690      	mov	r8, r2
 800a808:	680b      	ldr	r3, [r1, #0]
 800a80a:	d82d      	bhi.n	800a868 <__ssputs_r+0x70>
 800a80c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a810:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a814:	d026      	beq.n	800a864 <__ssputs_r+0x6c>
 800a816:	6965      	ldr	r5, [r4, #20]
 800a818:	6909      	ldr	r1, [r1, #16]
 800a81a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a81e:	eba3 0901 	sub.w	r9, r3, r1
 800a822:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a826:	1c7b      	adds	r3, r7, #1
 800a828:	444b      	add	r3, r9
 800a82a:	106d      	asrs	r5, r5, #1
 800a82c:	429d      	cmp	r5, r3
 800a82e:	bf38      	it	cc
 800a830:	461d      	movcc	r5, r3
 800a832:	0553      	lsls	r3, r2, #21
 800a834:	d527      	bpl.n	800a886 <__ssputs_r+0x8e>
 800a836:	4629      	mov	r1, r5
 800a838:	f7ff fbd8 	bl	8009fec <_malloc_r>
 800a83c:	4606      	mov	r6, r0
 800a83e:	b360      	cbz	r0, 800a89a <__ssputs_r+0xa2>
 800a840:	464a      	mov	r2, r9
 800a842:	6921      	ldr	r1, [r4, #16]
 800a844:	f000 fa02 	bl	800ac4c <memcpy>
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a84e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a852:	81a3      	strh	r3, [r4, #12]
 800a854:	6126      	str	r6, [r4, #16]
 800a856:	444e      	add	r6, r9
 800a858:	6026      	str	r6, [r4, #0]
 800a85a:	463e      	mov	r6, r7
 800a85c:	6165      	str	r5, [r4, #20]
 800a85e:	eba5 0509 	sub.w	r5, r5, r9
 800a862:	60a5      	str	r5, [r4, #8]
 800a864:	42be      	cmp	r6, r7
 800a866:	d900      	bls.n	800a86a <__ssputs_r+0x72>
 800a868:	463e      	mov	r6, r7
 800a86a:	4632      	mov	r2, r6
 800a86c:	4641      	mov	r1, r8
 800a86e:	6820      	ldr	r0, [r4, #0]
 800a870:	f000 f9c2 	bl	800abf8 <memmove>
 800a874:	2000      	movs	r0, #0
 800a876:	68a3      	ldr	r3, [r4, #8]
 800a878:	1b9b      	subs	r3, r3, r6
 800a87a:	60a3      	str	r3, [r4, #8]
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	4433      	add	r3, r6
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a886:	462a      	mov	r2, r5
 800a888:	f000 fa32 	bl	800acf0 <_realloc_r>
 800a88c:	4606      	mov	r6, r0
 800a88e:	2800      	cmp	r0, #0
 800a890:	d1e0      	bne.n	800a854 <__ssputs_r+0x5c>
 800a892:	4650      	mov	r0, sl
 800a894:	6921      	ldr	r1, [r4, #16]
 800a896:	f7ff fb37 	bl	8009f08 <_free_r>
 800a89a:	230c      	movs	r3, #12
 800a89c:	f8ca 3000 	str.w	r3, [sl]
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8aa:	81a3      	strh	r3, [r4, #12]
 800a8ac:	e7e9      	b.n	800a882 <__ssputs_r+0x8a>
	...

0800a8b0 <_svfiprintf_r>:
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	4698      	mov	r8, r3
 800a8b6:	898b      	ldrh	r3, [r1, #12]
 800a8b8:	4607      	mov	r7, r0
 800a8ba:	061b      	lsls	r3, r3, #24
 800a8bc:	460d      	mov	r5, r1
 800a8be:	4614      	mov	r4, r2
 800a8c0:	b09d      	sub	sp, #116	@ 0x74
 800a8c2:	d510      	bpl.n	800a8e6 <_svfiprintf_r+0x36>
 800a8c4:	690b      	ldr	r3, [r1, #16]
 800a8c6:	b973      	cbnz	r3, 800a8e6 <_svfiprintf_r+0x36>
 800a8c8:	2140      	movs	r1, #64	@ 0x40
 800a8ca:	f7ff fb8f 	bl	8009fec <_malloc_r>
 800a8ce:	6028      	str	r0, [r5, #0]
 800a8d0:	6128      	str	r0, [r5, #16]
 800a8d2:	b930      	cbnz	r0, 800a8e2 <_svfiprintf_r+0x32>
 800a8d4:	230c      	movs	r3, #12
 800a8d6:	603b      	str	r3, [r7, #0]
 800a8d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8dc:	b01d      	add	sp, #116	@ 0x74
 800a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e2:	2340      	movs	r3, #64	@ 0x40
 800a8e4:	616b      	str	r3, [r5, #20]
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ea:	2320      	movs	r3, #32
 800a8ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8f0:	2330      	movs	r3, #48	@ 0x30
 800a8f2:	f04f 0901 	mov.w	r9, #1
 800a8f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800aa94 <_svfiprintf_r+0x1e4>
 800a8fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a902:	4623      	mov	r3, r4
 800a904:	469a      	mov	sl, r3
 800a906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a90a:	b10a      	cbz	r2, 800a910 <_svfiprintf_r+0x60>
 800a90c:	2a25      	cmp	r2, #37	@ 0x25
 800a90e:	d1f9      	bne.n	800a904 <_svfiprintf_r+0x54>
 800a910:	ebba 0b04 	subs.w	fp, sl, r4
 800a914:	d00b      	beq.n	800a92e <_svfiprintf_r+0x7e>
 800a916:	465b      	mov	r3, fp
 800a918:	4622      	mov	r2, r4
 800a91a:	4629      	mov	r1, r5
 800a91c:	4638      	mov	r0, r7
 800a91e:	f7ff ff6b 	bl	800a7f8 <__ssputs_r>
 800a922:	3001      	adds	r0, #1
 800a924:	f000 80a7 	beq.w	800aa76 <_svfiprintf_r+0x1c6>
 800a928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a92a:	445a      	add	r2, fp
 800a92c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a92e:	f89a 3000 	ldrb.w	r3, [sl]
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 809f 	beq.w	800aa76 <_svfiprintf_r+0x1c6>
 800a938:	2300      	movs	r3, #0
 800a93a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a93e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a942:	f10a 0a01 	add.w	sl, sl, #1
 800a946:	9304      	str	r3, [sp, #16]
 800a948:	9307      	str	r3, [sp, #28]
 800a94a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a94e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a950:	4654      	mov	r4, sl
 800a952:	2205      	movs	r2, #5
 800a954:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a958:	484e      	ldr	r0, [pc, #312]	@ (800aa94 <_svfiprintf_r+0x1e4>)
 800a95a:	f7fe fc68 	bl	800922e <memchr>
 800a95e:	9a04      	ldr	r2, [sp, #16]
 800a960:	b9d8      	cbnz	r0, 800a99a <_svfiprintf_r+0xea>
 800a962:	06d0      	lsls	r0, r2, #27
 800a964:	bf44      	itt	mi
 800a966:	2320      	movmi	r3, #32
 800a968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a96c:	0711      	lsls	r1, r2, #28
 800a96e:	bf44      	itt	mi
 800a970:	232b      	movmi	r3, #43	@ 0x2b
 800a972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a976:	f89a 3000 	ldrb.w	r3, [sl]
 800a97a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a97c:	d015      	beq.n	800a9aa <_svfiprintf_r+0xfa>
 800a97e:	4654      	mov	r4, sl
 800a980:	2000      	movs	r0, #0
 800a982:	f04f 0c0a 	mov.w	ip, #10
 800a986:	9a07      	ldr	r2, [sp, #28]
 800a988:	4621      	mov	r1, r4
 800a98a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a98e:	3b30      	subs	r3, #48	@ 0x30
 800a990:	2b09      	cmp	r3, #9
 800a992:	d94b      	bls.n	800aa2c <_svfiprintf_r+0x17c>
 800a994:	b1b0      	cbz	r0, 800a9c4 <_svfiprintf_r+0x114>
 800a996:	9207      	str	r2, [sp, #28]
 800a998:	e014      	b.n	800a9c4 <_svfiprintf_r+0x114>
 800a99a:	eba0 0308 	sub.w	r3, r0, r8
 800a99e:	fa09 f303 	lsl.w	r3, r9, r3
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	46a2      	mov	sl, r4
 800a9a6:	9304      	str	r3, [sp, #16]
 800a9a8:	e7d2      	b.n	800a950 <_svfiprintf_r+0xa0>
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	1d19      	adds	r1, r3, #4
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	9103      	str	r1, [sp, #12]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	bfbb      	ittet	lt
 800a9b6:	425b      	neglt	r3, r3
 800a9b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a9bc:	9307      	strge	r3, [sp, #28]
 800a9be:	9307      	strlt	r3, [sp, #28]
 800a9c0:	bfb8      	it	lt
 800a9c2:	9204      	strlt	r2, [sp, #16]
 800a9c4:	7823      	ldrb	r3, [r4, #0]
 800a9c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9c8:	d10a      	bne.n	800a9e0 <_svfiprintf_r+0x130>
 800a9ca:	7863      	ldrb	r3, [r4, #1]
 800a9cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9ce:	d132      	bne.n	800aa36 <_svfiprintf_r+0x186>
 800a9d0:	9b03      	ldr	r3, [sp, #12]
 800a9d2:	3402      	adds	r4, #2
 800a9d4:	1d1a      	adds	r2, r3, #4
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	9203      	str	r2, [sp, #12]
 800a9da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9de:	9305      	str	r3, [sp, #20]
 800a9e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800aa98 <_svfiprintf_r+0x1e8>
 800a9e4:	2203      	movs	r2, #3
 800a9e6:	4650      	mov	r0, sl
 800a9e8:	7821      	ldrb	r1, [r4, #0]
 800a9ea:	f7fe fc20 	bl	800922e <memchr>
 800a9ee:	b138      	cbz	r0, 800aa00 <_svfiprintf_r+0x150>
 800a9f0:	2240      	movs	r2, #64	@ 0x40
 800a9f2:	9b04      	ldr	r3, [sp, #16]
 800a9f4:	eba0 000a 	sub.w	r0, r0, sl
 800a9f8:	4082      	lsls	r2, r0
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	3401      	adds	r4, #1
 800a9fe:	9304      	str	r3, [sp, #16]
 800aa00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa04:	2206      	movs	r2, #6
 800aa06:	4825      	ldr	r0, [pc, #148]	@ (800aa9c <_svfiprintf_r+0x1ec>)
 800aa08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa0c:	f7fe fc0f 	bl	800922e <memchr>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d036      	beq.n	800aa82 <_svfiprintf_r+0x1d2>
 800aa14:	4b22      	ldr	r3, [pc, #136]	@ (800aaa0 <_svfiprintf_r+0x1f0>)
 800aa16:	bb1b      	cbnz	r3, 800aa60 <_svfiprintf_r+0x1b0>
 800aa18:	9b03      	ldr	r3, [sp, #12]
 800aa1a:	3307      	adds	r3, #7
 800aa1c:	f023 0307 	bic.w	r3, r3, #7
 800aa20:	3308      	adds	r3, #8
 800aa22:	9303      	str	r3, [sp, #12]
 800aa24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa26:	4433      	add	r3, r6
 800aa28:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa2a:	e76a      	b.n	800a902 <_svfiprintf_r+0x52>
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	2001      	movs	r0, #1
 800aa30:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa34:	e7a8      	b.n	800a988 <_svfiprintf_r+0xd8>
 800aa36:	2300      	movs	r3, #0
 800aa38:	f04f 0c0a 	mov.w	ip, #10
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	3401      	adds	r4, #1
 800aa40:	9305      	str	r3, [sp, #20]
 800aa42:	4620      	mov	r0, r4
 800aa44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa48:	3a30      	subs	r2, #48	@ 0x30
 800aa4a:	2a09      	cmp	r2, #9
 800aa4c:	d903      	bls.n	800aa56 <_svfiprintf_r+0x1a6>
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d0c6      	beq.n	800a9e0 <_svfiprintf_r+0x130>
 800aa52:	9105      	str	r1, [sp, #20]
 800aa54:	e7c4      	b.n	800a9e0 <_svfiprintf_r+0x130>
 800aa56:	4604      	mov	r4, r0
 800aa58:	2301      	movs	r3, #1
 800aa5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa5e:	e7f0      	b.n	800aa42 <_svfiprintf_r+0x192>
 800aa60:	ab03      	add	r3, sp, #12
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	462a      	mov	r2, r5
 800aa66:	4638      	mov	r0, r7
 800aa68:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa4 <_svfiprintf_r+0x1f4>)
 800aa6a:	a904      	add	r1, sp, #16
 800aa6c:	f7fd fe7c 	bl	8008768 <_printf_float>
 800aa70:	1c42      	adds	r2, r0, #1
 800aa72:	4606      	mov	r6, r0
 800aa74:	d1d6      	bne.n	800aa24 <_svfiprintf_r+0x174>
 800aa76:	89ab      	ldrh	r3, [r5, #12]
 800aa78:	065b      	lsls	r3, r3, #25
 800aa7a:	f53f af2d 	bmi.w	800a8d8 <_svfiprintf_r+0x28>
 800aa7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa80:	e72c      	b.n	800a8dc <_svfiprintf_r+0x2c>
 800aa82:	ab03      	add	r3, sp, #12
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	462a      	mov	r2, r5
 800aa88:	4638      	mov	r0, r7
 800aa8a:	4b06      	ldr	r3, [pc, #24]	@ (800aaa4 <_svfiprintf_r+0x1f4>)
 800aa8c:	a904      	add	r1, sp, #16
 800aa8e:	f7fe f909 	bl	8008ca4 <_printf_i>
 800aa92:	e7ed      	b.n	800aa70 <_svfiprintf_r+0x1c0>
 800aa94:	0800bcf4 	.word	0x0800bcf4
 800aa98:	0800bcfa 	.word	0x0800bcfa
 800aa9c:	0800bcfe 	.word	0x0800bcfe
 800aaa0:	08008769 	.word	0x08008769
 800aaa4:	0800a7f9 	.word	0x0800a7f9

0800aaa8 <__sflush_r>:
 800aaa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaae:	0716      	lsls	r6, r2, #28
 800aab0:	4605      	mov	r5, r0
 800aab2:	460c      	mov	r4, r1
 800aab4:	d454      	bmi.n	800ab60 <__sflush_r+0xb8>
 800aab6:	684b      	ldr	r3, [r1, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	dc02      	bgt.n	800aac2 <__sflush_r+0x1a>
 800aabc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	dd48      	ble.n	800ab54 <__sflush_r+0xac>
 800aac2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aac4:	2e00      	cmp	r6, #0
 800aac6:	d045      	beq.n	800ab54 <__sflush_r+0xac>
 800aac8:	2300      	movs	r3, #0
 800aaca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aace:	682f      	ldr	r7, [r5, #0]
 800aad0:	6a21      	ldr	r1, [r4, #32]
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	d030      	beq.n	800ab38 <__sflush_r+0x90>
 800aad6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	0759      	lsls	r1, r3, #29
 800aadc:	d505      	bpl.n	800aaea <__sflush_r+0x42>
 800aade:	6863      	ldr	r3, [r4, #4]
 800aae0:	1ad2      	subs	r2, r2, r3
 800aae2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aae4:	b10b      	cbz	r3, 800aaea <__sflush_r+0x42>
 800aae6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aae8:	1ad2      	subs	r2, r2, r3
 800aaea:	2300      	movs	r3, #0
 800aaec:	4628      	mov	r0, r5
 800aaee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aaf0:	6a21      	ldr	r1, [r4, #32]
 800aaf2:	47b0      	blx	r6
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	d106      	bne.n	800ab08 <__sflush_r+0x60>
 800aafa:	6829      	ldr	r1, [r5, #0]
 800aafc:	291d      	cmp	r1, #29
 800aafe:	d82b      	bhi.n	800ab58 <__sflush_r+0xb0>
 800ab00:	4a28      	ldr	r2, [pc, #160]	@ (800aba4 <__sflush_r+0xfc>)
 800ab02:	40ca      	lsrs	r2, r1
 800ab04:	07d6      	lsls	r6, r2, #31
 800ab06:	d527      	bpl.n	800ab58 <__sflush_r+0xb0>
 800ab08:	2200      	movs	r2, #0
 800ab0a:	6062      	str	r2, [r4, #4]
 800ab0c:	6922      	ldr	r2, [r4, #16]
 800ab0e:	04d9      	lsls	r1, r3, #19
 800ab10:	6022      	str	r2, [r4, #0]
 800ab12:	d504      	bpl.n	800ab1e <__sflush_r+0x76>
 800ab14:	1c42      	adds	r2, r0, #1
 800ab16:	d101      	bne.n	800ab1c <__sflush_r+0x74>
 800ab18:	682b      	ldr	r3, [r5, #0]
 800ab1a:	b903      	cbnz	r3, 800ab1e <__sflush_r+0x76>
 800ab1c:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab20:	602f      	str	r7, [r5, #0]
 800ab22:	b1b9      	cbz	r1, 800ab54 <__sflush_r+0xac>
 800ab24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab28:	4299      	cmp	r1, r3
 800ab2a:	d002      	beq.n	800ab32 <__sflush_r+0x8a>
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f7ff f9eb 	bl	8009f08 <_free_r>
 800ab32:	2300      	movs	r3, #0
 800ab34:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab36:	e00d      	b.n	800ab54 <__sflush_r+0xac>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	47b0      	blx	r6
 800ab3e:	4602      	mov	r2, r0
 800ab40:	1c50      	adds	r0, r2, #1
 800ab42:	d1c9      	bne.n	800aad8 <__sflush_r+0x30>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d0c6      	beq.n	800aad8 <__sflush_r+0x30>
 800ab4a:	2b1d      	cmp	r3, #29
 800ab4c:	d001      	beq.n	800ab52 <__sflush_r+0xaa>
 800ab4e:	2b16      	cmp	r3, #22
 800ab50:	d11d      	bne.n	800ab8e <__sflush_r+0xe6>
 800ab52:	602f      	str	r7, [r5, #0]
 800ab54:	2000      	movs	r0, #0
 800ab56:	e021      	b.n	800ab9c <__sflush_r+0xf4>
 800ab58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab5c:	b21b      	sxth	r3, r3
 800ab5e:	e01a      	b.n	800ab96 <__sflush_r+0xee>
 800ab60:	690f      	ldr	r7, [r1, #16]
 800ab62:	2f00      	cmp	r7, #0
 800ab64:	d0f6      	beq.n	800ab54 <__sflush_r+0xac>
 800ab66:	0793      	lsls	r3, r2, #30
 800ab68:	bf18      	it	ne
 800ab6a:	2300      	movne	r3, #0
 800ab6c:	680e      	ldr	r6, [r1, #0]
 800ab6e:	bf08      	it	eq
 800ab70:	694b      	ldreq	r3, [r1, #20]
 800ab72:	1bf6      	subs	r6, r6, r7
 800ab74:	600f      	str	r7, [r1, #0]
 800ab76:	608b      	str	r3, [r1, #8]
 800ab78:	2e00      	cmp	r6, #0
 800ab7a:	ddeb      	ble.n	800ab54 <__sflush_r+0xac>
 800ab7c:	4633      	mov	r3, r6
 800ab7e:	463a      	mov	r2, r7
 800ab80:	4628      	mov	r0, r5
 800ab82:	6a21      	ldr	r1, [r4, #32]
 800ab84:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ab88:	47e0      	blx	ip
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	dc07      	bgt.n	800ab9e <__sflush_r+0xf6>
 800ab8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab9e:	4407      	add	r7, r0
 800aba0:	1a36      	subs	r6, r6, r0
 800aba2:	e7e9      	b.n	800ab78 <__sflush_r+0xd0>
 800aba4:	20400001 	.word	0x20400001

0800aba8 <_fflush_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	690b      	ldr	r3, [r1, #16]
 800abac:	4605      	mov	r5, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	b913      	cbnz	r3, 800abb8 <_fflush_r+0x10>
 800abb2:	2500      	movs	r5, #0
 800abb4:	4628      	mov	r0, r5
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	b118      	cbz	r0, 800abc2 <_fflush_r+0x1a>
 800abba:	6a03      	ldr	r3, [r0, #32]
 800abbc:	b90b      	cbnz	r3, 800abc2 <_fflush_r+0x1a>
 800abbe:	f7fe fa1b 	bl	8008ff8 <__sinit>
 800abc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d0f3      	beq.n	800abb2 <_fflush_r+0xa>
 800abca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abcc:	07d0      	lsls	r0, r2, #31
 800abce:	d404      	bmi.n	800abda <_fflush_r+0x32>
 800abd0:	0599      	lsls	r1, r3, #22
 800abd2:	d402      	bmi.n	800abda <_fflush_r+0x32>
 800abd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abd6:	f7fe fb28 	bl	800922a <__retarget_lock_acquire_recursive>
 800abda:	4628      	mov	r0, r5
 800abdc:	4621      	mov	r1, r4
 800abde:	f7ff ff63 	bl	800aaa8 <__sflush_r>
 800abe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abe4:	4605      	mov	r5, r0
 800abe6:	07da      	lsls	r2, r3, #31
 800abe8:	d4e4      	bmi.n	800abb4 <_fflush_r+0xc>
 800abea:	89a3      	ldrh	r3, [r4, #12]
 800abec:	059b      	lsls	r3, r3, #22
 800abee:	d4e1      	bmi.n	800abb4 <_fflush_r+0xc>
 800abf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abf2:	f7fe fb1b 	bl	800922c <__retarget_lock_release_recursive>
 800abf6:	e7dd      	b.n	800abb4 <_fflush_r+0xc>

0800abf8 <memmove>:
 800abf8:	4288      	cmp	r0, r1
 800abfa:	b510      	push	{r4, lr}
 800abfc:	eb01 0402 	add.w	r4, r1, r2
 800ac00:	d902      	bls.n	800ac08 <memmove+0x10>
 800ac02:	4284      	cmp	r4, r0
 800ac04:	4623      	mov	r3, r4
 800ac06:	d807      	bhi.n	800ac18 <memmove+0x20>
 800ac08:	1e43      	subs	r3, r0, #1
 800ac0a:	42a1      	cmp	r1, r4
 800ac0c:	d008      	beq.n	800ac20 <memmove+0x28>
 800ac0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac16:	e7f8      	b.n	800ac0a <memmove+0x12>
 800ac18:	4601      	mov	r1, r0
 800ac1a:	4402      	add	r2, r0
 800ac1c:	428a      	cmp	r2, r1
 800ac1e:	d100      	bne.n	800ac22 <memmove+0x2a>
 800ac20:	bd10      	pop	{r4, pc}
 800ac22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac2a:	e7f7      	b.n	800ac1c <memmove+0x24>

0800ac2c <_sbrk_r>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4d05      	ldr	r5, [pc, #20]	@ (800ac48 <_sbrk_r+0x1c>)
 800ac32:	4604      	mov	r4, r0
 800ac34:	4608      	mov	r0, r1
 800ac36:	602b      	str	r3, [r5, #0]
 800ac38:	f7f8 fb82 	bl	8003340 <_sbrk>
 800ac3c:	1c43      	adds	r3, r0, #1
 800ac3e:	d102      	bne.n	800ac46 <_sbrk_r+0x1a>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	b103      	cbz	r3, 800ac46 <_sbrk_r+0x1a>
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	200009fc 	.word	0x200009fc

0800ac4c <memcpy>:
 800ac4c:	440a      	add	r2, r1
 800ac4e:	4291      	cmp	r1, r2
 800ac50:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ac54:	d100      	bne.n	800ac58 <memcpy+0xc>
 800ac56:	4770      	bx	lr
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac5e:	4291      	cmp	r1, r2
 800ac60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac64:	d1f9      	bne.n	800ac5a <memcpy+0xe>
 800ac66:	bd10      	pop	{r4, pc}

0800ac68 <__assert_func>:
 800ac68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac6a:	4614      	mov	r4, r2
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	4b09      	ldr	r3, [pc, #36]	@ (800ac94 <__assert_func+0x2c>)
 800ac70:	4605      	mov	r5, r0
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68d8      	ldr	r0, [r3, #12]
 800ac76:	b14c      	cbz	r4, 800ac8c <__assert_func+0x24>
 800ac78:	4b07      	ldr	r3, [pc, #28]	@ (800ac98 <__assert_func+0x30>)
 800ac7a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac7e:	9100      	str	r1, [sp, #0]
 800ac80:	462b      	mov	r3, r5
 800ac82:	4906      	ldr	r1, [pc, #24]	@ (800ac9c <__assert_func+0x34>)
 800ac84:	f000 f870 	bl	800ad68 <fiprintf>
 800ac88:	f000 f880 	bl	800ad8c <abort>
 800ac8c:	4b04      	ldr	r3, [pc, #16]	@ (800aca0 <__assert_func+0x38>)
 800ac8e:	461c      	mov	r4, r3
 800ac90:	e7f3      	b.n	800ac7a <__assert_func+0x12>
 800ac92:	bf00      	nop
 800ac94:	2000003c 	.word	0x2000003c
 800ac98:	0800bd0f 	.word	0x0800bd0f
 800ac9c:	0800bd1c 	.word	0x0800bd1c
 800aca0:	0800bd4a 	.word	0x0800bd4a

0800aca4 <_calloc_r>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	fba1 5402 	umull	r5, r4, r1, r2
 800acaa:	b934      	cbnz	r4, 800acba <_calloc_r+0x16>
 800acac:	4629      	mov	r1, r5
 800acae:	f7ff f99d 	bl	8009fec <_malloc_r>
 800acb2:	4606      	mov	r6, r0
 800acb4:	b928      	cbnz	r0, 800acc2 <_calloc_r+0x1e>
 800acb6:	4630      	mov	r0, r6
 800acb8:	bd70      	pop	{r4, r5, r6, pc}
 800acba:	220c      	movs	r2, #12
 800acbc:	2600      	movs	r6, #0
 800acbe:	6002      	str	r2, [r0, #0]
 800acc0:	e7f9      	b.n	800acb6 <_calloc_r+0x12>
 800acc2:	462a      	mov	r2, r5
 800acc4:	4621      	mov	r1, r4
 800acc6:	f7fe fa32 	bl	800912e <memset>
 800acca:	e7f4      	b.n	800acb6 <_calloc_r+0x12>

0800accc <__ascii_mbtowc>:
 800accc:	b082      	sub	sp, #8
 800acce:	b901      	cbnz	r1, 800acd2 <__ascii_mbtowc+0x6>
 800acd0:	a901      	add	r1, sp, #4
 800acd2:	b142      	cbz	r2, 800ace6 <__ascii_mbtowc+0x1a>
 800acd4:	b14b      	cbz	r3, 800acea <__ascii_mbtowc+0x1e>
 800acd6:	7813      	ldrb	r3, [r2, #0]
 800acd8:	600b      	str	r3, [r1, #0]
 800acda:	7812      	ldrb	r2, [r2, #0]
 800acdc:	1e10      	subs	r0, r2, #0
 800acde:	bf18      	it	ne
 800ace0:	2001      	movne	r0, #1
 800ace2:	b002      	add	sp, #8
 800ace4:	4770      	bx	lr
 800ace6:	4610      	mov	r0, r2
 800ace8:	e7fb      	b.n	800ace2 <__ascii_mbtowc+0x16>
 800acea:	f06f 0001 	mvn.w	r0, #1
 800acee:	e7f8      	b.n	800ace2 <__ascii_mbtowc+0x16>

0800acf0 <_realloc_r>:
 800acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf4:	4607      	mov	r7, r0
 800acf6:	4614      	mov	r4, r2
 800acf8:	460d      	mov	r5, r1
 800acfa:	b921      	cbnz	r1, 800ad06 <_realloc_r+0x16>
 800acfc:	4611      	mov	r1, r2
 800acfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad02:	f7ff b973 	b.w	8009fec <_malloc_r>
 800ad06:	b92a      	cbnz	r2, 800ad14 <_realloc_r+0x24>
 800ad08:	f7ff f8fe 	bl	8009f08 <_free_r>
 800ad0c:	4625      	mov	r5, r4
 800ad0e:	4628      	mov	r0, r5
 800ad10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad14:	f000 f841 	bl	800ad9a <_malloc_usable_size_r>
 800ad18:	4284      	cmp	r4, r0
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	d802      	bhi.n	800ad24 <_realloc_r+0x34>
 800ad1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad22:	d8f4      	bhi.n	800ad0e <_realloc_r+0x1e>
 800ad24:	4621      	mov	r1, r4
 800ad26:	4638      	mov	r0, r7
 800ad28:	f7ff f960 	bl	8009fec <_malloc_r>
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	b908      	cbnz	r0, 800ad34 <_realloc_r+0x44>
 800ad30:	4645      	mov	r5, r8
 800ad32:	e7ec      	b.n	800ad0e <_realloc_r+0x1e>
 800ad34:	42b4      	cmp	r4, r6
 800ad36:	4622      	mov	r2, r4
 800ad38:	4629      	mov	r1, r5
 800ad3a:	bf28      	it	cs
 800ad3c:	4632      	movcs	r2, r6
 800ad3e:	f7ff ff85 	bl	800ac4c <memcpy>
 800ad42:	4629      	mov	r1, r5
 800ad44:	4638      	mov	r0, r7
 800ad46:	f7ff f8df 	bl	8009f08 <_free_r>
 800ad4a:	e7f1      	b.n	800ad30 <_realloc_r+0x40>

0800ad4c <__ascii_wctomb>:
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	4608      	mov	r0, r1
 800ad50:	b141      	cbz	r1, 800ad64 <__ascii_wctomb+0x18>
 800ad52:	2aff      	cmp	r2, #255	@ 0xff
 800ad54:	d904      	bls.n	800ad60 <__ascii_wctomb+0x14>
 800ad56:	228a      	movs	r2, #138	@ 0x8a
 800ad58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	4770      	bx	lr
 800ad60:	2001      	movs	r0, #1
 800ad62:	700a      	strb	r2, [r1, #0]
 800ad64:	4770      	bx	lr
	...

0800ad68 <fiprintf>:
 800ad68:	b40e      	push	{r1, r2, r3}
 800ad6a:	b503      	push	{r0, r1, lr}
 800ad6c:	4601      	mov	r1, r0
 800ad6e:	ab03      	add	r3, sp, #12
 800ad70:	4805      	ldr	r0, [pc, #20]	@ (800ad88 <fiprintf+0x20>)
 800ad72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad76:	6800      	ldr	r0, [r0, #0]
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	f000 f83d 	bl	800adf8 <_vfiprintf_r>
 800ad7e:	b002      	add	sp, #8
 800ad80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad84:	b003      	add	sp, #12
 800ad86:	4770      	bx	lr
 800ad88:	2000003c 	.word	0x2000003c

0800ad8c <abort>:
 800ad8c:	2006      	movs	r0, #6
 800ad8e:	b508      	push	{r3, lr}
 800ad90:	f000 fa06 	bl	800b1a0 <raise>
 800ad94:	2001      	movs	r0, #1
 800ad96:	f7f8 fa5e 	bl	8003256 <_exit>

0800ad9a <_malloc_usable_size_r>:
 800ad9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad9e:	1f18      	subs	r0, r3, #4
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	bfbc      	itt	lt
 800ada4:	580b      	ldrlt	r3, [r1, r0]
 800ada6:	18c0      	addlt	r0, r0, r3
 800ada8:	4770      	bx	lr

0800adaa <__sfputc_r>:
 800adaa:	6893      	ldr	r3, [r2, #8]
 800adac:	b410      	push	{r4}
 800adae:	3b01      	subs	r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	6093      	str	r3, [r2, #8]
 800adb4:	da07      	bge.n	800adc6 <__sfputc_r+0x1c>
 800adb6:	6994      	ldr	r4, [r2, #24]
 800adb8:	42a3      	cmp	r3, r4
 800adba:	db01      	blt.n	800adc0 <__sfputc_r+0x16>
 800adbc:	290a      	cmp	r1, #10
 800adbe:	d102      	bne.n	800adc6 <__sfputc_r+0x1c>
 800adc0:	bc10      	pop	{r4}
 800adc2:	f000 b931 	b.w	800b028 <__swbuf_r>
 800adc6:	6813      	ldr	r3, [r2, #0]
 800adc8:	1c58      	adds	r0, r3, #1
 800adca:	6010      	str	r0, [r2, #0]
 800adcc:	7019      	strb	r1, [r3, #0]
 800adce:	4608      	mov	r0, r1
 800add0:	bc10      	pop	{r4}
 800add2:	4770      	bx	lr

0800add4 <__sfputs_r>:
 800add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add6:	4606      	mov	r6, r0
 800add8:	460f      	mov	r7, r1
 800adda:	4614      	mov	r4, r2
 800addc:	18d5      	adds	r5, r2, r3
 800adde:	42ac      	cmp	r4, r5
 800ade0:	d101      	bne.n	800ade6 <__sfputs_r+0x12>
 800ade2:	2000      	movs	r0, #0
 800ade4:	e007      	b.n	800adf6 <__sfputs_r+0x22>
 800ade6:	463a      	mov	r2, r7
 800ade8:	4630      	mov	r0, r6
 800adea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adee:	f7ff ffdc 	bl	800adaa <__sfputc_r>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	d1f3      	bne.n	800adde <__sfputs_r+0xa>
 800adf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adf8 <_vfiprintf_r>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	460d      	mov	r5, r1
 800adfe:	4614      	mov	r4, r2
 800ae00:	4698      	mov	r8, r3
 800ae02:	4606      	mov	r6, r0
 800ae04:	b09d      	sub	sp, #116	@ 0x74
 800ae06:	b118      	cbz	r0, 800ae10 <_vfiprintf_r+0x18>
 800ae08:	6a03      	ldr	r3, [r0, #32]
 800ae0a:	b90b      	cbnz	r3, 800ae10 <_vfiprintf_r+0x18>
 800ae0c:	f7fe f8f4 	bl	8008ff8 <__sinit>
 800ae10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae12:	07d9      	lsls	r1, r3, #31
 800ae14:	d405      	bmi.n	800ae22 <_vfiprintf_r+0x2a>
 800ae16:	89ab      	ldrh	r3, [r5, #12]
 800ae18:	059a      	lsls	r2, r3, #22
 800ae1a:	d402      	bmi.n	800ae22 <_vfiprintf_r+0x2a>
 800ae1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae1e:	f7fe fa04 	bl	800922a <__retarget_lock_acquire_recursive>
 800ae22:	89ab      	ldrh	r3, [r5, #12]
 800ae24:	071b      	lsls	r3, r3, #28
 800ae26:	d501      	bpl.n	800ae2c <_vfiprintf_r+0x34>
 800ae28:	692b      	ldr	r3, [r5, #16]
 800ae2a:	b99b      	cbnz	r3, 800ae54 <_vfiprintf_r+0x5c>
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f000 f938 	bl	800b0a4 <__swsetup_r>
 800ae34:	b170      	cbz	r0, 800ae54 <_vfiprintf_r+0x5c>
 800ae36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae38:	07dc      	lsls	r4, r3, #31
 800ae3a:	d504      	bpl.n	800ae46 <_vfiprintf_r+0x4e>
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae40:	b01d      	add	sp, #116	@ 0x74
 800ae42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae46:	89ab      	ldrh	r3, [r5, #12]
 800ae48:	0598      	lsls	r0, r3, #22
 800ae4a:	d4f7      	bmi.n	800ae3c <_vfiprintf_r+0x44>
 800ae4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae4e:	f7fe f9ed 	bl	800922c <__retarget_lock_release_recursive>
 800ae52:	e7f3      	b.n	800ae3c <_vfiprintf_r+0x44>
 800ae54:	2300      	movs	r3, #0
 800ae56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae58:	2320      	movs	r3, #32
 800ae5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae5e:	2330      	movs	r3, #48	@ 0x30
 800ae60:	f04f 0901 	mov.w	r9, #1
 800ae64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae68:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b014 <_vfiprintf_r+0x21c>
 800ae6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae70:	4623      	mov	r3, r4
 800ae72:	469a      	mov	sl, r3
 800ae74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae78:	b10a      	cbz	r2, 800ae7e <_vfiprintf_r+0x86>
 800ae7a:	2a25      	cmp	r2, #37	@ 0x25
 800ae7c:	d1f9      	bne.n	800ae72 <_vfiprintf_r+0x7a>
 800ae7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae82:	d00b      	beq.n	800ae9c <_vfiprintf_r+0xa4>
 800ae84:	465b      	mov	r3, fp
 800ae86:	4622      	mov	r2, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f7ff ffa2 	bl	800add4 <__sfputs_r>
 800ae90:	3001      	adds	r0, #1
 800ae92:	f000 80a7 	beq.w	800afe4 <_vfiprintf_r+0x1ec>
 800ae96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae98:	445a      	add	r2, fp
 800ae9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae9c:	f89a 3000 	ldrb.w	r3, [sl]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 809f 	beq.w	800afe4 <_vfiprintf_r+0x1ec>
 800aea6:	2300      	movs	r3, #0
 800aea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aeac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeb0:	f10a 0a01 	add.w	sl, sl, #1
 800aeb4:	9304      	str	r3, [sp, #16]
 800aeb6:	9307      	str	r3, [sp, #28]
 800aeb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aebc:	931a      	str	r3, [sp, #104]	@ 0x68
 800aebe:	4654      	mov	r4, sl
 800aec0:	2205      	movs	r2, #5
 800aec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec6:	4853      	ldr	r0, [pc, #332]	@ (800b014 <_vfiprintf_r+0x21c>)
 800aec8:	f7fe f9b1 	bl	800922e <memchr>
 800aecc:	9a04      	ldr	r2, [sp, #16]
 800aece:	b9d8      	cbnz	r0, 800af08 <_vfiprintf_r+0x110>
 800aed0:	06d1      	lsls	r1, r2, #27
 800aed2:	bf44      	itt	mi
 800aed4:	2320      	movmi	r3, #32
 800aed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeda:	0713      	lsls	r3, r2, #28
 800aedc:	bf44      	itt	mi
 800aede:	232b      	movmi	r3, #43	@ 0x2b
 800aee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aee4:	f89a 3000 	ldrb.w	r3, [sl]
 800aee8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeea:	d015      	beq.n	800af18 <_vfiprintf_r+0x120>
 800aeec:	4654      	mov	r4, sl
 800aeee:	2000      	movs	r0, #0
 800aef0:	f04f 0c0a 	mov.w	ip, #10
 800aef4:	9a07      	ldr	r2, [sp, #28]
 800aef6:	4621      	mov	r1, r4
 800aef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aefc:	3b30      	subs	r3, #48	@ 0x30
 800aefe:	2b09      	cmp	r3, #9
 800af00:	d94b      	bls.n	800af9a <_vfiprintf_r+0x1a2>
 800af02:	b1b0      	cbz	r0, 800af32 <_vfiprintf_r+0x13a>
 800af04:	9207      	str	r2, [sp, #28]
 800af06:	e014      	b.n	800af32 <_vfiprintf_r+0x13a>
 800af08:	eba0 0308 	sub.w	r3, r0, r8
 800af0c:	fa09 f303 	lsl.w	r3, r9, r3
 800af10:	4313      	orrs	r3, r2
 800af12:	46a2      	mov	sl, r4
 800af14:	9304      	str	r3, [sp, #16]
 800af16:	e7d2      	b.n	800aebe <_vfiprintf_r+0xc6>
 800af18:	9b03      	ldr	r3, [sp, #12]
 800af1a:	1d19      	adds	r1, r3, #4
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	9103      	str	r1, [sp, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	bfbb      	ittet	lt
 800af24:	425b      	neglt	r3, r3
 800af26:	f042 0202 	orrlt.w	r2, r2, #2
 800af2a:	9307      	strge	r3, [sp, #28]
 800af2c:	9307      	strlt	r3, [sp, #28]
 800af2e:	bfb8      	it	lt
 800af30:	9204      	strlt	r2, [sp, #16]
 800af32:	7823      	ldrb	r3, [r4, #0]
 800af34:	2b2e      	cmp	r3, #46	@ 0x2e
 800af36:	d10a      	bne.n	800af4e <_vfiprintf_r+0x156>
 800af38:	7863      	ldrb	r3, [r4, #1]
 800af3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800af3c:	d132      	bne.n	800afa4 <_vfiprintf_r+0x1ac>
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	3402      	adds	r4, #2
 800af42:	1d1a      	adds	r2, r3, #4
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	9203      	str	r2, [sp, #12]
 800af48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af4c:	9305      	str	r3, [sp, #20]
 800af4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b018 <_vfiprintf_r+0x220>
 800af52:	2203      	movs	r2, #3
 800af54:	4650      	mov	r0, sl
 800af56:	7821      	ldrb	r1, [r4, #0]
 800af58:	f7fe f969 	bl	800922e <memchr>
 800af5c:	b138      	cbz	r0, 800af6e <_vfiprintf_r+0x176>
 800af5e:	2240      	movs	r2, #64	@ 0x40
 800af60:	9b04      	ldr	r3, [sp, #16]
 800af62:	eba0 000a 	sub.w	r0, r0, sl
 800af66:	4082      	lsls	r2, r0
 800af68:	4313      	orrs	r3, r2
 800af6a:	3401      	adds	r4, #1
 800af6c:	9304      	str	r3, [sp, #16]
 800af6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af72:	2206      	movs	r2, #6
 800af74:	4829      	ldr	r0, [pc, #164]	@ (800b01c <_vfiprintf_r+0x224>)
 800af76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af7a:	f7fe f958 	bl	800922e <memchr>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d03f      	beq.n	800b002 <_vfiprintf_r+0x20a>
 800af82:	4b27      	ldr	r3, [pc, #156]	@ (800b020 <_vfiprintf_r+0x228>)
 800af84:	bb1b      	cbnz	r3, 800afce <_vfiprintf_r+0x1d6>
 800af86:	9b03      	ldr	r3, [sp, #12]
 800af88:	3307      	adds	r3, #7
 800af8a:	f023 0307 	bic.w	r3, r3, #7
 800af8e:	3308      	adds	r3, #8
 800af90:	9303      	str	r3, [sp, #12]
 800af92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af94:	443b      	add	r3, r7
 800af96:	9309      	str	r3, [sp, #36]	@ 0x24
 800af98:	e76a      	b.n	800ae70 <_vfiprintf_r+0x78>
 800af9a:	460c      	mov	r4, r1
 800af9c:	2001      	movs	r0, #1
 800af9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800afa2:	e7a8      	b.n	800aef6 <_vfiprintf_r+0xfe>
 800afa4:	2300      	movs	r3, #0
 800afa6:	f04f 0c0a 	mov.w	ip, #10
 800afaa:	4619      	mov	r1, r3
 800afac:	3401      	adds	r4, #1
 800afae:	9305      	str	r3, [sp, #20]
 800afb0:	4620      	mov	r0, r4
 800afb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afb6:	3a30      	subs	r2, #48	@ 0x30
 800afb8:	2a09      	cmp	r2, #9
 800afba:	d903      	bls.n	800afc4 <_vfiprintf_r+0x1cc>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0c6      	beq.n	800af4e <_vfiprintf_r+0x156>
 800afc0:	9105      	str	r1, [sp, #20]
 800afc2:	e7c4      	b.n	800af4e <_vfiprintf_r+0x156>
 800afc4:	4604      	mov	r4, r0
 800afc6:	2301      	movs	r3, #1
 800afc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800afcc:	e7f0      	b.n	800afb0 <_vfiprintf_r+0x1b8>
 800afce:	ab03      	add	r3, sp, #12
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	462a      	mov	r2, r5
 800afd4:	4630      	mov	r0, r6
 800afd6:	4b13      	ldr	r3, [pc, #76]	@ (800b024 <_vfiprintf_r+0x22c>)
 800afd8:	a904      	add	r1, sp, #16
 800afda:	f7fd fbc5 	bl	8008768 <_printf_float>
 800afde:	4607      	mov	r7, r0
 800afe0:	1c78      	adds	r0, r7, #1
 800afe2:	d1d6      	bne.n	800af92 <_vfiprintf_r+0x19a>
 800afe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afe6:	07d9      	lsls	r1, r3, #31
 800afe8:	d405      	bmi.n	800aff6 <_vfiprintf_r+0x1fe>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	059a      	lsls	r2, r3, #22
 800afee:	d402      	bmi.n	800aff6 <_vfiprintf_r+0x1fe>
 800aff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aff2:	f7fe f91b 	bl	800922c <__retarget_lock_release_recursive>
 800aff6:	89ab      	ldrh	r3, [r5, #12]
 800aff8:	065b      	lsls	r3, r3, #25
 800affa:	f53f af1f 	bmi.w	800ae3c <_vfiprintf_r+0x44>
 800affe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b000:	e71e      	b.n	800ae40 <_vfiprintf_r+0x48>
 800b002:	ab03      	add	r3, sp, #12
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	462a      	mov	r2, r5
 800b008:	4630      	mov	r0, r6
 800b00a:	4b06      	ldr	r3, [pc, #24]	@ (800b024 <_vfiprintf_r+0x22c>)
 800b00c:	a904      	add	r1, sp, #16
 800b00e:	f7fd fe49 	bl	8008ca4 <_printf_i>
 800b012:	e7e4      	b.n	800afde <_vfiprintf_r+0x1e6>
 800b014:	0800bcf4 	.word	0x0800bcf4
 800b018:	0800bcfa 	.word	0x0800bcfa
 800b01c:	0800bcfe 	.word	0x0800bcfe
 800b020:	08008769 	.word	0x08008769
 800b024:	0800add5 	.word	0x0800add5

0800b028 <__swbuf_r>:
 800b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02a:	460e      	mov	r6, r1
 800b02c:	4614      	mov	r4, r2
 800b02e:	4605      	mov	r5, r0
 800b030:	b118      	cbz	r0, 800b03a <__swbuf_r+0x12>
 800b032:	6a03      	ldr	r3, [r0, #32]
 800b034:	b90b      	cbnz	r3, 800b03a <__swbuf_r+0x12>
 800b036:	f7fd ffdf 	bl	8008ff8 <__sinit>
 800b03a:	69a3      	ldr	r3, [r4, #24]
 800b03c:	60a3      	str	r3, [r4, #8]
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	071a      	lsls	r2, r3, #28
 800b042:	d501      	bpl.n	800b048 <__swbuf_r+0x20>
 800b044:	6923      	ldr	r3, [r4, #16]
 800b046:	b943      	cbnz	r3, 800b05a <__swbuf_r+0x32>
 800b048:	4621      	mov	r1, r4
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 f82a 	bl	800b0a4 <__swsetup_r>
 800b050:	b118      	cbz	r0, 800b05a <__swbuf_r+0x32>
 800b052:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b056:	4638      	mov	r0, r7
 800b058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	6922      	ldr	r2, [r4, #16]
 800b05e:	b2f6      	uxtb	r6, r6
 800b060:	1a98      	subs	r0, r3, r2
 800b062:	6963      	ldr	r3, [r4, #20]
 800b064:	4637      	mov	r7, r6
 800b066:	4283      	cmp	r3, r0
 800b068:	dc05      	bgt.n	800b076 <__swbuf_r+0x4e>
 800b06a:	4621      	mov	r1, r4
 800b06c:	4628      	mov	r0, r5
 800b06e:	f7ff fd9b 	bl	800aba8 <_fflush_r>
 800b072:	2800      	cmp	r0, #0
 800b074:	d1ed      	bne.n	800b052 <__swbuf_r+0x2a>
 800b076:	68a3      	ldr	r3, [r4, #8]
 800b078:	3b01      	subs	r3, #1
 800b07a:	60a3      	str	r3, [r4, #8]
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	6022      	str	r2, [r4, #0]
 800b082:	701e      	strb	r6, [r3, #0]
 800b084:	6962      	ldr	r2, [r4, #20]
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	429a      	cmp	r2, r3
 800b08a:	d004      	beq.n	800b096 <__swbuf_r+0x6e>
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	07db      	lsls	r3, r3, #31
 800b090:	d5e1      	bpl.n	800b056 <__swbuf_r+0x2e>
 800b092:	2e0a      	cmp	r6, #10
 800b094:	d1df      	bne.n	800b056 <__swbuf_r+0x2e>
 800b096:	4621      	mov	r1, r4
 800b098:	4628      	mov	r0, r5
 800b09a:	f7ff fd85 	bl	800aba8 <_fflush_r>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d0d9      	beq.n	800b056 <__swbuf_r+0x2e>
 800b0a2:	e7d6      	b.n	800b052 <__swbuf_r+0x2a>

0800b0a4 <__swsetup_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4b29      	ldr	r3, [pc, #164]	@ (800b14c <__swsetup_r+0xa8>)
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	b118      	cbz	r0, 800b0b8 <__swsetup_r+0x14>
 800b0b0:	6a03      	ldr	r3, [r0, #32]
 800b0b2:	b90b      	cbnz	r3, 800b0b8 <__swsetup_r+0x14>
 800b0b4:	f7fd ffa0 	bl	8008ff8 <__sinit>
 800b0b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0bc:	0719      	lsls	r1, r3, #28
 800b0be:	d422      	bmi.n	800b106 <__swsetup_r+0x62>
 800b0c0:	06da      	lsls	r2, r3, #27
 800b0c2:	d407      	bmi.n	800b0d4 <__swsetup_r+0x30>
 800b0c4:	2209      	movs	r2, #9
 800b0c6:	602a      	str	r2, [r5, #0]
 800b0c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	e033      	b.n	800b13c <__swsetup_r+0x98>
 800b0d4:	0758      	lsls	r0, r3, #29
 800b0d6:	d512      	bpl.n	800b0fe <__swsetup_r+0x5a>
 800b0d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0da:	b141      	cbz	r1, 800b0ee <__swsetup_r+0x4a>
 800b0dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0e0:	4299      	cmp	r1, r3
 800b0e2:	d002      	beq.n	800b0ea <__swsetup_r+0x46>
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f7fe ff0f 	bl	8009f08 <_free_r>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0f4:	81a3      	strh	r3, [r4, #12]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	6063      	str	r3, [r4, #4]
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	f043 0308 	orr.w	r3, r3, #8
 800b104:	81a3      	strh	r3, [r4, #12]
 800b106:	6923      	ldr	r3, [r4, #16]
 800b108:	b94b      	cbnz	r3, 800b11e <__swsetup_r+0x7a>
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b114:	d003      	beq.n	800b11e <__swsetup_r+0x7a>
 800b116:	4621      	mov	r1, r4
 800b118:	4628      	mov	r0, r5
 800b11a:	f000 f882 	bl	800b222 <__smakebuf_r>
 800b11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b122:	f013 0201 	ands.w	r2, r3, #1
 800b126:	d00a      	beq.n	800b13e <__swsetup_r+0x9a>
 800b128:	2200      	movs	r2, #0
 800b12a:	60a2      	str	r2, [r4, #8]
 800b12c:	6962      	ldr	r2, [r4, #20]
 800b12e:	4252      	negs	r2, r2
 800b130:	61a2      	str	r2, [r4, #24]
 800b132:	6922      	ldr	r2, [r4, #16]
 800b134:	b942      	cbnz	r2, 800b148 <__swsetup_r+0xa4>
 800b136:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b13a:	d1c5      	bne.n	800b0c8 <__swsetup_r+0x24>
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	0799      	lsls	r1, r3, #30
 800b140:	bf58      	it	pl
 800b142:	6962      	ldrpl	r2, [r4, #20]
 800b144:	60a2      	str	r2, [r4, #8]
 800b146:	e7f4      	b.n	800b132 <__swsetup_r+0x8e>
 800b148:	2000      	movs	r0, #0
 800b14a:	e7f7      	b.n	800b13c <__swsetup_r+0x98>
 800b14c:	2000003c 	.word	0x2000003c

0800b150 <_raise_r>:
 800b150:	291f      	cmp	r1, #31
 800b152:	b538      	push	{r3, r4, r5, lr}
 800b154:	4605      	mov	r5, r0
 800b156:	460c      	mov	r4, r1
 800b158:	d904      	bls.n	800b164 <_raise_r+0x14>
 800b15a:	2316      	movs	r3, #22
 800b15c:	6003      	str	r3, [r0, #0]
 800b15e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b166:	b112      	cbz	r2, 800b16e <_raise_r+0x1e>
 800b168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b16c:	b94b      	cbnz	r3, 800b182 <_raise_r+0x32>
 800b16e:	4628      	mov	r0, r5
 800b170:	f000 f830 	bl	800b1d4 <_getpid_r>
 800b174:	4622      	mov	r2, r4
 800b176:	4601      	mov	r1, r0
 800b178:	4628      	mov	r0, r5
 800b17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b17e:	f000 b817 	b.w	800b1b0 <_kill_r>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d00a      	beq.n	800b19c <_raise_r+0x4c>
 800b186:	1c59      	adds	r1, r3, #1
 800b188:	d103      	bne.n	800b192 <_raise_r+0x42>
 800b18a:	2316      	movs	r3, #22
 800b18c:	6003      	str	r3, [r0, #0]
 800b18e:	2001      	movs	r0, #1
 800b190:	e7e7      	b.n	800b162 <_raise_r+0x12>
 800b192:	2100      	movs	r1, #0
 800b194:	4620      	mov	r0, r4
 800b196:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b19a:	4798      	blx	r3
 800b19c:	2000      	movs	r0, #0
 800b19e:	e7e0      	b.n	800b162 <_raise_r+0x12>

0800b1a0 <raise>:
 800b1a0:	4b02      	ldr	r3, [pc, #8]	@ (800b1ac <raise+0xc>)
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	f7ff bfd3 	b.w	800b150 <_raise_r>
 800b1aa:	bf00      	nop
 800b1ac:	2000003c 	.word	0x2000003c

0800b1b0 <_kill_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4d06      	ldr	r5, [pc, #24]	@ (800b1d0 <_kill_r+0x20>)
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	602b      	str	r3, [r5, #0]
 800b1be:	f7f8 f83a 	bl	8003236 <_kill>
 800b1c2:	1c43      	adds	r3, r0, #1
 800b1c4:	d102      	bne.n	800b1cc <_kill_r+0x1c>
 800b1c6:	682b      	ldr	r3, [r5, #0]
 800b1c8:	b103      	cbz	r3, 800b1cc <_kill_r+0x1c>
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	bd38      	pop	{r3, r4, r5, pc}
 800b1ce:	bf00      	nop
 800b1d0:	200009fc 	.word	0x200009fc

0800b1d4 <_getpid_r>:
 800b1d4:	f7f8 b828 	b.w	8003228 <_getpid>

0800b1d8 <__swhatbuf_r>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	460c      	mov	r4, r1
 800b1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	2900      	cmp	r1, #0
 800b1e4:	461e      	mov	r6, r3
 800b1e6:	b096      	sub	sp, #88	@ 0x58
 800b1e8:	da0c      	bge.n	800b204 <__swhatbuf_r+0x2c>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1f2:	bf14      	ite	ne
 800b1f4:	2340      	movne	r3, #64	@ 0x40
 800b1f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	6031      	str	r1, [r6, #0]
 800b1fe:	602b      	str	r3, [r5, #0]
 800b200:	b016      	add	sp, #88	@ 0x58
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	466a      	mov	r2, sp
 800b206:	f000 f849 	bl	800b29c <_fstat_r>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	dbed      	blt.n	800b1ea <__swhatbuf_r+0x12>
 800b20e:	9901      	ldr	r1, [sp, #4]
 800b210:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b214:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b218:	4259      	negs	r1, r3
 800b21a:	4159      	adcs	r1, r3
 800b21c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b220:	e7eb      	b.n	800b1fa <__swhatbuf_r+0x22>

0800b222 <__smakebuf_r>:
 800b222:	898b      	ldrh	r3, [r1, #12]
 800b224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b226:	079d      	lsls	r5, r3, #30
 800b228:	4606      	mov	r6, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	d507      	bpl.n	800b23e <__smakebuf_r+0x1c>
 800b22e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b232:	6023      	str	r3, [r4, #0]
 800b234:	6123      	str	r3, [r4, #16]
 800b236:	2301      	movs	r3, #1
 800b238:	6163      	str	r3, [r4, #20]
 800b23a:	b003      	add	sp, #12
 800b23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b23e:	466a      	mov	r2, sp
 800b240:	ab01      	add	r3, sp, #4
 800b242:	f7ff ffc9 	bl	800b1d8 <__swhatbuf_r>
 800b246:	9f00      	ldr	r7, [sp, #0]
 800b248:	4605      	mov	r5, r0
 800b24a:	4639      	mov	r1, r7
 800b24c:	4630      	mov	r0, r6
 800b24e:	f7fe fecd 	bl	8009fec <_malloc_r>
 800b252:	b948      	cbnz	r0, 800b268 <__smakebuf_r+0x46>
 800b254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b258:	059a      	lsls	r2, r3, #22
 800b25a:	d4ee      	bmi.n	800b23a <__smakebuf_r+0x18>
 800b25c:	f023 0303 	bic.w	r3, r3, #3
 800b260:	f043 0302 	orr.w	r3, r3, #2
 800b264:	81a3      	strh	r3, [r4, #12]
 800b266:	e7e2      	b.n	800b22e <__smakebuf_r+0xc>
 800b268:	89a3      	ldrh	r3, [r4, #12]
 800b26a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b26e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b272:	81a3      	strh	r3, [r4, #12]
 800b274:	9b01      	ldr	r3, [sp, #4]
 800b276:	6020      	str	r0, [r4, #0]
 800b278:	b15b      	cbz	r3, 800b292 <__smakebuf_r+0x70>
 800b27a:	4630      	mov	r0, r6
 800b27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b280:	f000 f81e 	bl	800b2c0 <_isatty_r>
 800b284:	b128      	cbz	r0, 800b292 <__smakebuf_r+0x70>
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	f023 0303 	bic.w	r3, r3, #3
 800b28c:	f043 0301 	orr.w	r3, r3, #1
 800b290:	81a3      	strh	r3, [r4, #12]
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	431d      	orrs	r5, r3
 800b296:	81a5      	strh	r5, [r4, #12]
 800b298:	e7cf      	b.n	800b23a <__smakebuf_r+0x18>
	...

0800b29c <_fstat_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	2300      	movs	r3, #0
 800b2a0:	4d06      	ldr	r5, [pc, #24]	@ (800b2bc <_fstat_r+0x20>)
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	f7f8 f823 	bl	80032f4 <_fstat>
 800b2ae:	1c43      	adds	r3, r0, #1
 800b2b0:	d102      	bne.n	800b2b8 <_fstat_r+0x1c>
 800b2b2:	682b      	ldr	r3, [r5, #0]
 800b2b4:	b103      	cbz	r3, 800b2b8 <_fstat_r+0x1c>
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ba:	bf00      	nop
 800b2bc:	200009fc 	.word	0x200009fc

0800b2c0 <_isatty_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	4d05      	ldr	r5, [pc, #20]	@ (800b2dc <_isatty_r+0x1c>)
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	602b      	str	r3, [r5, #0]
 800b2cc:	f7f8 f821 	bl	8003312 <_isatty>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_isatty_r+0x1a>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_isatty_r+0x1a>
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	200009fc 	.word	0x200009fc

0800b2e0 <_init>:
 800b2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e2:	bf00      	nop
 800b2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2e6:	bc08      	pop	{r3}
 800b2e8:	469e      	mov	lr, r3
 800b2ea:	4770      	bx	lr

0800b2ec <_fini>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	bf00      	nop
 800b2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f2:	bc08      	pop	{r3}
 800b2f4:	469e      	mov	lr, r3
 800b2f6:	4770      	bx	lr
