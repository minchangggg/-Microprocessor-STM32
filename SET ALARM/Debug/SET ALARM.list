
SET ALARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a560  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  0800a670  0800a670  0000b670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b244  0800b244  0000d1f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b244  0800b244  0000c244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b24c  0800b24c  0000d1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b24c  0800b24c  0000c24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b250  0800b250  0000c250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800b254  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  200001f8  0800b44c  0000d1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  0800b44c  0000da0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013700  00000000  00000000  0000d221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003005  00000000  00000000  00020921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00023928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ede  00000000  00000000  00024c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ff5  00000000  00000000  00025afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b91  00000000  00000000  0003faf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa24  00000000  00000000  00055684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e50a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000607c  00000000  00000000  000e50ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000eb168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a658 	.word	0x0800a658

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800a658 	.word	0x0800a658

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <Send_cmd>:
#define Cmd_Len    0x06
#define Feedback   0x00    // If need for Feedback: 0x01, No Feedback: 0x00

// Gửi lệnh tới DFPlayer qua UART
static void Send_cmd(UART_HandleTypeDef *huart, uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	70fb      	strb	r3, [r7, #3]
 8000f56:	460b      	mov	r3, r1
 8000f58:	70bb      	strb	r3, [r7, #2]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	707b      	strb	r3, [r7, #1]
    uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	78bb      	ldrb	r3, [r7, #2]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	4413      	add	r3, r2
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	787b      	ldrb	r3, [r7, #1]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f203 1305 	addw	r3, r3, #261	@ 0x105
 8000f76:	82fb      	strh	r3, [r7, #22]
    Checksum = 0 - Checksum;
 8000f78:	8afb      	ldrh	r3, [r7, #22]
 8000f7a:	425b      	negs	r3, r3
 8000f7c:	82fb      	strh	r3, [r7, #22]

    uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8000f7e:	237e      	movs	r3, #126	@ 0x7e
 8000f80:	733b      	strb	r3, [r7, #12]
 8000f82:	23ff      	movs	r3, #255	@ 0xff
 8000f84:	737b      	strb	r3, [r7, #13]
 8000f86:	2306      	movs	r3, #6
 8000f88:	73bb      	strb	r3, [r7, #14]
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	743b      	strb	r3, [r7, #16]
 8000f92:	78bb      	ldrb	r3, [r7, #2]
 8000f94:	747b      	strb	r3, [r7, #17]
 8000f96:	787b      	ldrb	r3, [r7, #1]
 8000f98:	74bb      	strb	r3, [r7, #18]
 8000f9a:	8afb      	ldrh	r3, [r7, #22]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	74fb      	strb	r3, [r7, #19]
 8000fa4:	8afb      	ldrh	r3, [r7, #22]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	753b      	strb	r3, [r7, #20]
 8000faa:	23ef      	movs	r3, #239	@ 0xef
 8000fac:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(huart, CmdSequence, 10, 1000);
 8000fae:	f107 010c 	add.w	r1, r7, #12
 8000fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb6:	220a      	movs	r2, #10
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f006 fb21 	bl	8007600 <HAL_UART_Transmit>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <DF_Init>:

// Khởi tạo context cho DFPlayer
void DF_Init(DFPlayer_Context *ctx, UART_HandleTypeDef *huart, uint8_t volume)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71fb      	strb	r3, [r7, #7]
    ctx->huart = huart;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	601a      	str	r2, [r3, #0]
    ctx->state = DF_INIT;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	711a      	strb	r2, [r3, #4]
    ctx->volume = volume;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	79fa      	ldrb	r2, [r7, #7]
 8000fe4:	715a      	strb	r2, [r3, #5]
    ctx->is_playing = 1;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	741a      	strb	r2, [r3, #16]
    ctx->is_paused = 0;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	745a      	strb	r2, [r3, #17]
    ctx->delay_start = 0;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
    ctx->delay_duration = 0;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <DF_Update>:

// Hàm cập nhật trạng thái của DFPlayer
void DF_Update(DFPlayer_Context *ctx)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    switch (ctx->state)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	791b      	ldrb	r3, [r3, #4]
 8001014:	2b08      	cmp	r3, #8
 8001016:	f200 80d0 	bhi.w	80011ba <DF_Update+0x1b2>
 800101a:	a201      	add	r2, pc, #4	@ (adr r2, 8001020 <DF_Update+0x18>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	080011c3 	.word	0x080011c3
 8001024:	08001045 	.word	0x08001045
 8001028:	0800106d 	.word	0x0800106d
 800102c:	080010af 	.word	0x080010af
 8001030:	080010cf 	.word	0x080010cf
 8001034:	08001103 	.word	0x08001103
 8001038:	0800116b 	.word	0x0800116b
 800103c:	08001193 	.word	0x08001193
 8001040:	08001137 	.word	0x08001137
            // Không làm gì, chờ yêu cầu
            break;

        case DF_INIT:
            // Bắt đầu chọn nguồn (TF card)
            Send_cmd(ctx->huart, 0x3F, 0x00, Source);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	2302      	movs	r3, #2
 800104a:	2200      	movs	r2, #0
 800104c:	213f      	movs	r1, #63	@ 0x3f
 800104e:	f7ff ff79 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3308      	adds	r3, #8
 8001056:	4619      	mov	r1, r3
 8001058:	2032      	movs	r0, #50	@ 0x32
 800105a:	f000 f8ef 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2232      	movs	r2, #50	@ 0x32
 8001062:	60da      	str	r2, [r3, #12]
            ctx->state = DF_INIT_SOURCE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2202      	movs	r2, #2
 8001068:	711a      	strb	r2, [r3, #4]
            break;
 800106a:	e0af      	b.n	80011cc <DF_Update+0x1c4>

        case DF_INIT_SOURCE:
            // Chờ delay hoàn tất trước khi đặt âm lượng
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_duration))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4619      	mov	r1, r3
 8001076:	4610      	mov	r0, r2
 8001078:	f000 f8ee 	bl	8001258 <is_delay_ms_complete>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 80a1 	beq.w	80011c6 <DF_Update+0x1be>
            {
                Send_cmd(ctx->huart, 0x06, 0x00, ctx->volume);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	795b      	ldrb	r3, [r3, #5]
 800108c:	2200      	movs	r2, #0
 800108e:	2106      	movs	r1, #6
 8001090:	f7ff ff58 	bl	8000f44 <Send_cmd>
                delay_ms_nonblocking(100, &ctx->delay_start);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3308      	adds	r3, #8
 8001098:	4619      	mov	r1, r3
 800109a:	2064      	movs	r0, #100	@ 0x64
 800109c:	f000 f8ce 	bl	800123c <delay_ms_nonblocking>
                ctx->delay_duration = 100;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2264      	movs	r2, #100	@ 0x64
 80010a4:	60da      	str	r2, [r3, #12]
                ctx->state = DF_INIT_VOLUME;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	711a      	strb	r2, [r3, #4]
            }
            break;
 80010ac:	e08b      	b.n	80011c6 <DF_Update+0x1be>

        case DF_INIT_VOLUME:
            // Chờ delay hoàn tất, sau đó chuyển về trạng thái IDLE
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_duration))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f000 f8cd 	bl	8001258 <is_delay_ms_complete>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 8082 	beq.w	80011ca <DF_Update+0x1c2>
            {
                ctx->state = DF_IDLE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	711a      	strb	r2, [r3, #4]
            }
            break;
 80010cc:	e07d      	b.n	80011ca <DF_Update+0x1c2>

        case DF_PLAY:
            // Phát nhạc từ đầu
            Send_cmd(ctx->huart, 0x03, 0x00, 0x01);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	2200      	movs	r2, #0
 80010d6:	2103      	movs	r1, #3
 80010d8:	f7ff ff34 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3308      	adds	r3, #8
 80010e0:	4619      	mov	r1, r3
 80010e2:	2032      	movs	r0, #50	@ 0x32
 80010e4:	f000 f8aa 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2232      	movs	r2, #50	@ 0x32
 80010ec:	60da      	str	r2, [r3, #12]
            ctx->is_playing = 1;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	741a      	strb	r2, [r3, #16]
            ctx->is_paused = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	745a      	strb	r2, [r3, #17]
            ctx->state = DF_IDLE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	711a      	strb	r2, [r3, #4]
            break;
 8001100:	e064      	b.n	80011cc <DF_Update+0x1c4>

        case DF_PAUSE:
            // Tạm dừng nhạc
            Send_cmd(ctx->huart, 0x0E, 0x00, 0x00);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	2200      	movs	r2, #0
 800110a:	210e      	movs	r1, #14
 800110c:	f7ff ff1a 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3308      	adds	r3, #8
 8001114:	4619      	mov	r1, r3
 8001116:	2032      	movs	r0, #50	@ 0x32
 8001118:	f000 f890 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2232      	movs	r2, #50	@ 0x32
 8001120:	60da      	str	r2, [r3, #12]
            ctx->is_playing = 0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	741a      	strb	r2, [r3, #16]
            ctx->is_paused = 1;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	745a      	strb	r2, [r3, #17]
            ctx->state = DF_IDLE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	711a      	strb	r2, [r3, #4]
            break;
 8001134:	e04a      	b.n	80011cc <DF_Update+0x1c4>

        case DF_PLAYBACK:
            // Tiếp tục phát nhạc
            Send_cmd(ctx->huart, 0x0D, 0x00, 0x00);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	2300      	movs	r3, #0
 800113c:	2200      	movs	r2, #0
 800113e:	210d      	movs	r1, #13
 8001140:	f7ff ff00 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3308      	adds	r3, #8
 8001148:	4619      	mov	r1, r3
 800114a:	2032      	movs	r0, #50	@ 0x32
 800114c:	f000 f876 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2232      	movs	r2, #50	@ 0x32
 8001154:	60da      	str	r2, [r3, #12]
            ctx->is_playing = 1;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	741a      	strb	r2, [r3, #16]
            ctx->is_paused = 0;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	745a      	strb	r2, [r3, #17]
            ctx->state = DF_IDLE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	711a      	strb	r2, [r3, #4]
            break;
 8001168:	e030      	b.n	80011cc <DF_Update+0x1c4>

        case DF_NEXT:
            // Chuyển bài tiếp theo
            Send_cmd(ctx->huart, 0x01, 0x00, 0x00);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	2300      	movs	r3, #0
 8001170:	2200      	movs	r2, #0
 8001172:	2101      	movs	r1, #1
 8001174:	f7ff fee6 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3308      	adds	r3, #8
 800117c:	4619      	mov	r1, r3
 800117e:	2032      	movs	r0, #50	@ 0x32
 8001180:	f000 f85c 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2232      	movs	r2, #50	@ 0x32
 8001188:	60da      	str	r2, [r3, #12]
            ctx->state = DF_IDLE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	711a      	strb	r2, [r3, #4]
            break;
 8001190:	e01c      	b.n	80011cc <DF_Update+0x1c4>

        case DF_PREVIOUS:
            // Quay lại bài trước
            Send_cmd(ctx->huart, 0x02, 0x00, 0x00);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	2200      	movs	r2, #0
 800119a:	2102      	movs	r1, #2
 800119c:	f7ff fed2 	bl	8000f44 <Send_cmd>
            delay_ms_nonblocking(50, &ctx->delay_start);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3308      	adds	r3, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	2032      	movs	r0, #50	@ 0x32
 80011a8:	f000 f848 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_duration = 50;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2232      	movs	r2, #50	@ 0x32
 80011b0:	60da      	str	r2, [r3, #12]
            ctx->state = DF_IDLE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	711a      	strb	r2, [r3, #4]
            break;
 80011b8:	e008      	b.n	80011cc <DF_Update+0x1c4>

        default:
            ctx->state = DF_IDLE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	711a      	strb	r2, [r3, #4]
            break;
 80011c0:	e004      	b.n	80011cc <DF_Update+0x1c4>
            break;
 80011c2:	bf00      	nop
 80011c4:	e002      	b.n	80011cc <DF_Update+0x1c4>
            break;
 80011c6:	bf00      	nop
 80011c8:	e000      	b.n	80011cc <DF_Update+0x1c4>
            break;
 80011ca:	bf00      	nop
    }
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <DF_PlayFromStart>:

// Yêu cầu phát nhạc từ đầu
void DF_PlayFromStart(DFPlayer_Context *ctx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    if (ctx->state == DF_IDLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <DF_PlayFromStart+0x16>
    {
        ctx->state = DF_PLAY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2204      	movs	r2, #4
 80011e8:	711a      	strb	r2, [r3, #4]
    }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <DF_Pause>:

// Yêu cầu tạm dừng
void DF_Pause(DFPlayer_Context *ctx)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    if (ctx->state == DF_IDLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	791b      	ldrb	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <DF_Pause+0x16>
    {
        ctx->state = DF_PAUSE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2205      	movs	r2, #5
 8001208:	711a      	strb	r2, [r3, #4]
    }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <delay_init>:
#include "delay.h"

extern TIM_HandleTypeDef htim1;  // TIM1 được khai báo trong main.c

// Khởi tạo delay không chặn
void delay_init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    // Đảm bảo TIM1 đã được cấu hình (Prescaler = 7, ARR = 999 để ngắt mỗi 1ms)
    HAL_TIM_Base_Start_IT(&htim1);
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <delay_init+0x10>)
 800121a:	f005 fdff 	bl	8006e1c <HAL_TIM_Base_Start_IT>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000026c 	.word	0x2000026c

08001228 <get_tick_ms>:
//        tick_us += 1000;  // Tăng biến đếm micro giây (1000 µs = 1 ms)
//    }
//}

// Lấy giá trị tick hiện tại (mili giây)
uint32_t get_tick_ms(void) {
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
    return tick_ms;
 800122c:	4b02      	ldr	r3, [pc, #8]	@ (8001238 <get_tick_ms+0x10>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	200003d4 	.word	0x200003d4

0800123c <delay_ms_nonblocking>:
    // Kết hợp tick_ms và giá trị hiện tại của TIM1 counter để tính micro giây
    return (tick_ms * 1000) + __HAL_TIM_GET_COUNTER(&htim1);
}

// Bắt đầu độ trễ mili giây (non-blocking)
void delay_ms_nonblocking(uint32_t ms, uint32_t *start) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
    *start = get_tick_ms();
 8001246:	f7ff ffef 	bl	8001228 <get_tick_ms>
 800124a:	4602      	mov	r2, r0
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <is_delay_ms_complete>:
void delay_us_nonblocking(uint32_t us, uint32_t *start) {
    *start = get_tick_us();
}

// Kiểm tra xem độ trễ mili giây đã hoàn tất chưa
bool is_delay_ms_complete(uint32_t start, uint32_t ms) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    return (get_tick_ms() - start >= ms);
 8001262:	f7ff ffe1 	bl	8001228 <get_tick_ms>
 8001266:	4602      	mov	r2, r0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	bf94      	ite	ls
 8001272:	2301      	movls	r3, #1
 8001274:	2300      	movhi	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <DS1307_Init>:

/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <DS1307_Init+0x1c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f806 	bl	80012a0 <DS1307_SetClockHalt>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000214 	.word	0x20000214

080012a0 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <DS1307_SetClockHalt+0x14>
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	e000      	b.n	80012b6 <DS1307_SetClockHalt+0x16>
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 f83d 	bl	8001338 <DS1307_GetRegByte>
 80012be:	4603      	mov	r3, r0
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4619      	mov	r1, r3
 80012d4:	2000      	movs	r0, #0
 80012d6:	f000 f811 	bl	80012fc <DS1307_SetRegByte>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 f826 	bl	8001338 <DS1307_GetRegByte>
 80012ec:	4603      	mov	r3, r0
 80012ee:	11db      	asrs	r3, r3, #7
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	b2db      	uxtb	r3, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}

080012fc <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af02      	add	r7, sp, #8
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	4613      	mov	r3, r2
 800130a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	733b      	strb	r3, [r7, #12]
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <DS1307_SetRegByte+0x38>)
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	f107 020c 	add.w	r2, r7, #12
 800131c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2302      	movs	r3, #2
 8001324:	21d0      	movs	r1, #208	@ 0xd0
 8001326:	f002 fc01 	bl	8003b2c <HAL_I2C_Master_Transmit>
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000214 	.word	0x20000214

08001338 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af02      	add	r7, sp, #8
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <DS1307_GetRegByte+0x40>)
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	1dfa      	adds	r2, r7, #7
 8001348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2301      	movs	r3, #1
 8001350:	21d0      	movs	r1, #208	@ 0xd0
 8001352:	f002 fbeb 	bl	8003b2c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8001356:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <DS1307_GetRegByte+0x40>)
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	f107 020f 	add.w	r2, r7, #15
 800135e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	21d0      	movs	r1, #208	@ 0xd0
 8001368:	f002 fcde 	bl	8003d28 <HAL_I2C_Master_Receive>
	return val;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000214 	.word	0x20000214

0800137c <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8001380:	2003      	movs	r0, #3
 8001382:	f7ff ffd9 	bl	8001338 <DS1307_GetRegByte>
 8001386:	4603      	mov	r3, r0
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f963 	bl	8001654 <DS1307_DecodeBCD>
 800138e:	4603      	mov	r3, r0
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}

08001394 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8001398:	2004      	movs	r0, #4
 800139a:	f7ff ffcd 	bl	8001338 <DS1307_GetRegByte>
 800139e:	4603      	mov	r3, r0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f957 	bl	8001654 <DS1307_DecodeBCD>
 80013a6:	4603      	mov	r3, r0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	bd80      	pop	{r7, pc}

080013ac <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 80013b0:	2005      	movs	r0, #5
 80013b2:	f7ff ffc1 	bl	8001338 <DS1307_GetRegByte>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f94b 	bl	8001654 <DS1307_DecodeBCD>
 80013be:	4603      	mov	r3, r0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 80013ca:	2010      	movs	r0, #16
 80013cc:	f7ff ffb4 	bl	8001338 <DS1307_GetRegByte>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	0091      	lsls	r1, r2, #2
 80013dc:	461a      	mov	r2, r3
 80013de:	460b      	mov	r3, r1
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80013e6:	2006      	movs	r0, #6
 80013e8:	f7ff ffa6 	bl	8001338 <DS1307_GetRegByte>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f930 	bl	8001654 <DS1307_DecodeBCD>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	4413      	add	r3, r2
 80013fc:	b29b      	uxth	r3, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff ff94 	bl	8001338 <DS1307_GetRegByte>
 8001410:	4603      	mov	r3, r0
 8001412:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f91b 	bl	8001654 <DS1307_DecodeBCD>
 800141e:	4603      	mov	r3, r0
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd80      	pop	{r7, pc}

08001424 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ff85 	bl	8001338 <DS1307_GetRegByte>
 800142e:	4603      	mov	r3, r0
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f90f 	bl	8001654 <DS1307_DecodeBCD>
 8001436:	4603      	mov	r3, r0
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}

0800143c <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff ff79 	bl	8001338 <DS1307_GetRegByte>
 8001446:	4603      	mov	r3, r0
 8001448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f900 	bl	8001654 <DS1307_DecodeBCD>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}

0800145a <DS1307_GetTimeZoneHour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t DS1307_GetTimeZoneHour(void) {
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_HR);
 800145e:	2008      	movs	r0, #8
 8001460:	f7ff ff6a 	bl	8001338 <DS1307_GetRegByte>
 8001464:	4603      	mov	r3, r0
 8001466:	b25b      	sxtb	r3, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}

0800146c <DS1307_GetTimeZoneMin>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
 8001470:	2009      	movs	r0, #9
 8001472:	f7ff ff61 	bl	8001338 <DS1307_GetRegByte>
 8001476:	4603      	mov	r3, r0
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}

0800147c <DS1307_GetTime>:


DS1307_TIME DS1307_GetTime(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

	DS1307_TIME time;

	time.Date = DS1307_GetDate();
 8001484:	f7ff ff86 	bl	8001394 <DS1307_GetDate>
 8001488:	4603      	mov	r3, r0
 800148a:	733b      	strb	r3, [r7, #12]
	time.Month = DS1307_GetMonth();
 800148c:	f7ff ff8e 	bl	80013ac <DS1307_GetMonth>
 8001490:	4603      	mov	r3, r0
 8001492:	737b      	strb	r3, [r7, #13]
	time.Year = DS1307_GetYear();
 8001494:	f7ff ff96 	bl	80013c4 <DS1307_GetYear>
 8001498:	4603      	mov	r3, r0
 800149a:	81fb      	strh	r3, [r7, #14]
	time.DoW = DS1307_GetDayOfWeek();
 800149c:	f7ff ff6e 	bl	800137c <DS1307_GetDayOfWeek>
 80014a0:	4603      	mov	r3, r0
 80014a2:	743b      	strb	r3, [r7, #16]
	time.Hour = DS1307_GetHour();
 80014a4:	f7ff ffaf 	bl	8001406 <DS1307_GetHour>
 80014a8:	4603      	mov	r3, r0
 80014aa:	747b      	strb	r3, [r7, #17]
	time.Minute = DS1307_GetMinute();
 80014ac:	f7ff ffba 	bl	8001424 <DS1307_GetMinute>
 80014b0:	4603      	mov	r3, r0
 80014b2:	74bb      	strb	r3, [r7, #18]
	time.Second = DS1307_GetSecond();
 80014b4:	f7ff ffc2 	bl	800143c <DS1307_GetSecond>
 80014b8:	4603      	mov	r3, r0
 80014ba:	74fb      	strb	r3, [r7, #19]
	time.TimeZoneHour = DS1307_GetTimeZoneHour();
 80014bc:	f7ff ffcd 	bl	800145a <DS1307_GetTimeZoneHour>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	753b      	strb	r3, [r7, #20]
	time.TimeZoneMin = DS1307_GetTimeZoneMin();
 80014c6:	f7ff ffd1 	bl	800146c <DS1307_GetTimeZoneMin>
 80014ca:	4603      	mov	r3, r0
 80014cc:	757b      	strb	r3, [r7, #21]

	return time;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	461a      	mov	r2, r3
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	cb03      	ldmia	r3!, {r0, r1}
 80014d8:	6010      	str	r0, [r2, #0]
 80014da:	6051      	str	r1, [r2, #4]
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	8113      	strh	r3, [r2, #8]
}
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f8c5 	bl	8001684 <DS1307_EncodeBCD>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4619      	mov	r1, r3
 80014fe:	2003      	movs	r0, #3
 8001500:	f7ff fefc 	bl	80012fc <DS1307_SetRegByte>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f000 f8b3 	bl	8001684 <DS1307_EncodeBCD>
 800151e:	4603      	mov	r3, r0
 8001520:	4619      	mov	r1, r3
 8001522:	2004      	movs	r0, #4
 8001524:	f7ff feea 	bl	80012fc <DS1307_SetRegByte>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f8a1 	bl	8001684 <DS1307_EncodeBCD>
 8001542:	4603      	mov	r3, r0
 8001544:	4619      	mov	r1, r3
 8001546:	2005      	movs	r0, #5
 8001548:	f7ff fed8 	bl	80012fc <DS1307_SetRegByte>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4a10      	ldr	r2, [pc, #64]	@ (80015a4 <DS1307_SetYear+0x50>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	b29b      	uxth	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4619      	mov	r1, r3
 800156e:	2010      	movs	r0, #16
 8001570:	f7ff fec4 	bl	80012fc <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <DS1307_SetYear+0x50>)
 8001578:	fba2 1203 	umull	r1, r2, r2, r3
 800157c:	0952      	lsrs	r2, r2, #5
 800157e:	2164      	movs	r1, #100	@ 0x64
 8001580:	fb01 f202 	mul.w	r2, r1, r2
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f87a 	bl	8001684 <DS1307_EncodeBCD>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	2006      	movs	r0, #6
 8001596:	f7ff feb1 	bl	80012fc <DS1307_SetRegByte>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	51eb851f 	.word	0x51eb851f

080015a8 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f862 	bl	8001684 <DS1307_EncodeBCD>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4619      	mov	r1, r3
 80015c4:	2002      	movs	r0, #2
 80015c6:	f7ff fe99 	bl	80012fc <DS1307_SetRegByte>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f850 	bl	8001684 <DS1307_EncodeBCD>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4619      	mov	r1, r3
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff fe87 	bl	80012fc <DS1307_SetRegByte>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 8001600:	f7ff fe6f 	bl	80012e2 <DS1307_GetClockHalt>
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8001608:	79fa      	ldrb	r2, [r7, #7]
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	4313      	orrs	r3, r2
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f837 	bl	8001684 <DS1307_EncodeBCD>
 8001616:	4603      	mov	r3, r0
 8001618:	4619      	mov	r1, r3
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff fe6e 	bl	80012fc <DS1307_SetRegByte>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <DS1307_SetTimeZone>:
 * @brief Sets UTC offset.
 * @note  UTC offset is not updated automatically.
 * @param hr UTC hour offset, -12 to 12.
 * @param min UTC minute offset, 0 to 59.
 */
void DS1307_SetTimeZone(int8_t hr, uint8_t min) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_UTC_HR, hr);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4619      	mov	r1, r3
 800163c:	2008      	movs	r0, #8
 800163e:	f7ff fe5d 	bl	80012fc <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_UTC_MIN, min);
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	4619      	mov	r1, r3
 8001646:	2009      	movs	r0, #9
 8001648:	f7ff fe58 	bl	80012fc <DS1307_SetRegByte>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	b2da      	uxtb	r2, r3
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	b2db      	uxtb	r3, r3
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800168e:	79fa      	ldrb	r2, [r7, #7]
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <DS1307_EncodeBCD+0x40>)
 8001692:	fba3 1302 	umull	r1, r3, r3, r2
 8001696:	08d9      	lsrs	r1, r3, #3
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	4907      	ldr	r1, [pc, #28]	@ (80016c4 <DS1307_EncodeBCD+0x40>)
 80016a8:	fba1 1303 	umull	r1, r3, r1, r3
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	b2db      	uxtb	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	cccccccd 	.word	0xcccccccd

080016c8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// External interrupt callback for button press on PC14.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_PIN == GPIO_PIN_14)
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016d8:	f040 809e 	bne.w	8001818 <HAL_GPIO_EXTI_Callback+0x150>
    {
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15); // Test button
		current_box_cnt++; // // Increment button press counter for debugging
 80016dc:	4b50      	ldr	r3, [pc, #320]	@ (8001820 <HAL_GPIO_EXTI_Callback+0x158>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001820 <HAL_GPIO_EXTI_Callback+0x158>)
 80016e8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 100000; i++); // Simple debounce delay
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_EXTI_Callback+0x2e>
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001824 <HAL_GPIO_EXTI_Callback+0x15c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	ddf8      	ble.n	80016f0 <HAL_GPIO_EXTI_Callback+0x28>

		// Wait for button release with timeout
		int timeout = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) && (timeout < 50000)) // Đợi đến khi thả nút nhấn trong khoảng thời gian nhất định
 8001702:	e002      	b.n	800170a <HAL_GPIO_EXTI_Callback+0x42>
		{
			timeout++;
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	3301      	adds	r3, #1
 8001708:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) && (timeout < 50000)) // Đợi đến khi thả nút nhấn trong khoảng thời gian nhất định
 800170a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800170e:	4846      	ldr	r0, [pc, #280]	@ (8001828 <HAL_GPIO_EXTI_Callback+0x160>)
 8001710:	f002 f854 	bl	80037bc <HAL_GPIO_ReadPin>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d104      	bne.n	8001724 <HAL_GPIO_EXTI_Callback+0x5c>
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001720:	4293      	cmp	r3, r2
 8001722:	ddef      	ble.n	8001704 <HAL_GPIO_EXTI_Callback+0x3c>
		}
		EXTI->PR |= GPIO_PIN_14; // Clear interrupt pending bit
 8001724:	4b41      	ldr	r3, [pc, #260]	@ (800182c <HAL_GPIO_EXTI_Callback+0x164>)
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	4a40      	ldr	r2, [pc, #256]	@ (800182c <HAL_GPIO_EXTI_Callback+0x164>)
 800172a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172e:	6153      	str	r3, [r2, #20]

		// Check if current time is within valid window [ timeset-30mins ; timeset+30mins )
		uint8_t is_valid_press_button = (lower_bound_mins <= upper_bound_mins)
 8001730:	4b3f      	ldr	r3, [pc, #252]	@ (8001830 <HAL_GPIO_EXTI_Callback+0x168>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b3f      	ldr	r3, [pc, #252]	@ (8001834 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	dc10      	bgt.n	800175e <HAL_GPIO_EXTI_Callback+0x96>
			? (current_time_to_mins >= lower_bound_mins && current_time_to_mins <= upper_bound_mins)
 800173c:	4b3e      	ldr	r3, [pc, #248]	@ (8001838 <HAL_GPIO_EXTI_Callback+0x170>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b3b      	ldr	r3, [pc, #236]	@ (8001830 <HAL_GPIO_EXTI_Callback+0x168>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	db07      	blt.n	8001758 <HAL_GPIO_EXTI_Callback+0x90>
 8001748:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <HAL_GPIO_EXTI_Callback+0x170>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <HAL_GPIO_EXTI_Callback+0x16c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	dc01      	bgt.n	8001758 <HAL_GPIO_EXTI_Callback+0x90>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_GPIO_EXTI_Callback+0x92>
 8001758:	2300      	movs	r3, #0
		uint8_t is_valid_press_button = (lower_bound_mins <= upper_bound_mins)
 800175a:	b2db      	uxtb	r3, r3
 800175c:	e00f      	b.n	800177e <HAL_GPIO_EXTI_Callback+0xb6>
			: (current_time_to_mins >= lower_bound_mins || current_time_to_mins <= upper_bound_mins);
 800175e:	4b36      	ldr	r3, [pc, #216]	@ (8001838 <HAL_GPIO_EXTI_Callback+0x170>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b33      	ldr	r3, [pc, #204]	@ (8001830 <HAL_GPIO_EXTI_Callback+0x168>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	da05      	bge.n	8001776 <HAL_GPIO_EXTI_Callback+0xae>
 800176a:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <HAL_GPIO_EXTI_Callback+0x170>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b31      	ldr	r3, [pc, #196]	@ (8001834 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	dc01      	bgt.n	800177a <HAL_GPIO_EXTI_Callback+0xb2>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_GPIO_EXTI_Callback+0xb4>
 800177a:	2300      	movs	r3, #0
		uint8_t is_valid_press_button = (lower_bound_mins <= upper_bound_mins)
 800177c:	b2db      	uxtb	r3, r3
 800177e:	73fb      	strb	r3, [r7, #15]
	    // Check if within music window [ set_time ; set_time+30mins )
	    uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 8001780:	4b2e      	ldr	r3, [pc, #184]	@ (800183c <HAL_GPIO_EXTI_Callback+0x174>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	da10      	bge.n	80017ae <HAL_GPIO_EXTI_Callback+0xe6>
		    ? (current_time_to_mins >= set_time_to_mins && current_time_to_mins <= upper_bound_mins)
 800178c:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <HAL_GPIO_EXTI_Callback+0x170>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <HAL_GPIO_EXTI_Callback+0x174>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	db07      	blt.n	80017a8 <HAL_GPIO_EXTI_Callback+0xe0>
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <HAL_GPIO_EXTI_Callback+0x170>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <HAL_GPIO_EXTI_Callback+0x16c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dc01      	bgt.n	80017a8 <HAL_GPIO_EXTI_Callback+0xe0>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_GPIO_EXTI_Callback+0xe2>
 80017a8:	2300      	movs	r3, #0
	    uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	e00f      	b.n	80017ce <HAL_GPIO_EXTI_Callback+0x106>
		    : (current_time_to_mins >= set_time_to_mins || current_time_to_mins <= upper_bound_mins);
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <HAL_GPIO_EXTI_Callback+0x170>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b22      	ldr	r3, [pc, #136]	@ (800183c <HAL_GPIO_EXTI_Callback+0x174>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	da05      	bge.n	80017c6 <HAL_GPIO_EXTI_Callback+0xfe>
 80017ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <HAL_GPIO_EXTI_Callback+0x170>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <HAL_GPIO_EXTI_Callback+0x16c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dc01      	bgt.n	80017ca <HAL_GPIO_EXTI_Callback+0x102>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_GPIO_EXTI_Callback+0x104>
 80017ca:	2300      	movs	r3, #0
	    uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	73bb      	strb	r3, [r7, #14]

		if (is_valid_press_button)
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d017      	beq.n	8001806 <HAL_GPIO_EXTI_Callback+0x13e>
		{
			box_mode = 1;  // Box opened
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <HAL_GPIO_EXTI_Callback+0x178>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017e2:	4818      	ldr	r0, [pc, #96]	@ (8001844 <HAL_GPIO_EXTI_Callback+0x17c>)
 80017e4:	f002 f801 	bl	80037ea <HAL_GPIO_WritePin>

			// Pause music only if within music window and music is playing
			if (in_window_mp3 && df_ctx.state == DF_IDLE && df_ctx.is_playing)
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d014      	beq.n	8001818 <HAL_GPIO_EXTI_Callback+0x150>
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <HAL_GPIO_EXTI_Callback+0x180>)
 80017f0:	791b      	ldrb	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d110      	bne.n	8001818 <HAL_GPIO_EXTI_Callback+0x150>
 80017f6:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <HAL_GPIO_EXTI_Callback+0x180>)
 80017f8:	7c1b      	ldrb	r3, [r3, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00c      	beq.n	8001818 <HAL_GPIO_EXTI_Callback+0x150>
			{
				DF_Pause(&df_ctx); // Pause the music playback
 80017fe:	4812      	ldr	r0, [pc, #72]	@ (8001848 <HAL_GPIO_EXTI_Callback+0x180>)
 8001800:	f7ff fcf8 	bl	80011f4 <DF_Pause>
		{
			box_mode = 0; // Box remains closed outside the time window
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		}
    }
}
 8001804:	e008      	b.n	8001818 <HAL_GPIO_EXTI_Callback+0x150>
			box_mode = 0; // Box remains closed outside the time window
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_GPIO_EXTI_Callback+0x178>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001812:	480c      	ldr	r0, [pc, #48]	@ (8001844 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001814:	f001 ffe9 	bl	80037ea <HAL_GPIO_WritePin>
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000471 	.word	0x20000471
 8001824:	0001869f 	.word	0x0001869f
 8001828:	40011000 	.word	0x40011000
 800182c:	40010400 	.word	0x40010400
 8001830:	20000460 	.word	0x20000460
 8001834:	20000464 	.word	0x20000464
 8001838:	20000458 	.word	0x20000458
 800183c:	2000045c 	.word	0x2000045c
 8001840:	20000472 	.word	0x20000472
 8001844:	40010c00 	.word	0x40010c00
 8001848:	200003ec 	.word	0x200003ec

0800184c <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt callback (every 1 second)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b08d      	sub	sp, #52	@ 0x34
 8001850:	af04      	add	r7, sp, #16
 8001852:	6178      	str	r0, [r7, #20]
	if (htim->Instance == TIM1)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a7f      	ldr	r2, [pc, #508]	@ (8001a58 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d10a      	bne.n	8001874 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		tick_ms++;  	  // Increment millisecond counter
 800185e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3301      	adds	r3, #1
 8001864:	4a7d      	ldr	r2, [pc, #500]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001866:	6013      	str	r3, [r2, #0]
		tick_us += 1000;  // Increment microsecond counter (1000 µs = 1 ms)
 8001868:	4b7d      	ldr	r3, [pc, #500]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001870:	4a7b      	ldr	r2, [pc, #492]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001872:	6013      	str	r3, [r2, #0]
	}
    if (htim->Instance == TIM3)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a7a      	ldr	r2, [pc, #488]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800187a:	4293      	cmp	r3, r2
 800187c:	f040 80e8 	bne.w	8001a50 <HAL_TIM_PeriodElapsedCallback+0x204>
    {
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 8001880:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001884:	4878      	ldr	r0, [pc, #480]	@ (8001a68 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001886:	f001 ffc8 	bl	800381a <HAL_GPIO_TogglePin>
	  flag_update_time = 1; // // Set flag to update display and logic
 800188a:	4b78      	ldr	r3, [pc, #480]	@ (8001a6c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]

	  // Convert to minutes
	  current_time = DS1307_GetTime();
 8001890:	4c77      	ldr	r4, [pc, #476]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001892:	463b      	mov	r3, r7
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fdf1 	bl	800147c <DS1307_GetTime>
 800189a:	4623      	mov	r3, r4
 800189c:	463a      	mov	r2, r7
 800189e:	6810      	ldr	r0, [r2, #0]
 80018a0:	6851      	ldr	r1, [r2, #4]
 80018a2:	c303      	stmia	r3!, {r0, r1}
 80018a4:	8912      	ldrh	r2, [r2, #8]
 80018a6:	801a      	strh	r2, [r3, #0]
	  Convert_Time_To_Mins(current_time, set_time, &current_time_to_mins, &set_time_to_mins, &lower_bound_mins, &upper_bound_mins);
 80018a8:	4b72      	ldr	r3, [pc, #456]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80018aa:	4a71      	ldr	r2, [pc, #452]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80018ac:	4972      	ldr	r1, [pc, #456]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80018ae:	9103      	str	r1, [sp, #12]
 80018b0:	4972      	ldr	r1, [pc, #456]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80018b2:	9102      	str	r1, [sp, #8]
 80018b4:	4972      	ldr	r1, [pc, #456]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80018b6:	9101      	str	r1, [sp, #4]
 80018b8:	4972      	ldr	r1, [pc, #456]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80018ba:	9100      	str	r1, [sp, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	ca07      	ldmia	r2, {r0, r1, r2}
 80018c0:	f000 fbc4 	bl	800204c <Convert_Time_To_Mins>

      // Check if current time is within valid window [ set_time-30mins ; set_time+30mins + 3mins) | 3mins = time to reset para
      uint8_t is_valid_press = (lower_bound_mins < (upper_bound_mins+3)%1440)
 80018c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3303      	adds	r3, #3
 80018ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80018cc:	fb82 1203 	smull	r1, r2, r2, r3
 80018d0:	441a      	add	r2, r3
 80018d2:	1291      	asrs	r1, r2, #10
 80018d4:	17da      	asrs	r2, r3, #31
 80018d6:	1a8a      	subs	r2, r1, r2
 80018d8:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 80018dc:	fb01 f202 	mul.w	r2, r1, r2
 80018e0:	1a9a      	subs	r2, r3, r2
 80018e2:	4b66      	ldr	r3, [pc, #408]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dd1d      	ble.n	8001926 <HAL_TIM_PeriodElapsedCallback+0xda>
          ? (current_time_to_mins >= lower_bound_mins && current_time_to_mins <= (upper_bound_mins+3)%1440)
 80018ea:	4b66      	ldr	r3, [pc, #408]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b63      	ldr	r3, [pc, #396]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	db14      	blt.n	8001920 <HAL_TIM_PeriodElapsedCallback+0xd4>
 80018f6:	4b60      	ldr	r3, [pc, #384]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3303      	adds	r3, #3
 80018fc:	4a62      	ldr	r2, [pc, #392]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80018fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001902:	441a      	add	r2, r3
 8001904:	1291      	asrs	r1, r2, #10
 8001906:	17da      	asrs	r2, r3, #31
 8001908:	1a8a      	subs	r2, r1, r2
 800190a:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800190e:	fb01 f202 	mul.w	r2, r1, r2
 8001912:	1a9a      	subs	r2, r3, r2
 8001914:	4b5b      	ldr	r3, [pc, #364]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	db01      	blt.n	8001920 <HAL_TIM_PeriodElapsedCallback+0xd4>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8001920:	2300      	movs	r3, #0
      uint8_t is_valid_press = (lower_bound_mins < (upper_bound_mins+3)%1440)
 8001922:	b2db      	uxtb	r3, r3
 8001924:	e01c      	b.n	8001960 <HAL_TIM_PeriodElapsedCallback+0x114>
          : (current_time_to_mins >= lower_bound_mins || current_time_to_mins <= (upper_bound_mins+3)%1440);
 8001926:	4b57      	ldr	r3, [pc, #348]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b54      	ldr	r3, [pc, #336]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x230>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	da12      	bge.n	8001958 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8001932:	4b51      	ldr	r3, [pc, #324]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3303      	adds	r3, #3
 8001938:	4a53      	ldr	r2, [pc, #332]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800193a:	fb82 1203 	smull	r1, r2, r2, r3
 800193e:	441a      	add	r2, r3
 8001940:	1291      	asrs	r1, r2, #10
 8001942:	17da      	asrs	r2, r3, #31
 8001944:	1a8a      	subs	r2, r1, r2
 8001946:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800194a:	fb01 f202 	mul.w	r2, r1, r2
 800194e:	1a9a      	subs	r2, r3, r2
 8001950:	4b4c      	ldr	r3, [pc, #304]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	db01      	blt.n	800195c <HAL_TIM_PeriodElapsedCallback+0x110>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_TIM_PeriodElapsedCallback+0x112>
 800195c:	2300      	movs	r3, #0
      uint8_t is_valid_press = (lower_bound_mins < (upper_bound_mins+3)%1440)
 800195e:	b2db      	uxtb	r3, r3
 8001960:	77fb      	strb	r3, [r7, #31]

	  // Check if within music window [ set_time ; set_time+30mins )
      uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 8001962:	4b47      	ldr	r3, [pc, #284]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b44      	ldr	r3, [pc, #272]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	da10      	bge.n	8001990 <HAL_TIM_PeriodElapsedCallback+0x144>
          ? (current_time_to_mins >= set_time_to_mins && current_time_to_mins <= upper_bound_mins)
 800196e:	4b45      	ldr	r3, [pc, #276]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b43      	ldr	r3, [pc, #268]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	db07      	blt.n	800198a <HAL_TIM_PeriodElapsedCallback+0x13e>
 800197a:	4b42      	ldr	r3, [pc, #264]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	dc01      	bgt.n	800198a <HAL_TIM_PeriodElapsedCallback+0x13e>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_TIM_PeriodElapsedCallback+0x140>
 800198a:	2300      	movs	r3, #0
      uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 800198c:	b2db      	uxtb	r3, r3
 800198e:	e00f      	b.n	80019b0 <HAL_TIM_PeriodElapsedCallback+0x164>
          : (current_time_to_mins >= set_time_to_mins || current_time_to_mins <= upper_bound_mins);
 8001990:	4b3c      	ldr	r3, [pc, #240]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b3a      	ldr	r3, [pc, #232]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	da05      	bge.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x15c>
 800199c:	4b39      	ldr	r3, [pc, #228]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dc01      	bgt.n	80019ac <HAL_TIM_PeriodElapsedCallback+0x160>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_TIM_PeriodElapsedCallback+0x162>
 80019ac:	2300      	movs	r3, #0
      uint8_t in_window_mp3 = (set_time_to_mins < upper_bound_mins)
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	77bb      	strb	r3, [r7, #30]

      if (is_valid_press)
 80019b2:	7ffb      	ldrb	r3, [r7, #31]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03d      	beq.n	8001a34 <HAL_TIM_PeriodElapsedCallback+0x1e8>
      {
    	  if(box_mode)
 80019b8:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d008      	beq.n	80019d4 <HAL_TIM_PeriodElapsedCallback+0x188>
    	  {
    		  if(already_warned_mp3)
 80019c2:	4b33      	ldr	r3, [pc, #204]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d040      	beq.n	8001a4e <HAL_TIM_PeriodElapsedCallback+0x202>
    		  {
    			  DF_Pause(&df_ctx); // Ensure music is paused if box is open
 80019cc:	4831      	ldr	r0, [pc, #196]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80019ce:	f7ff fc11 	bl	80011f4 <DF_Pause>
    		  }
    		  return; // Box already opened, no need to play music or send SMS
 80019d2:	e03c      	b.n	8001a4e <HAL_TIM_PeriodElapsedCallback+0x202>
    	  }
    	  else if(in_window_mp3 && !already_warned_mp3)
 80019d4:	7fbb      	ldrb	r3, [r7, #30]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00e      	beq.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 80019da:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>
    	  {
        	  // Play music func
    		  // Trigger music playback
        	  DF_PlayFromStart(&df_ctx);
 80019e4:	482b      	ldr	r0, [pc, #172]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80019e6:	f7ff fbf5 	bl	80011d4 <DF_PlayFromStart>
    		  already_warned_mp3 = 1;
 80019ea:	4b29      	ldr	r3, [pc, #164]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
    		  tick = 1; // // Debug flag
 80019f0:	4b29      	ldr	r3, [pc, #164]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e02b      	b.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x204>
    	  }
    	  else if((current_time_to_mins > upper_bound_mins) && !already_warned_sms)
 80019f8:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dd25      	ble.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x204>
 8001a04:	4b25      	ldr	r3, [pc, #148]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d120      	bne.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x204>
    	  {
    		  // Send SMS
    		  DF_Pause(&df_ctx);
 8001a0e:	4821      	ldr	r0, [pc, #132]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a10:	f7ff fbf0 	bl	80011f4 <DF_Pause>
    		  // Trigger SMS sending at the exact time
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a1a:	4821      	ldr	r0, [pc, #132]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001a1c:	f001 fee5 	bl	80037ea <HAL_GPIO_WritePin>
    		  tick = 2; // // Debug flag
 8001a20:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
			  send_sms_now = 1;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
			  already_warned_sms = 1;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	e00d      	b.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x204>
    	  }
      }
      else
      {
    	  // Reset all states outside valid window
		  box_mode = 0; 		  // Ensure box is closed
 8001a34:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
		  already_warned_mp3 = 0; // Ensure MP3 is played only once
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		  send_sms_now = 0;       // Reset SMS trigger
 8001a40:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
		  already_warned_sms = 0; // Ensure SMS is sent only once
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e000      	b.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x204>
    		  return; // Box already opened, no need to play music or send SMS
 8001a4e:	bf00      	nop
      }
    }
}
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd90      	pop	{r4, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40012c00 	.word	0x40012c00
 8001a5c:	200003d4 	.word	0x200003d4
 8001a60:	200003d8 	.word	0x200003d8
 8001a64:	40000400 	.word	0x40000400
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	20000470 	.word	0x20000470
 8001a70:	200003dc 	.word	0x200003dc
 8001a74:	200003e8 	.word	0x200003e8
 8001a78:	20000464 	.word	0x20000464
 8001a7c:	20000460 	.word	0x20000460
 8001a80:	2000045c 	.word	0x2000045c
 8001a84:	20000458 	.word	0x20000458
 8001a88:	b60b60b7 	.word	0xb60b60b7
 8001a8c:	20000472 	.word	0x20000472
 8001a90:	20000478 	.word	0x20000478
 8001a94:	200003ec 	.word	0x200003ec
 8001a98:	20000474 	.word	0x20000474
 8001a9c:	20000479 	.word	0x20000479
 8001aa0:	40010c00 	.word	0x40010c00
 8001aa4:	2000047a 	.word	0x2000047a

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aae:	f001 fae7 	bl	8003080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab2:	f000 f8c7 	bl	8001c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab6:	f000 fa4f 	bl	8001f58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001aba:	f000 f903 	bl	8001cc4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001abe:	f000 f9cd 	bl	8001e5c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001ac2:	f000 f97d 	bl	8001dc0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001ac6:	f000 f9f3 	bl	8001eb0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001aca:	f000 fa1b 	bl	8001f04 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001ace:	f000 f927 	bl	8001d20 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001ad2:	484a      	ldr	r0, [pc, #296]	@ (8001bfc <main+0x154>)
 8001ad4:	f005 f9a2 	bl	8006e1c <HAL_TIM_Base_Start_IT>

  // Initialize delay module using Timer 1
  delay_init();
 8001ad8:	f7ff fb9c 	bl	8001214 <delay_init>

  // Initialize DS1307, OLED, and SHT4x
  DS1307_Init(&hi2c1);        // Initialize RTC
 8001adc:	4848      	ldr	r0, [pc, #288]	@ (8001c00 <main+0x158>)
 8001ade:	f7ff fbcf 	bl	8001280 <DS1307_Init>
  SSD1306_Init();             // Initialize OLED display
 8001ae2:	f000 fd47 	bl	8002574 <SSD1306_Init>
  sensirion_i2c_init();       // Initialize I2C HAL wrapper
 8001ae6:	f000 fba1 	bl	800222c <sensirion_i2c_init>
  sht4x_init();               // Initialize SHT4x sensor
 8001aea:	f000 fba5 	bl	8002238 <sht4x_init>

  // Initialize DFPlayer with volume 10
  DF_Init(&df_ctx, &huart2, 10);
 8001aee:	220a      	movs	r2, #10
 8001af0:	4944      	ldr	r1, [pc, #272]	@ (8001c04 <main+0x15c>)
 8001af2:	4845      	ldr	r0, [pc, #276]	@ (8001c08 <main+0x160>)
 8001af4:	f7ff fa67 	bl	8000fc6 <DF_Init>

  // Initialize SMS message with default alarm time
  sprintf(sms_message, "You need to take your medicine at %02d:%02d", set_time.Hour, set_time.Minute);
 8001af8:	4b44      	ldr	r3, [pc, #272]	@ (8001c0c <main+0x164>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b43      	ldr	r3, [pc, #268]	@ (8001c0c <main+0x164>)
 8001b00:	785b      	ldrb	r3, [r3, #1]
 8001b02:	4943      	ldr	r1, [pc, #268]	@ (8001c10 <main+0x168>)
 8001b04:	4843      	ldr	r0, [pc, #268]	@ (8001c14 <main+0x16c>)
 8001b06:	f006 fc6b 	bl	80083e0 <siprintf>
  SIM_SendSMS_Init(&sim_ctx, &huart3, "+84935120229", sms_message);
 8001b0a:	4b42      	ldr	r3, [pc, #264]	@ (8001c14 <main+0x16c>)
 8001b0c:	4a42      	ldr	r2, [pc, #264]	@ (8001c18 <main+0x170>)
 8001b0e:	4943      	ldr	r1, [pc, #268]	@ (8001c1c <main+0x174>)
 8001b10:	4843      	ldr	r0, [pc, #268]	@ (8001c20 <main+0x178>)
 8001b12:	f000 fc1f 	bl	8002354 <SIM_SendSMS_Init>

  // Set initial RTC time if needed
  #if INIT_RTC_TIME
	  DS1307_SetClockHalt(0);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff fbc2 	bl	80012a0 <DS1307_SetClockHalt>
	  DS1307_SetTimeZone(+7, 0);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2007      	movs	r0, #7
 8001b20:	f7ff fd82 	bl	8001628 <DS1307_SetTimeZone>
	  DS1307_SetDate(04);
 8001b24:	2004      	movs	r0, #4
 8001b26:	f7ff fcf1 	bl	800150c <DS1307_SetDate>
	  DS1307_SetMonth(05);
 8001b2a:	2005      	movs	r0, #5
 8001b2c:	f7ff fd00 	bl	8001530 <DS1307_SetMonth>
	  DS1307_SetYear(2025);
 8001b30:	f240 70e9 	movw	r0, #2025	@ 0x7e9
 8001b34:	f7ff fd0e 	bl	8001554 <DS1307_SetYear>
	  DS1307_SetDayOfWeek(0);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff fcd5 	bl	80014e8 <DS1307_SetDayOfWeek>
	  DS1307_SetHour(15);
 8001b3e:	200f      	movs	r0, #15
 8001b40:	f7ff fd32 	bl	80015a8 <DS1307_SetHour>
	  DS1307_SetMinute(00);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff fd44 	bl	80015d2 <DS1307_SetMinute>
	  DS1307_SetSecond(40);
 8001b4a:	2028      	movs	r0, #40	@ 0x28
 8001b4c:	f7ff fd53 	bl	80015f6 <DS1307_SetSecond>
  #endif

  // Set default alarm time
  set_time.Hour = 15;
 8001b50:	4b2e      	ldr	r3, [pc, #184]	@ (8001c0c <main+0x164>)
 8001b52:	220f      	movs	r2, #15
 8001b54:	701a      	strb	r2, [r3, #0]
  set_time.Minute = 01;
 8001b56:	4b2d      	ldr	r3, [pc, #180]	@ (8001c0c <main+0x164>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	705a      	strb	r2, [r3, #1]

  // Update SMS message with the set alarm time
  sprintf(sms_message, "You need to take your medicine at %02d:%02d", set_time.Hour, set_time.Minute);
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <main+0x164>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <main+0x164>)
 8001b64:	785b      	ldrb	r3, [r3, #1]
 8001b66:	492a      	ldr	r1, [pc, #168]	@ (8001c10 <main+0x168>)
 8001b68:	482a      	ldr	r0, [pc, #168]	@ (8001c14 <main+0x16c>)
 8001b6a:	f006 fc39 	bl	80083e0 <siprintf>

  // Initialize system state
  box_mode = 0;           // Ensure box is closed
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c24 <main+0x17c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
  already_warned_mp3 = 0; // Reset music warning flag
 8001b74:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <main+0x180>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
  send_sms_now = 0;       // Reset SMS trigger
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c2c <main+0x184>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
  already_warned_sms = 0; // Reset SMS warning flag
 8001b80:	4b2b      	ldr	r3, [pc, #172]	@ (8001c30 <main+0x188>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Read temperature and humidity from SHT4x sensor
	  sht4x_measure_blocking_read(&temp, &humi);
 8001b86:	492b      	ldr	r1, [pc, #172]	@ (8001c34 <main+0x18c>)
 8001b88:	482b      	ldr	r0, [pc, #172]	@ (8001c38 <main+0x190>)
 8001b8a:	f000 fb5d 	bl	8002248 <sht4x_measure_blocking_read>

	  // Update display and alarm logic if time update is triggered
      if (flag_update_time)
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <main+0x194>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01a      	beq.n	8001bce <main+0x126>
      {
          flag_update_time = 0; // Clear update flag
 8001b98:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <main+0x194>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
          current_time = DS1307_GetTime(); // Fetch current time
 8001b9e:	4c28      	ldr	r4, [pc, #160]	@ (8001c40 <main+0x198>)
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fc6a 	bl	800147c <DS1307_GetTime>
 8001ba8:	4623      	mov	r3, r4
 8001baa:	463a      	mov	r2, r7
 8001bac:	6810      	ldr	r0, [r2, #0]
 8001bae:	6851      	ldr	r1, [r2, #4]
 8001bb0:	c303      	stmia	r3!, {r0, r1}
 8001bb2:	8912      	ldrh	r2, [r2, #8]
 8001bb4:	801a      	strh	r2, [r3, #0]
          Display_On_Oled(current_time, set_time, temp, humi); // Update OLED display
 8001bb6:	4b20      	ldr	r3, [pc, #128]	@ (8001c38 <main+0x190>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1e      	ldr	r2, [pc, #120]	@ (8001c34 <main+0x18c>)
 8001bbc:	6811      	ldr	r1, [r2, #0]
 8001bbe:	4813      	ldr	r0, [pc, #76]	@ (8001c0c <main+0x164>)
 8001bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <main+0x198>)
 8001bc2:	9101      	str	r1, [sp, #4]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	6803      	ldr	r3, [r0, #0]
 8001bc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bca:	f000 fa83 	bl	80020d4 <Display_On_Oled>
      }

      // Manage SMS state machine and reset trigger
	  SIM_SendSMS_Update(&sim_ctx, send_sms_now);
 8001bce:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <main+0x184>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4812      	ldr	r0, [pc, #72]	@ (8001c20 <main+0x178>)
 8001bd8:	f000 fbda 	bl	8002390 <SIM_SendSMS_Update>
	  if (send_sms_now && sim_ctx.state == SMS_IDLE) {
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <main+0x184>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <main+0x14c>
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <main+0x178>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <main+0x14c>
		  send_sms_now = 0; // Reset SMS trigger after completion
 8001bee:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <main+0x184>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
	  }

	  // Update DFPlayer state machine
	  DF_Update(&df_ctx);
 8001bf4:	4804      	ldr	r0, [pc, #16]	@ (8001c08 <main+0x160>)
 8001bf6:	f7ff fa07 	bl	8001008 <DF_Update>
	  sht4x_measure_blocking_read(&temp, &humi);
 8001bfa:	e7c4      	b.n	8001b86 <main+0xde>
 8001bfc:	200002b4 	.word	0x200002b4
 8001c00:	20000218 	.word	0x20000218
 8001c04:	20000344 	.word	0x20000344
 8001c08:	200003ec 	.word	0x200003ec
 8001c0c:	200003e8 	.word	0x200003e8
 8001c10:	0800a68c 	.word	0x0800a68c
 8001c14:	2000047c 	.word	0x2000047c
 8001c18:	0800a6b8 	.word	0x0800a6b8
 8001c1c:	2000038c 	.word	0x2000038c
 8001c20:	20000400 	.word	0x20000400
 8001c24:	20000472 	.word	0x20000472
 8001c28:	20000478 	.word	0x20000478
 8001c2c:	2000047a 	.word	0x2000047a
 8001c30:	20000479 	.word	0x20000479
 8001c34:	2000046c 	.word	0x2000046c
 8001c38:	20000468 	.word	0x20000468
 8001c3c:	20000470 	.word	0x20000470
 8001c40:	200003dc 	.word	0x200003dc

08001c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b090      	sub	sp, #64	@ 0x40
 8001c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4a:	f107 0318 	add.w	r3, r7, #24
 8001c4e:	2228      	movs	r2, #40	@ 0x28
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f006 fc29 	bl	80084aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c66:	2302      	movs	r3, #2
 8001c68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c6e:	2310      	movs	r3, #16
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c72:	2302      	movs	r3, #2
 8001c74:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001c76:	2300      	movs	r3, #0
 8001c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	4618      	mov	r0, r3
 8001c84:	f004 fc6a 	bl	800655c <HAL_RCC_OscConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8001c8e:	f000 fa8f 	bl	80021b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c92:	230f      	movs	r3, #15
 8001c94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c96:	2302      	movs	r3, #2
 8001c98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ca2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f004 fed7 	bl	8006a60 <HAL_RCC_ClockConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001cb8:	f000 fa7a 	bl	80021b0 <Error_Handler>
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3740      	adds	r7, #64	@ 0x40
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cca:	4a13      	ldr	r2, [pc, #76]	@ (8001d18 <MX_I2C1_Init+0x54>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cd0:	4a12      	ldr	r2, [pc, #72]	@ (8001d1c <MX_I2C1_Init+0x58>)
 8001cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001ce2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ce6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001d02:	f001 fdbb 	bl	800387c <HAL_I2C_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d0c:	f000 fa50 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000218 	.word	0x20000218
 8001d18:	40005400 	.word	0x40005400
 8001d1c:	00061a80 	.word	0x00061a80

08001d20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d34:	463b      	mov	r3, r7
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <MX_TIM1_Init+0x98>)
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dbc <MX_TIM1_Init+0x9c>)
 8001d40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001d42:	4b1d      	ldr	r3, [pc, #116]	@ (8001db8 <MX_TIM1_Init+0x98>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <MX_TIM1_Init+0x98>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_TIM1_Init+0x98>)
 8001d50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d56:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <MX_TIM1_Init+0x98>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d5c:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <MX_TIM1_Init+0x98>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <MX_TIM1_Init+0x98>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d68:	4813      	ldr	r0, [pc, #76]	@ (8001db8 <MX_TIM1_Init+0x98>)
 8001d6a:	f005 f807 	bl	8006d7c <HAL_TIM_Base_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d74:	f000 fa1c 	bl	80021b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	4619      	mov	r1, r3
 8001d84:	480c      	ldr	r0, [pc, #48]	@ (8001db8 <MX_TIM1_Init+0x98>)
 8001d86:	f005 f98b 	bl	80070a0 <HAL_TIM_ConfigClockSource>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d90:	f000 fa0e 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_TIM1_Init+0x98>)
 8001da2:	f005 fb6d 	bl	8007480 <HAL_TIMEx_MasterConfigSynchronization>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001dac:	f000 fa00 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000026c 	.word	0x2000026c
 8001dbc:	40012c00 	.word	0x40012c00

08001dc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001dde:	4a1e      	ldr	r2, [pc, #120]	@ (8001e58 <MX_TIM3_Init+0x98>)
 8001de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001de4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001de8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001df0:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001df2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001df6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df8:	4b16      	ldr	r3, [pc, #88]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e04:	4813      	ldr	r0, [pc, #76]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001e06:	f004 ffb9 	bl	8006d7c <HAL_TIM_Base_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e10:	f000 f9ce 	bl	80021b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e1a:	f107 0308 	add.w	r3, r7, #8
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480c      	ldr	r0, [pc, #48]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001e22:	f005 f93d 	bl	80070a0 <HAL_TIM_ConfigClockSource>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e2c:	f000 f9c0 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e38:	463b      	mov	r3, r7
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001e3e:	f005 fb1f 	bl	8007480 <HAL_TIMEx_MasterConfigSynchronization>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e48:	f000 f9b2 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200002b4 	.word	0x200002b4
 8001e58:	40000400 	.word	0x40000400

08001e5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <MX_USART1_UART_Init+0x50>)
 8001e64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e68:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e82:	220c      	movs	r2, #12
 8001e84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e86:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e94:	f005 fb64 	bl	8007560 <HAL_UART_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e9e:	f000 f987 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002fc 	.word	0x200002fc
 8001eac:	40013800 	.word	0x40013800

08001eb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	@ (8001f00 <MX_USART2_UART_Init+0x50>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ebc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ec0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ee8:	f005 fb3a 	bl	8007560 <HAL_UART_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ef2:	f000 f95d 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000344 	.word	0x20000344
 8001f00:	40004400 	.word	0x40004400

08001f04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f08:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <MX_USART3_UART_Init+0x4c>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <MX_USART3_UART_Init+0x50>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <MX_USART3_UART_Init+0x4c>)
 8001f10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <MX_USART3_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <MX_USART3_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <MX_USART3_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <MX_USART3_UART_Init+0x4c>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <MX_USART3_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <MX_USART3_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f3a:	4805      	ldr	r0, [pc, #20]	@ (8001f50 <MX_USART3_UART_Init+0x4c>)
 8001f3c:	f005 fb10 	bl	8007560 <HAL_UART_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f46:	f000 f933 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000038c 	.word	0x2000038c
 8001f54:	40004800 	.word	0x40004800

08001f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6c:	4b33      	ldr	r3, [pc, #204]	@ (800203c <MX_GPIO_Init+0xe4>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a32      	ldr	r2, [pc, #200]	@ (800203c <MX_GPIO_Init+0xe4>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b30      	ldr	r3, [pc, #192]	@ (800203c <MX_GPIO_Init+0xe4>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <MX_GPIO_Init+0xe4>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a2c      	ldr	r2, [pc, #176]	@ (800203c <MX_GPIO_Init+0xe4>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b2a      	ldr	r3, [pc, #168]	@ (800203c <MX_GPIO_Init+0xe4>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9c:	4b27      	ldr	r3, [pc, #156]	@ (800203c <MX_GPIO_Init+0xe4>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a26      	ldr	r2, [pc, #152]	@ (800203c <MX_GPIO_Init+0xe4>)
 8001fa2:	f043 0308 	orr.w	r3, r3, #8
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b24      	ldr	r3, [pc, #144]	@ (800203c <MX_GPIO_Init+0xe4>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fba:	4821      	ldr	r0, [pc, #132]	@ (8002040 <MX_GPIO_Init+0xe8>)
 8001fbc:	f001 fc15 	bl	80037ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fc6:	481f      	ldr	r0, [pc, #124]	@ (8002044 <MX_GPIO_Init+0xec>)
 8001fc8:	f001 fc0f 	bl	80037ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4816      	ldr	r0, [pc, #88]	@ (8002040 <MX_GPIO_Init+0xe8>)
 8001fe6:	f001 fa65 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ff0:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <MX_GPIO_Init+0xf0>)
 8001ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4810      	ldr	r0, [pc, #64]	@ (8002040 <MX_GPIO_Init+0xe8>)
 8002000:	f001 fa58 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002004:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200a:	2301      	movs	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800200e:	2301      	movs	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2302      	movs	r3, #2
 8002014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	f107 0310 	add.w	r3, r7, #16
 800201a:	4619      	mov	r1, r3
 800201c:	4809      	ldr	r0, [pc, #36]	@ (8002044 <MX_GPIO_Init+0xec>)
 800201e:	f001 fa49 	bl	80034b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	2028      	movs	r0, #40	@ 0x28
 8002028:	f001 f987 	bl	800333a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800202c:	2028      	movs	r0, #40	@ 0x28
 800202e:	f001 f9a0 	bl	8003372 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002032:	bf00      	nop
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	40011000 	.word	0x40011000
 8002044:	40010c00 	.word	0x40010c00
 8002048:	10210000 	.word	0x10210000

0800204c <Convert_Time_To_Mins>:

/* USER CODE BEGIN 4 */
void Convert_Time_To_Mins(DS1307_TIME _current_time, ALARM_TIME _set_time, int *_current_time_to_mins, int *_set_time_to_mins, int *_lower_bound_mins, int *_upper_bound_mins)
{
 800204c:	b490      	push	{r4, r7}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	1d3c      	adds	r4, r7, #4
 8002054:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002058:	803b      	strh	r3, [r7, #0]
    // The permitted range: from (alarm - 30 minutes) to (alarm + 30 minutes)
    *_current_time_to_mins = _current_time.Hour * 60 + _current_time.Minute;
 800205a:	7a7b      	ldrb	r3, [r7, #9]
 800205c:	461a      	mov	r2, r3
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	461a      	mov	r2, r3
 8002068:	7abb      	ldrb	r3, [r7, #10]
 800206a:	441a      	add	r2, r3
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	601a      	str	r2, [r3, #0]
    *_set_time_to_mins = _set_time.Hour * 60 + _set_time.Minute;
 8002070:	783b      	ldrb	r3, [r7, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	461a      	mov	r2, r3
 800207e:	787b      	ldrb	r3, [r7, #1]
 8002080:	441a      	add	r2, r3
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	601a      	str	r2, [r3, #0]
    *_lower_bound_mins = *_set_time_to_mins - 30;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1a3 021e 	sub.w	r2, r3, #30
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	601a      	str	r2, [r3, #0]
    *_upper_bound_mins = *_set_time_to_mins + 30;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f103 021e 	add.w	r2, r3, #30
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	601a      	str	r2, [r3, #0]

    // Handle if lower_bound is negative: wrap around to the previous day
    if (*_lower_bound_mins < 0) *_lower_bound_mins += 1440; // 1440 minutes = 24 hours
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	da05      	bge.n	80020b2 <Convert_Time_To_Mins+0x66>
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f503 62b4 	add.w	r2, r3, #1440	@ 0x5a0
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	601a      	str	r2, [r3, #0]
    // Handle if upper_bound exceeds 23:59
    if (*_upper_bound_mins >= 1440) *_upper_bound_mins -= 1440;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80020ba:	db05      	blt.n	80020c8 <Convert_Time_To_Mins+0x7c>
 80020bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f5a3 62b4 	sub.w	r2, r3, #1440	@ 0x5a0
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	601a      	str	r2, [r3, #0]
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc90      	pop	{r4, r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <Display_On_Oled>:
void Display_On_Oled(DS1307_TIME _current_time, ALARM_TIME _set_time, float _temp, float _humi)
{
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d6:	b09b      	sub	sp, #108	@ 0x6c
 80020d8:	af04      	add	r7, sp, #16
 80020da:	1d3c      	adds	r4, r7, #4
 80020dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020e0:	803b      	strh	r3, [r7, #0]
    char line1_oled[21];
    char line2_oled[21];
    char line3_oled[21];

    sprintf(line1_oled, "Tem:%.1f Hum:%.1f%%", _temp, _humi);
 80020e2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80020e4:	f7fe f9a0 	bl	8000428 <__aeabi_f2d>
 80020e8:	4604      	mov	r4, r0
 80020ea:	460d      	mov	r5, r1
 80020ec:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80020ee:	f7fe f99b 	bl	8000428 <__aeabi_f2d>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80020fa:	e9cd 2300 	strd	r2, r3, [sp]
 80020fe:	4622      	mov	r2, r4
 8002100:	462b      	mov	r3, r5
 8002102:	4926      	ldr	r1, [pc, #152]	@ (800219c <Display_On_Oled+0xc8>)
 8002104:	f006 f96c 	bl	80083e0 <siprintf>
    sprintf(line2_oled, "%s,%02d/%02d %02d:%02d:%02d", dayOfWeek[_current_time.DoW], _current_time.Date, _current_time.Month, _current_time.Hour, _current_time.Minute, _current_time.Second); // "%04d", _current_time.Year
 8002108:	7a3b      	ldrb	r3, [r7, #8]
 800210a:	461a      	mov	r2, r3
 800210c:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <Display_On_Oled+0xcc>)
 800210e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002112:	793b      	ldrb	r3, [r7, #4]
 8002114:	461e      	mov	r6, r3
 8002116:	797b      	ldrb	r3, [r7, #5]
 8002118:	7a79      	ldrb	r1, [r7, #9]
 800211a:	7ab8      	ldrb	r0, [r7, #10]
 800211c:	4604      	mov	r4, r0
 800211e:	7af8      	ldrb	r0, [r7, #11]
 8002120:	4605      	mov	r5, r0
 8002122:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002126:	9503      	str	r5, [sp, #12]
 8002128:	9402      	str	r4, [sp, #8]
 800212a:	9101      	str	r1, [sp, #4]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	4633      	mov	r3, r6
 8002130:	491c      	ldr	r1, [pc, #112]	@ (80021a4 <Display_On_Oled+0xd0>)
 8002132:	f006 f955 	bl	80083e0 <siprintf>
    sprintf(line3_oled, "Alarm_Time:[%02d:%02d]", _set_time.Hour, _set_time.Minute);
 8002136:	783b      	ldrb	r3, [r7, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	787b      	ldrb	r3, [r7, #1]
 800213c:	f107 0010 	add.w	r0, r7, #16
 8002140:	4919      	ldr	r1, [pc, #100]	@ (80021a8 <Display_On_Oled+0xd4>)
 8002142:	f006 f94d 	bl	80083e0 <siprintf>

    SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002146:	2000      	movs	r0, #0
 8002148:	f000 fb06 	bl	8002758 <SSD1306_Fill>
    SSD1306_GotoXY(0,10); SSD1306_Puts(line1_oled, &Font_7x10, SSD1306_COLOR_WHITE);
 800214c:	210a      	movs	r1, #10
 800214e:	2000      	movs	r0, #0
 8002150:	f000 fb78 	bl	8002844 <SSD1306_GotoXY>
 8002154:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002158:	2201      	movs	r2, #1
 800215a:	4914      	ldr	r1, [pc, #80]	@ (80021ac <Display_On_Oled+0xd8>)
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fc05 	bl	800296c <SSD1306_Puts>
    SSD1306_GotoXY(0,30); SSD1306_Puts(line2_oled, &Font_7x10, SSD1306_COLOR_WHITE);
 8002162:	211e      	movs	r1, #30
 8002164:	2000      	movs	r0, #0
 8002166:	f000 fb6d 	bl	8002844 <SSD1306_GotoXY>
 800216a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800216e:	2201      	movs	r2, #1
 8002170:	490e      	ldr	r1, [pc, #56]	@ (80021ac <Display_On_Oled+0xd8>)
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fbfa 	bl	800296c <SSD1306_Puts>
    SSD1306_GotoXY(0,50); SSD1306_Puts(line3_oled, &Font_7x10, SSD1306_COLOR_WHITE);
 8002178:	2132      	movs	r1, #50	@ 0x32
 800217a:	2000      	movs	r0, #0
 800217c:	f000 fb62 	bl	8002844 <SSD1306_GotoXY>
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	2201      	movs	r2, #1
 8002186:	4909      	ldr	r1, [pc, #36]	@ (80021ac <Display_On_Oled+0xd8>)
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fbef 	bl	800296c <SSD1306_Puts>
    SSD1306_UpdateScreen();
 800218e:	f000 fab5 	bl	80026fc <SSD1306_UpdateScreen>
}
 8002192:	bf00      	nop
 8002194:	375c      	adds	r7, #92	@ 0x5c
 8002196:	46bd      	mov	sp, r7
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219a:	bf00      	nop
 800219c:	0800a6c8 	.word	0x0800a6c8
 80021a0:	20000008 	.word	0x20000008
 80021a4:	0800a6dc 	.word	0x0800a6dc
 80021a8:	0800a6f8 	.word	0x0800a6f8
 80021ac:	20000000 	.word	0x20000000

080021b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b4:	b672      	cpsid	i
}
 80021b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <Error_Handler+0x8>

080021bc <sensirion_i2c_write>:
#include "stm32f1xx_hal.h"
#include "sensirion_i2c_hal.h"

extern I2C_HandleTypeDef hi2c1;

int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data, uint16_t count) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Master_Transmit(&hi2c1, (address << 1), (uint8_t*)data, count, HAL_MAX_DELAY);
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	b299      	uxth	r1, r3
 80021d4:	88bb      	ldrh	r3, [r7, #4]
 80021d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021da:	9200      	str	r2, [sp, #0]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	4804      	ldr	r0, [pc, #16]	@ (80021f0 <sensirion_i2c_write+0x34>)
 80021e0:	f001 fca4 	bl	8003b2c <HAL_I2C_Master_Transmit>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b25b      	sxtb	r3, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000218 	.word	0x20000218

080021f4 <sensirion_i2c_read>:

int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Master_Receive(&hi2c1, (address << 1), data, count, HAL_MAX_DELAY);
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	b29b      	uxth	r3, r3
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	b299      	uxth	r1, r3
 800220c:	88bb      	ldrh	r3, [r7, #4]
 800220e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002212:	9200      	str	r2, [sp, #0]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	4804      	ldr	r0, [pc, #16]	@ (8002228 <sensirion_i2c_read+0x34>)
 8002218:	f001 fd86 	bl	8003d28 <HAL_I2C_Master_Receive>
 800221c:	4603      	mov	r3, r0
 800221e:	b25b      	sxtb	r3, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000218 	.word	0x20000218

0800222c <sensirion_i2c_init>:

void sensirion_i2c_init(void) {}
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <sht4x_init>:
// sht4x.c - Giao tiếp cơ bản với cảm biến SHT40
#include "sht4x.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_common.h"

int8_t sht4x_init(void) {
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
    return 0;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
	...

08002248 <sht4x_measure_blocking_read>:

int8_t sht4x_measure_blocking_read(float* temperature, float* humidity) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
    uint8_t cmd[2] = {0xFD}; // Command đo nhanh
 8002252:	23fd      	movs	r3, #253	@ 0xfd
 8002254:	823b      	strh	r3, [r7, #16]
    uint8_t read_data[6];
    sensirion_i2c_write(0x44, cmd, 1);
 8002256:	f107 0310 	add.w	r3, r7, #16
 800225a:	2201      	movs	r2, #1
 800225c:	4619      	mov	r1, r3
 800225e:	2044      	movs	r0, #68	@ 0x44
 8002260:	f7ff ffac 	bl	80021bc <sensirion_i2c_write>
    HAL_Delay(10);
 8002264:	200a      	movs	r0, #10
 8002266:	f000 ff6d 	bl	8003144 <HAL_Delay>
    sensirion_i2c_read(0x44, read_data, 6);
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	2206      	movs	r2, #6
 8002270:	4619      	mov	r1, r3
 8002272:	2044      	movs	r0, #68	@ 0x44
 8002274:	f7ff ffbe 	bl	80021f4 <sensirion_i2c_read>

    uint16_t raw_temp = (read_data[0] << 8) | read_data[1];
 8002278:	7a3b      	ldrb	r3, [r7, #8]
 800227a:	b21b      	sxth	r3, r3
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	b21a      	sxth	r2, r3
 8002280:	7a7b      	ldrb	r3, [r7, #9]
 8002282:	b21b      	sxth	r3, r3
 8002284:	4313      	orrs	r3, r2
 8002286:	b21b      	sxth	r3, r3
 8002288:	82fb      	strh	r3, [r7, #22]
    uint16_t raw_hum = (read_data[3] << 8) | read_data[4];
 800228a:	7afb      	ldrb	r3, [r7, #11]
 800228c:	b21b      	sxth	r3, r3
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	b21a      	sxth	r2, r3
 8002292:	7b3b      	ldrb	r3, [r7, #12]
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b21b      	sxth	r3, r3
 800229a:	82bb      	strh	r3, [r7, #20]

    *temperature = -45 + 175 * ((float)raw_temp / 65535);
 800229c:	8afb      	ldrh	r3, [r7, #22]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fca8 	bl	8000bf4 <__aeabi_ui2f>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4914      	ldr	r1, [pc, #80]	@ (80022f8 <sht4x_measure_blocking_read+0xb0>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fdaf 	bl	8000e0c <__aeabi_fdiv>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4912      	ldr	r1, [pc, #72]	@ (80022fc <sht4x_measure_blocking_read+0xb4>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fcf6 	bl	8000ca4 <__aeabi_fmul>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4911      	ldr	r1, [pc, #68]	@ (8002300 <sht4x_measure_blocking_read+0xb8>)
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fbe7 	bl	8000a90 <__aeabi_fsub>
 80022c2:	4603      	mov	r3, r0
 80022c4:	461a      	mov	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	601a      	str	r2, [r3, #0]
    *humidity = 100 * ((float)raw_hum / 65535);
 80022ca:	8abb      	ldrh	r3, [r7, #20]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fc91 	bl	8000bf4 <__aeabi_ui2f>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4908      	ldr	r1, [pc, #32]	@ (80022f8 <sht4x_measure_blocking_read+0xb0>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fd98 	bl	8000e0c <__aeabi_fdiv>
 80022dc:	4603      	mov	r3, r0
 80022de:	4909      	ldr	r1, [pc, #36]	@ (8002304 <sht4x_measure_blocking_read+0xbc>)
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fcdf 	bl	8000ca4 <__aeabi_fmul>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	601a      	str	r2, [r3, #0]

    return 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	477fff00 	.word	0x477fff00
 80022fc:	432f0000 	.word	0x432f0000
 8002300:	42340000 	.word	0x42340000
 8002304:	42c80000 	.word	0x42c80000

08002308 <SIM_SendString>:
 *      Author: meynchan
 */

#include "sim.h"

void SIM_SendString(UART_HandleTypeDef *huart, const char *cmd) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)cmd, strlen(cmd), HAL_MAX_DELAY);
 8002312:	6838      	ldr	r0, [r7, #0]
 8002314:	f7fd ff1c 	bl	8000150 <strlen>
 8002318:	4603      	mov	r3, r0
 800231a:	b29a      	uxth	r2, r3
 800231c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002320:	6839      	ldr	r1, [r7, #0]
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f005 f96c 	bl	8007600 <HAL_UART_Transmit>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <SIM_SendCtrlZ>:

void SIM_SendCtrlZ(UART_HandleTypeDef *huart) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    uint8_t ctrlz = 26;
 8002338:	231a      	movs	r3, #26
 800233a:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(huart, &ctrlz, 1, HAL_MAX_DELAY);
 800233c:	f107 010f 	add.w	r1, r7, #15
 8002340:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002344:	2201      	movs	r2, #1
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f005 f95a 	bl	8007600 <HAL_UART_Transmit>
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <SIM_SendSMS_Init>:

// Khởi tạo FSM gửi SMS
void SIM_SendSMS_Init(SMS_Context *ctx, UART_HandleTypeDef *huart, const char *phone, const char *message) {
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
    ctx->state = SMS_IDLE; // Ban đầu ở trạng thái IDLE, không gửi ngay
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    ctx->huart = huart;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	605a      	str	r2, [r3, #4]
    ctx->phone = phone;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	609a      	str	r2, [r3, #8]
    ctx->message = message;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	60da      	str	r2, [r3, #12]
    ctx->delay_start = 0;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
    ctx->delay_ms = 0;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	615a      	str	r2, [r3, #20]
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <SIM_SendSMS_Update>:

// Cập nhật FSM gửi SMS không chặn
void SIM_SendSMS_Update(SMS_Context *ctx, uint8_t send_now) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
    switch (ctx->state) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b06      	cmp	r3, #6
 80023a2:	f200 80db 	bhi.w	800255c <SIM_SendSMS_Update+0x1cc>
 80023a6:	a201      	add	r2, pc, #4	@ (adr r2, 80023ac <SIM_SendSMS_Update+0x1c>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	080023c9 	.word	0x080023c9
 80023b0:	080023d9 	.word	0x080023d9
 80023b4:	08002403 	.word	0x08002403
 80023b8:	08002445 	.word	0x08002445
 80023bc:	08002485 	.word	0x08002485
 80023c0:	080024db 	.word	0x080024db
 80023c4:	08002529 	.word	0x08002529
        case SMS_IDLE:
            if (send_now) {
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80bb 	beq.w	8002546 <SIM_SendSMS_Update+0x1b6>
                ctx->state = SMS_SEND_AT; // Chỉ bắt đầu gửi khi send_now = 1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80023d6:	e0b6      	b.n	8002546 <SIM_SendSMS_Update+0x1b6>

        case SMS_SEND_AT:
            SIM_SendString(ctx->huart, "AT\r\n");
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4961      	ldr	r1, [pc, #388]	@ (8002564 <SIM_SendSMS_Update+0x1d4>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff92 	bl	8002308 <SIM_SendString>
            delay_ms_nonblocking(1000, &ctx->delay_start);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3310      	adds	r3, #16
 80023e8:	4619      	mov	r1, r3
 80023ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023ee:	f7fe ff25 	bl	800123c <delay_ms_nonblocking>
            ctx->delay_ms = 1000;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023f8:	615a      	str	r2, [r3, #20]
            ctx->state = SMS_SEND_ATE0;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	701a      	strb	r2, [r3, #0]
            break;
 8002400:	e0ac      	b.n	800255c <SIM_SendSMS_Update+0x1cc>

        case SMS_SEND_ATE0:
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_ms)) {
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	4619      	mov	r1, r3
 800240c:	4610      	mov	r0, r2
 800240e:	f7fe ff23 	bl	8001258 <is_delay_ms_complete>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 8098 	beq.w	800254a <SIM_SendSMS_Update+0x1ba>
                SIM_SendString(ctx->huart, "ATE0\r\n");
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4952      	ldr	r1, [pc, #328]	@ (8002568 <SIM_SendSMS_Update+0x1d8>)
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff71 	bl	8002308 <SIM_SendString>
                delay_ms_nonblocking(500, &ctx->delay_start);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3310      	adds	r3, #16
 800242a:	4619      	mov	r1, r3
 800242c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002430:	f7fe ff04 	bl	800123c <delay_ms_nonblocking>
                ctx->delay_ms = 500;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800243a:	615a      	str	r2, [r3, #20]
                ctx->state = SMS_SET_CMGF;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2203      	movs	r2, #3
 8002440:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002442:	e082      	b.n	800254a <SIM_SendSMS_Update+0x1ba>

        case SMS_SET_CMGF:
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_ms)) {
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f7fe ff02 	bl	8001258 <is_delay_ms_complete>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d079      	beq.n	800254e <SIM_SendSMS_Update+0x1be>
                SIM_SendString(ctx->huart, "AT+CMGF=1\r\n");
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4943      	ldr	r1, [pc, #268]	@ (800256c <SIM_SendSMS_Update+0x1dc>)
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff51 	bl	8002308 <SIM_SendString>
                delay_ms_nonblocking(500, &ctx->delay_start);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3310      	adds	r3, #16
 800246a:	4619      	mov	r1, r3
 800246c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002470:	f7fe fee4 	bl	800123c <delay_ms_nonblocking>
                ctx->delay_ms = 500;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800247a:	615a      	str	r2, [r3, #20]
                ctx->state = SMS_SEND_CMGS;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2204      	movs	r2, #4
 8002480:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002482:	e064      	b.n	800254e <SIM_SendSMS_Update+0x1be>

        case SMS_SEND_CMGS:
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_ms)) {
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f7fe fee2 	bl	8001258 <is_delay_ms_complete>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d05b      	beq.n	8002552 <SIM_SendSMS_Update+0x1c2>
                sprintf(ctx->cmd, "AT+CMGS=\"%s\"\r\n", ctx->phone);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f103 0018 	add.w	r0, r3, #24
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4932      	ldr	r1, [pc, #200]	@ (8002570 <SIM_SendSMS_Update+0x1e0>)
 80024a8:	f005 ff9a 	bl	80083e0 <siprintf>
                SIM_SendString(ctx->huart, ctx->cmd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3318      	adds	r3, #24
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f7ff ff26 	bl	8002308 <SIM_SendString>
                delay_ms_nonblocking(1000, &ctx->delay_start);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3310      	adds	r3, #16
 80024c0:	4619      	mov	r1, r3
 80024c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024c6:	f7fe feb9 	bl	800123c <delay_ms_nonblocking>
                ctx->delay_ms = 1000;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024d0:	615a      	str	r2, [r3, #20]
                ctx->state = SMS_SEND_MESSAGE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2205      	movs	r2, #5
 80024d6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80024d8:	e03b      	b.n	8002552 <SIM_SendSMS_Update+0x1c2>

        case SMS_SEND_MESSAGE:
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_ms)) {
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	4619      	mov	r1, r3
 80024e4:	4610      	mov	r0, r2
 80024e6:	f7fe feb7 	bl	8001258 <is_delay_ms_complete>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d032      	beq.n	8002556 <SIM_SendSMS_Update+0x1c6>
                SIM_SendString(ctx->huart, ctx->message);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f7ff ff04 	bl	8002308 <SIM_SendString>
                SIM_SendCtrlZ(ctx->huart);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff13 	bl	8002330 <SIM_SendCtrlZ>
                delay_ms_nonblocking(5000, &ctx->delay_start);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3310      	adds	r3, #16
 800250e:	4619      	mov	r1, r3
 8002510:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002514:	f7fe fe92 	bl	800123c <delay_ms_nonblocking>
                ctx->delay_ms = 5000;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251e:	615a      	str	r2, [r3, #20]
                ctx->state = SMS_WAIT_DONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2206      	movs	r2, #6
 8002524:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002526:	e016      	b.n	8002556 <SIM_SendSMS_Update+0x1c6>

        case SMS_WAIT_DONE:
            if (is_delay_ms_complete(ctx->delay_start, ctx->delay_ms)) {
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	4619      	mov	r1, r3
 8002532:	4610      	mov	r0, r2
 8002534:	f7fe fe90 	bl	8001258 <is_delay_ms_complete>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <SIM_SendSMS_Update+0x1ca>
                ctx->state = SMS_IDLE; // Kết thúc gửi SMS
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002544:	e009      	b.n	800255a <SIM_SendSMS_Update+0x1ca>
            break;
 8002546:	bf00      	nop
 8002548:	e008      	b.n	800255c <SIM_SendSMS_Update+0x1cc>
            break;
 800254a:	bf00      	nop
 800254c:	e006      	b.n	800255c <SIM_SendSMS_Update+0x1cc>
            break;
 800254e:	bf00      	nop
 8002550:	e004      	b.n	800255c <SIM_SendSMS_Update+0x1cc>
            break;
 8002552:	bf00      	nop
 8002554:	e002      	b.n	800255c <SIM_SendSMS_Update+0x1cc>
            break;
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <SIM_SendSMS_Update+0x1cc>
            break;
 800255a:	bf00      	nop
    }
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	0800a710 	.word	0x0800a710
 8002568:	0800a718 	.word	0x0800a718
 800256c:	0800a720 	.word	0x0800a720
 8002570:	0800a72c 	.word	0x0800a72c

08002574 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(void) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800257a:	f000 fa1d 	bl	80029b8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800257e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002582:	2201      	movs	r2, #1
 8002584:	2178      	movs	r1, #120	@ 0x78
 8002586:	485b      	ldr	r0, [pc, #364]	@ (80026f4 <SSD1306_Init+0x180>)
 8002588:	f001 fe3a 	bl	8004200 <HAL_I2C_IsDeviceReady>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002592:	2300      	movs	r3, #0
 8002594:	e0a9      	b.n	80026ea <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002596:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800259a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800259c:	e002      	b.n	80025a4 <SSD1306_Init+0x30>
		p--;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f9      	bne.n	800259e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80025aa:	22ae      	movs	r2, #174	@ 0xae
 80025ac:	2100      	movs	r1, #0
 80025ae:	2078      	movs	r0, #120	@ 0x78
 80025b0:	f000 fa7c 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80025b4:	2220      	movs	r2, #32
 80025b6:	2100      	movs	r1, #0
 80025b8:	2078      	movs	r0, #120	@ 0x78
 80025ba:	f000 fa77 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80025be:	2210      	movs	r2, #16
 80025c0:	2100      	movs	r1, #0
 80025c2:	2078      	movs	r0, #120	@ 0x78
 80025c4:	f000 fa72 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80025c8:	22b0      	movs	r2, #176	@ 0xb0
 80025ca:	2100      	movs	r1, #0
 80025cc:	2078      	movs	r0, #120	@ 0x78
 80025ce:	f000 fa6d 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80025d2:	22c8      	movs	r2, #200	@ 0xc8
 80025d4:	2100      	movs	r1, #0
 80025d6:	2078      	movs	r0, #120	@ 0x78
 80025d8:	f000 fa68 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80025dc:	2200      	movs	r2, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	2078      	movs	r0, #120	@ 0x78
 80025e2:	f000 fa63 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80025e6:	2210      	movs	r2, #16
 80025e8:	2100      	movs	r1, #0
 80025ea:	2078      	movs	r0, #120	@ 0x78
 80025ec:	f000 fa5e 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80025f0:	2240      	movs	r2, #64	@ 0x40
 80025f2:	2100      	movs	r1, #0
 80025f4:	2078      	movs	r0, #120	@ 0x78
 80025f6:	f000 fa59 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80025fa:	2281      	movs	r2, #129	@ 0x81
 80025fc:	2100      	movs	r1, #0
 80025fe:	2078      	movs	r0, #120	@ 0x78
 8002600:	f000 fa54 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002604:	22ff      	movs	r2, #255	@ 0xff
 8002606:	2100      	movs	r1, #0
 8002608:	2078      	movs	r0, #120	@ 0x78
 800260a:	f000 fa4f 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800260e:	22a1      	movs	r2, #161	@ 0xa1
 8002610:	2100      	movs	r1, #0
 8002612:	2078      	movs	r0, #120	@ 0x78
 8002614:	f000 fa4a 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002618:	22a6      	movs	r2, #166	@ 0xa6
 800261a:	2100      	movs	r1, #0
 800261c:	2078      	movs	r0, #120	@ 0x78
 800261e:	f000 fa45 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002622:	22a8      	movs	r2, #168	@ 0xa8
 8002624:	2100      	movs	r1, #0
 8002626:	2078      	movs	r0, #120	@ 0x78
 8002628:	f000 fa40 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800262c:	223f      	movs	r2, #63	@ 0x3f
 800262e:	2100      	movs	r1, #0
 8002630:	2078      	movs	r0, #120	@ 0x78
 8002632:	f000 fa3b 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002636:	22a4      	movs	r2, #164	@ 0xa4
 8002638:	2100      	movs	r1, #0
 800263a:	2078      	movs	r0, #120	@ 0x78
 800263c:	f000 fa36 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002640:	22d3      	movs	r2, #211	@ 0xd3
 8002642:	2100      	movs	r1, #0
 8002644:	2078      	movs	r0, #120	@ 0x78
 8002646:	f000 fa31 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	2078      	movs	r0, #120	@ 0x78
 8002650:	f000 fa2c 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002654:	22d5      	movs	r2, #213	@ 0xd5
 8002656:	2100      	movs	r1, #0
 8002658:	2078      	movs	r0, #120	@ 0x78
 800265a:	f000 fa27 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800265e:	22f0      	movs	r2, #240	@ 0xf0
 8002660:	2100      	movs	r1, #0
 8002662:	2078      	movs	r0, #120	@ 0x78
 8002664:	f000 fa22 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002668:	22d9      	movs	r2, #217	@ 0xd9
 800266a:	2100      	movs	r1, #0
 800266c:	2078      	movs	r0, #120	@ 0x78
 800266e:	f000 fa1d 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002672:	2222      	movs	r2, #34	@ 0x22
 8002674:	2100      	movs	r1, #0
 8002676:	2078      	movs	r0, #120	@ 0x78
 8002678:	f000 fa18 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800267c:	22da      	movs	r2, #218	@ 0xda
 800267e:	2100      	movs	r1, #0
 8002680:	2078      	movs	r0, #120	@ 0x78
 8002682:	f000 fa13 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002686:	2212      	movs	r2, #18
 8002688:	2100      	movs	r1, #0
 800268a:	2078      	movs	r0, #120	@ 0x78
 800268c:	f000 fa0e 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002690:	22db      	movs	r2, #219	@ 0xdb
 8002692:	2100      	movs	r1, #0
 8002694:	2078      	movs	r0, #120	@ 0x78
 8002696:	f000 fa09 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800269a:	2220      	movs	r2, #32
 800269c:	2100      	movs	r1, #0
 800269e:	2078      	movs	r0, #120	@ 0x78
 80026a0:	f000 fa04 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80026a4:	228d      	movs	r2, #141	@ 0x8d
 80026a6:	2100      	movs	r1, #0
 80026a8:	2078      	movs	r0, #120	@ 0x78
 80026aa:	f000 f9ff 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80026ae:	2214      	movs	r2, #20
 80026b0:	2100      	movs	r1, #0
 80026b2:	2078      	movs	r0, #120	@ 0x78
 80026b4:	f000 f9fa 	bl	8002aac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80026b8:	22af      	movs	r2, #175	@ 0xaf
 80026ba:	2100      	movs	r1, #0
 80026bc:	2078      	movs	r0, #120	@ 0x78
 80026be:	f000 f9f5 	bl	8002aac <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80026c2:	222e      	movs	r2, #46	@ 0x2e
 80026c4:	2100      	movs	r1, #0
 80026c6:	2078      	movs	r0, #120	@ 0x78
 80026c8:	f000 f9f0 	bl	8002aac <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f000 f843 	bl	8002758 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80026d2:	f000 f813 	bl	80026fc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <SSD1306_Init+0x184>)
 80026d8:	2200      	movs	r2, #0
 80026da:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <SSD1306_Init+0x184>)
 80026de:	2200      	movs	r2, #0
 80026e0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80026e2:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <SSD1306_Init+0x184>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80026e8:	2301      	movs	r3, #1
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000218 	.word	0x20000218
 80026f8:	200008b0 	.word	0x200008b0

080026fc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002702:	2300      	movs	r3, #0
 8002704:	71fb      	strb	r3, [r7, #7]
 8002706:	e01d      	b.n	8002744 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	3b50      	subs	r3, #80	@ 0x50
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	2100      	movs	r1, #0
 8002712:	2078      	movs	r0, #120	@ 0x78
 8002714:	f000 f9ca 	bl	8002aac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002718:	2200      	movs	r2, #0
 800271a:	2100      	movs	r1, #0
 800271c:	2078      	movs	r0, #120	@ 0x78
 800271e:	f000 f9c5 	bl	8002aac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002722:	2210      	movs	r2, #16
 8002724:	2100      	movs	r1, #0
 8002726:	2078      	movs	r0, #120	@ 0x78
 8002728:	f000 f9c0 	bl	8002aac <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	01db      	lsls	r3, r3, #7
 8002730:	4a08      	ldr	r2, [pc, #32]	@ (8002754 <SSD1306_UpdateScreen+0x58>)
 8002732:	441a      	add	r2, r3
 8002734:	2380      	movs	r3, #128	@ 0x80
 8002736:	2140      	movs	r1, #64	@ 0x40
 8002738:	2078      	movs	r0, #120	@ 0x78
 800273a:	f000 f951 	bl	80029e0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	3301      	adds	r3, #1
 8002742:	71fb      	strb	r3, [r7, #7]
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	2b07      	cmp	r3, #7
 8002748:	d9de      	bls.n	8002708 <SSD1306_UpdateScreen+0xc>
	}
}
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200004b0 	.word	0x200004b0

08002758 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <SSD1306_Fill+0x14>
 8002768:	2300      	movs	r3, #0
 800276a:	e000      	b.n	800276e <SSD1306_Fill+0x16>
 800276c:	23ff      	movs	r3, #255	@ 0xff
 800276e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002772:	4619      	mov	r1, r3
 8002774:	4803      	ldr	r0, [pc, #12]	@ (8002784 <SSD1306_Fill+0x2c>)
 8002776:	f005 fe98 	bl	80084aa <memset>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200004b0 	.word	0x200004b0

08002788 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
 8002792:	460b      	mov	r3, r1
 8002794:	80bb      	strh	r3, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	70fb      	strb	r3, [r7, #3]
	if (
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b7f      	cmp	r3, #127	@ 0x7f
 800279e:	d848      	bhi.n	8002832 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80027a0:	88bb      	ldrh	r3, [r7, #4]
 80027a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80027a4:	d845      	bhi.n	8002832 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80027a6:	4b25      	ldr	r3, [pc, #148]	@ (800283c <SSD1306_DrawPixel+0xb4>)
 80027a8:	791b      	ldrb	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d11a      	bne.n	80027f8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80027c2:	88fa      	ldrh	r2, [r7, #6]
 80027c4:	88bb      	ldrh	r3, [r7, #4]
 80027c6:	08db      	lsrs	r3, r3, #3
 80027c8:	b298      	uxth	r0, r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	01db      	lsls	r3, r3, #7
 80027ce:	4413      	add	r3, r2
 80027d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002840 <SSD1306_DrawPixel+0xb8>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	b25a      	sxtb	r2, r3
 80027d6:	88bb      	ldrh	r3, [r7, #4]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	b25b      	sxtb	r3, r3
 80027e4:	4313      	orrs	r3, r2
 80027e6:	b259      	sxtb	r1, r3
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	4603      	mov	r3, r0
 80027ec:	01db      	lsls	r3, r3, #7
 80027ee:	4413      	add	r3, r2
 80027f0:	b2c9      	uxtb	r1, r1
 80027f2:	4a13      	ldr	r2, [pc, #76]	@ (8002840 <SSD1306_DrawPixel+0xb8>)
 80027f4:	54d1      	strb	r1, [r2, r3]
 80027f6:	e01d      	b.n	8002834 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	88bb      	ldrh	r3, [r7, #4]
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	b298      	uxth	r0, r3
 8002800:	4603      	mov	r3, r0
 8002802:	01db      	lsls	r3, r3, #7
 8002804:	4413      	add	r3, r2
 8002806:	4a0e      	ldr	r2, [pc, #56]	@ (8002840 <SSD1306_DrawPixel+0xb8>)
 8002808:	5cd3      	ldrb	r3, [r2, r3]
 800280a:	b25a      	sxtb	r2, r3
 800280c:	88bb      	ldrh	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	2101      	movs	r1, #1
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	b25b      	sxtb	r3, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	b25b      	sxtb	r3, r3
 800281e:	4013      	ands	r3, r2
 8002820:	b259      	sxtb	r1, r3
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	4603      	mov	r3, r0
 8002826:	01db      	lsls	r3, r3, #7
 8002828:	4413      	add	r3, r2
 800282a:	b2c9      	uxtb	r1, r1
 800282c:	4a04      	ldr	r2, [pc, #16]	@ (8002840 <SSD1306_DrawPixel+0xb8>)
 800282e:	54d1      	strb	r1, [r2, r3]
 8002830:	e000      	b.n	8002834 <SSD1306_DrawPixel+0xac>
		return;
 8002832:	bf00      	nop
	}
}
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	200008b0 	.word	0x200008b0
 8002840:	200004b0 	.word	0x200004b0

08002844 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	460a      	mov	r2, r1
 800284e:	80fb      	strh	r3, [r7, #6]
 8002850:	4613      	mov	r3, r2
 8002852:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002854:	4a05      	ldr	r2, [pc, #20]	@ (800286c <SSD1306_GotoXY+0x28>)
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800285a:	4a04      	ldr	r2, [pc, #16]	@ (800286c <SSD1306_GotoXY+0x28>)
 800285c:	88bb      	ldrh	r3, [r7, #4]
 800285e:	8053      	strh	r3, [r2, #2]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	200008b0 	.word	0x200008b0

08002870 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
 800287c:	4613      	mov	r3, r2
 800287e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002880:	4b39      	ldr	r3, [pc, #228]	@ (8002968 <SSD1306_Putc+0xf8>)
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
	if (
 800288c:	2b7f      	cmp	r3, #127	@ 0x7f
 800288e:	dc07      	bgt.n	80028a0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002890:	4b35      	ldr	r3, [pc, #212]	@ (8002968 <SSD1306_Putc+0xf8>)
 8002892:	885b      	ldrh	r3, [r3, #2]
 8002894:	461a      	mov	r2, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	785b      	ldrb	r3, [r3, #1]
 800289a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800289c:	2b3f      	cmp	r3, #63	@ 0x3f
 800289e:	dd01      	ble.n	80028a4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e05d      	b.n	8002960 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e04b      	b.n	8002942 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	3b20      	subs	r3, #32
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	7849      	ldrb	r1, [r1, #1]
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4619      	mov	r1, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	440b      	add	r3, r1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	e030      	b.n	8002930 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80028de:	4b22      	ldr	r3, [pc, #136]	@ (8002968 <SSD1306_Putc+0xf8>)
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	b298      	uxth	r0, r3
 80028ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002968 <SSD1306_Putc+0xf8>)
 80028ec:	885a      	ldrh	r2, [r3, #2]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	79ba      	ldrb	r2, [r7, #6]
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7ff ff45 	bl	8002788 <SSD1306_DrawPixel>
 80028fe:	e014      	b.n	800292a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <SSD1306_Putc+0xf8>)
 8002902:	881a      	ldrh	r2, [r3, #0]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	b29b      	uxth	r3, r3
 8002908:	4413      	add	r3, r2
 800290a:	b298      	uxth	r0, r3
 800290c:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <SSD1306_Putc+0xf8>)
 800290e:	885a      	ldrh	r2, [r3, #2]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	b29b      	uxth	r3, r3
 8002914:	4413      	add	r3, r2
 8002916:	b299      	uxth	r1, r3
 8002918:	79bb      	ldrb	r3, [r7, #6]
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	f7ff ff2f 	bl	8002788 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	3301      	adds	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4293      	cmp	r3, r2
 800293a:	d3c8      	bcc.n	80028ce <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3301      	adds	r3, #1
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	785b      	ldrb	r3, [r3, #1]
 8002946:	461a      	mov	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	4293      	cmp	r3, r2
 800294c:	d3ad      	bcc.n	80028aa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800294e:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <SSD1306_Putc+0xf8>)
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	7812      	ldrb	r2, [r2, #0]
 8002956:	4413      	add	r3, r2
 8002958:	b29a      	uxth	r2, r3
 800295a:	4b03      	ldr	r3, [pc, #12]	@ (8002968 <SSD1306_Putc+0xf8>)
 800295c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800295e:	79fb      	ldrb	r3, [r7, #7]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200008b0 	.word	0x200008b0

0800296c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	4613      	mov	r3, r2
 8002978:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800297a:	e012      	b.n	80029a2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	79fa      	ldrb	r2, [r7, #7]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff73 	bl	8002870 <SSD1306_Putc>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d002      	beq.n	800299c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	e008      	b.n	80029ae <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3301      	adds	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e8      	bne.n	800297c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	781b      	ldrb	r3, [r3, #0]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80029be:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <ssd1306_I2C_Init+0x24>)
 80029c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80029c2:	e002      	b.n	80029ca <ssd1306_I2C_Init+0x12>
		p--;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f9      	bne.n	80029c4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	0003d090 	.word	0x0003d090

080029e0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b0c7      	sub	sp, #284	@ 0x11c
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	4604      	mov	r4, r0
 80029e8:	4608      	mov	r0, r1
 80029ea:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80029ee:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80029f2:	600a      	str	r2, [r1, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029fa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80029fe:	4622      	mov	r2, r4
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a06:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a16:	460a      	mov	r2, r1
 8002a18:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002a1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a22:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002a26:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002a2a:	7812      	ldrb	r2, [r2, #0]
 8002a2c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002a34:	e015      	b.n	8002a62 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002a36:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002a3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002a3e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	441a      	add	r2, r3
 8002a46:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	7811      	ldrb	r1, [r2, #0]
 8002a4e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002a52:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002a56:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002a58:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002a62:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002a6c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002a70:	8812      	ldrh	r2, [r2, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d8df      	bhi.n	8002a36 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a7a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b299      	uxth	r1, r3
 8002a82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f107 020c 	add.w	r2, r7, #12
 8002a94:	200a      	movs	r0, #10
 8002a96:	9000      	str	r0, [sp, #0]
 8002a98:	4803      	ldr	r0, [pc, #12]	@ (8002aa8 <ssd1306_I2C_WriteMulti+0xc8>)
 8002a9a:	f001 f847 	bl	8003b2c <HAL_I2C_Master_Transmit>
}
 8002a9e:	bf00      	nop
 8002aa0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}
 8002aa8:	20000218 	.word	0x20000218

08002aac <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	71bb      	strb	r3, [r7, #6]
 8002aba:	4613      	mov	r3, r2
 8002abc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002abe:	79bb      	ldrb	r3, [r7, #6]
 8002ac0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002ac2:	797b      	ldrb	r3, [r7, #5]
 8002ac4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	b299      	uxth	r1, r3
 8002aca:	f107 020c 	add.w	r2, r7, #12
 8002ace:	230a      	movs	r3, #10
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	4803      	ldr	r0, [pc, #12]	@ (8002ae4 <ssd1306_I2C_Write+0x38>)
 8002ad6:	f001 f829 	bl	8003b2c <HAL_I2C_Master_Transmit>
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000218 	.word	0x20000218

08002ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_MspInit+0x5c>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	4a14      	ldr	r2, [pc, #80]	@ (8002b44 <HAL_MspInit+0x5c>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6193      	str	r3, [r2, #24]
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_MspInit+0x5c>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <HAL_MspInit+0x5c>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b44 <HAL_MspInit+0x5c>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b10:	61d3      	str	r3, [r2, #28]
 8002b12:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <HAL_MspInit+0x5c>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <HAL_MspInit+0x60>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <HAL_MspInit+0x60>)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40010000 	.word	0x40010000

08002b4c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1d      	ldr	r2, [pc, #116]	@ (8002bdc <HAL_I2C_MspInit+0x90>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d133      	bne.n	8002bd4 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <HAL_I2C_MspInit+0x94>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4a1b      	ldr	r2, [pc, #108]	@ (8002be0 <HAL_I2C_MspInit+0x94>)
 8002b72:	f043 0308 	orr.w	r3, r3, #8
 8002b76:	6193      	str	r3, [r2, #24]
 8002b78:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <HAL_I2C_MspInit+0x94>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b84:	23c0      	movs	r3, #192	@ 0xc0
 8002b86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b88:	2312      	movs	r3, #18
 8002b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	4619      	mov	r1, r3
 8002b96:	4813      	ldr	r0, [pc, #76]	@ (8002be4 <HAL_I2C_MspInit+0x98>)
 8002b98:	f000 fc8c 	bl	80034b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b9c:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <HAL_I2C_MspInit+0x94>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8002be0 <HAL_I2C_MspInit+0x94>)
 8002ba2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ba6:	61d3      	str	r3, [r2, #28]
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <HAL_I2C_MspInit+0x94>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	201f      	movs	r0, #31
 8002bba:	f000 fbbe 	bl	800333a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002bbe:	201f      	movs	r0, #31
 8002bc0:	f000 fbd7 	bl	8003372 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2020      	movs	r0, #32
 8002bca:	f000 fbb6 	bl	800333a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002bce:	2020      	movs	r0, #32
 8002bd0:	f000 fbcf 	bl	8003372 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002bd4:	bf00      	nop
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40005400 	.word	0x40005400
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40010c00 	.word	0x40010c00

08002be8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c60 <HAL_TIM_Base_MspInit+0x78>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d114      	bne.n	8002c24 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <HAL_TIM_Base_MspInit+0x7c>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	4a19      	ldr	r2, [pc, #100]	@ (8002c64 <HAL_TIM_Base_MspInit+0x7c>)
 8002c00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c04:	6193      	str	r3, [r2, #24]
 8002c06:	4b17      	ldr	r3, [pc, #92]	@ (8002c64 <HAL_TIM_Base_MspInit+0x7c>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2100      	movs	r1, #0
 8002c16:	2019      	movs	r0, #25
 8002c18:	f000 fb8f 	bl	800333a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002c1c:	2019      	movs	r0, #25
 8002c1e:	f000 fba8 	bl	8003372 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c22:	e018      	b.n	8002c56 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0f      	ldr	r2, [pc, #60]	@ (8002c68 <HAL_TIM_Base_MspInit+0x80>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d113      	bne.n	8002c56 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <HAL_TIM_Base_MspInit+0x7c>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4a0c      	ldr	r2, [pc, #48]	@ (8002c64 <HAL_TIM_Base_MspInit+0x7c>)
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	61d3      	str	r3, [r2, #28]
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <HAL_TIM_Base_MspInit+0x7c>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	201d      	movs	r0, #29
 8002c4c:	f000 fb75 	bl	800333a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c50:	201d      	movs	r0, #29
 8002c52:	f000 fb8e 	bl	8003372 <HAL_NVIC_EnableIRQ>
}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40000400 	.word	0x40000400

08002c6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	@ 0x30
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0320 	add.w	r3, r7, #32
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a53      	ldr	r2, [pc, #332]	@ (8002dd4 <HAL_UART_MspInit+0x168>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d132      	bne.n	8002cf2 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c8c:	4b52      	ldr	r3, [pc, #328]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4a51      	ldr	r2, [pc, #324]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002c92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c96:	6193      	str	r3, [r2, #24]
 8002c98:	4b4f      	ldr	r3, [pc, #316]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca4:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b49      	ldr	r3, [pc, #292]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cca:	f107 0320 	add.w	r3, r7, #32
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4842      	ldr	r0, [pc, #264]	@ (8002ddc <HAL_UART_MspInit+0x170>)
 8002cd2:	f000 fbef 	bl	80034b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce4:	f107 0320 	add.w	r3, r7, #32
 8002ce8:	4619      	mov	r1, r3
 8002cea:	483c      	ldr	r0, [pc, #240]	@ (8002ddc <HAL_UART_MspInit+0x170>)
 8002cec:	f000 fbe2 	bl	80034b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cf0:	e06c      	b.n	8002dcc <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a3a      	ldr	r2, [pc, #232]	@ (8002de0 <HAL_UART_MspInit+0x174>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d130      	bne.n	8002d5e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cfc:	4b36      	ldr	r3, [pc, #216]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4a35      	ldr	r2, [pc, #212]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d06:	61d3      	str	r3, [r2, #28]
 8002d08:	4b33      	ldr	r3, [pc, #204]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d14:	4b30      	ldr	r3, [pc, #192]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d38:	f107 0320 	add.w	r3, r7, #32
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4827      	ldr	r0, [pc, #156]	@ (8002ddc <HAL_UART_MspInit+0x170>)
 8002d40:	f000 fbb8 	bl	80034b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d44:	2308      	movs	r3, #8
 8002d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d50:	f107 0320 	add.w	r3, r7, #32
 8002d54:	4619      	mov	r1, r3
 8002d56:	4821      	ldr	r0, [pc, #132]	@ (8002ddc <HAL_UART_MspInit+0x170>)
 8002d58:	f000 fbac 	bl	80034b4 <HAL_GPIO_Init>
}
 8002d5c:	e036      	b.n	8002dcc <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a20      	ldr	r2, [pc, #128]	@ (8002de4 <HAL_UART_MspInit+0x178>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d131      	bne.n	8002dcc <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002d6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d72:	61d3      	str	r3, [r2, #28]
 8002d74:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d80:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a14      	ldr	r2, [pc, #80]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002d86:	f043 0308 	orr.w	r3, r3, #8
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_UART_MspInit+0x16c>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da2:	2303      	movs	r3, #3
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	f107 0320 	add.w	r3, r7, #32
 8002daa:	4619      	mov	r1, r3
 8002dac:	480e      	ldr	r0, [pc, #56]	@ (8002de8 <HAL_UART_MspInit+0x17c>)
 8002dae:	f000 fb81 	bl	80034b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002db2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc0:	f107 0320 	add.w	r3, r7, #32
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4808      	ldr	r0, [pc, #32]	@ (8002de8 <HAL_UART_MspInit+0x17c>)
 8002dc8:	f000 fb74 	bl	80034b4 <HAL_GPIO_Init>
}
 8002dcc:	bf00      	nop
 8002dce:	3730      	adds	r7, #48	@ 0x30
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40013800 	.word	0x40013800
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40010800 	.word	0x40010800
 8002de0:	40004400 	.word	0x40004400
 8002de4:	40004800 	.word	0x40004800
 8002de8:	40010c00 	.word	0x40010c00

08002dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002df0:	bf00      	nop
 8002df2:	e7fd      	b.n	8002df0 <NMI_Handler+0x4>

08002df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <HardFault_Handler+0x4>

08002dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <MemManage_Handler+0x4>

08002e04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <BusFault_Handler+0x4>

08002e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <UsageFault_Handler+0x4>

08002e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e3c:	f000 f966 	bl	800310c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e48:	4802      	ldr	r0, [pc, #8]	@ (8002e54 <TIM1_UP_IRQHandler+0x10>)
 8002e4a:	f004 f839 	bl	8006ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	2000026c 	.word	0x2000026c

08002e58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e5c:	4802      	ldr	r0, [pc, #8]	@ (8002e68 <TIM3_IRQHandler+0x10>)
 8002e5e:	f004 f82f 	bl	8006ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200002b4 	.word	0x200002b4

08002e6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002e70:	4802      	ldr	r0, [pc, #8]	@ (8002e7c <I2C1_EV_IRQHandler+0x10>)
 8002e72:	f001 faf3 	bl	800445c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000218 	.word	0x20000218

08002e80 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e84:	4802      	ldr	r0, [pc, #8]	@ (8002e90 <I2C1_ER_IRQHandler+0x10>)
 8002e86:	f001 fc5a 	bl	800473e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000218 	.word	0x20000218

08002e94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002e98:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002e9c:	f000 fcd6 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return 1;
 8002ea8:	2301      	movs	r3, #1
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <_kill>:

int _kill(int pid, int sig)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ebc:	f005 fb48 	bl	8008550 <__errno>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2216      	movs	r2, #22
 8002ec4:	601a      	str	r2, [r3, #0]
  return -1;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <_exit>:

void _exit (int status)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002eda:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ffe7 	bl	8002eb2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <_exit+0x12>

08002ee8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	e00a      	b.n	8002f10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002efa:	f3af 8000 	nop.w
 8002efe:	4601      	mov	r1, r0
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	60ba      	str	r2, [r7, #8]
 8002f06:	b2ca      	uxtb	r2, r1
 8002f08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	dbf0      	blt.n	8002efa <_read+0x12>
  }

  return len;
 8002f18:	687b      	ldr	r3, [r7, #4]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e009      	b.n	8002f48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	60ba      	str	r2, [r7, #8]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3301      	adds	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	dbf1      	blt.n	8002f34 <_write+0x12>
  }
  return len;
 8002f50:	687b      	ldr	r3, [r7, #4]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <_close>:

int _close(int file)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f80:	605a      	str	r2, [r3, #4]
  return 0;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <_isatty>:

int _isatty(int file)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
	...

08002fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc4:	4a14      	ldr	r2, [pc, #80]	@ (8003018 <_sbrk+0x5c>)
 8002fc6:	4b15      	ldr	r3, [pc, #84]	@ (800301c <_sbrk+0x60>)
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd0:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <_sbrk+0x64>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <_sbrk+0x64>)
 8002fda:	4a12      	ldr	r2, [pc, #72]	@ (8003024 <_sbrk+0x68>)
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fde:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <_sbrk+0x64>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d207      	bcs.n	8002ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fec:	f005 fab0 	bl	8008550 <__errno>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ffa:	e009      	b.n	8003010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ffc:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <_sbrk+0x64>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003002:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <_sbrk+0x64>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	4a05      	ldr	r2, [pc, #20]	@ (8003020 <_sbrk+0x64>)
 800300c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20005000 	.word	0x20005000
 800301c:	00000400 	.word	0x00000400
 8003020:	200008b8 	.word	0x200008b8
 8003024:	20000a10 	.word	0x20000a10

08003028 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003034:	f7ff fff8 	bl	8003028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003038:	480b      	ldr	r0, [pc, #44]	@ (8003068 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800303a:	490c      	ldr	r1, [pc, #48]	@ (800306c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800303c:	4a0c      	ldr	r2, [pc, #48]	@ (8003070 <LoopFillZerobss+0x16>)
  movs r3, #0
 800303e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003040:	e002      	b.n	8003048 <LoopCopyDataInit>

08003042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003046:	3304      	adds	r3, #4

08003048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800304a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800304c:	d3f9      	bcc.n	8003042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800304e:	4a09      	ldr	r2, [pc, #36]	@ (8003074 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003050:	4c09      	ldr	r4, [pc, #36]	@ (8003078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003054:	e001      	b.n	800305a <LoopFillZerobss>

08003056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003058:	3204      	adds	r2, #4

0800305a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800305a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800305c:	d3fb      	bcc.n	8003056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800305e:	f005 fa7d 	bl	800855c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003062:	f7fe fd21 	bl	8001aa8 <main>
  bx lr
 8003066:	4770      	bx	lr
  ldr r0, =_sdata
 8003068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800306c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003070:	0800b254 	.word	0x0800b254
  ldr r2, =_sbss
 8003074:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003078:	20000a0c 	.word	0x20000a0c

0800307c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800307c:	e7fe      	b.n	800307c <ADC1_2_IRQHandler>
	...

08003080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003084:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <HAL_Init+0x28>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a07      	ldr	r2, [pc, #28]	@ (80030a8 <HAL_Init+0x28>)
 800308a:	f043 0310 	orr.w	r3, r3, #16
 800308e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003090:	2003      	movs	r0, #3
 8003092:	f000 f947 	bl	8003324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003096:	200f      	movs	r0, #15
 8003098:	f000 f808 	bl	80030ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800309c:	f7ff fd24 	bl	8002ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40022000 	.word	0x40022000

080030ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030b4:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <HAL_InitTick+0x54>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b12      	ldr	r3, [pc, #72]	@ (8003104 <HAL_InitTick+0x58>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f95f 	bl	800338e <HAL_SYSTICK_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e00e      	b.n	80030f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b0f      	cmp	r3, #15
 80030de:	d80a      	bhi.n	80030f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e0:	2200      	movs	r2, #0
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030e8:	f000 f927 	bl	800333a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030ec:	4a06      	ldr	r2, [pc, #24]	@ (8003108 <HAL_InitTick+0x5c>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000024 	.word	0x20000024
 8003104:	2000002c 	.word	0x2000002c
 8003108:	20000028 	.word	0x20000028

0800310c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <HAL_IncTick+0x1c>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	4b05      	ldr	r3, [pc, #20]	@ (800312c <HAL_IncTick+0x20>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4413      	add	r3, r2
 800311c:	4a03      	ldr	r2, [pc, #12]	@ (800312c <HAL_IncTick+0x20>)
 800311e:	6013      	str	r3, [r2, #0]
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	2000002c 	.word	0x2000002c
 800312c:	200008bc 	.word	0x200008bc

08003130 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return uwTick;
 8003134:	4b02      	ldr	r3, [pc, #8]	@ (8003140 <HAL_GetTick+0x10>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	200008bc 	.word	0x200008bc

08003144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800314c:	f7ff fff0 	bl	8003130 <HAL_GetTick>
 8003150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800315c:	d005      	beq.n	800316a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800315e:	4b0a      	ldr	r3, [pc, #40]	@ (8003188 <HAL_Delay+0x44>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800316a:	bf00      	nop
 800316c:	f7ff ffe0 	bl	8003130 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	429a      	cmp	r2, r3
 800317a:	d8f7      	bhi.n	800316c <HAL_Delay+0x28>
  {
  }
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	2000002c 	.word	0x2000002c

0800318c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800319c:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a8:	4013      	ands	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031be:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	60d3      	str	r3, [r2, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d8:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <__NVIC_GetPriorityGrouping+0x18>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	f003 0307 	and.w	r3, r3, #7
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	db0b      	blt.n	800321a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	4906      	ldr	r1, [pc, #24]	@ (8003224 <__NVIC_EnableIRQ+0x34>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2001      	movs	r0, #1
 8003212:	fa00 f202 	lsl.w	r2, r0, r2
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr
 8003224:	e000e100 	.word	0xe000e100

08003228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	2b00      	cmp	r3, #0
 800323a:	db0a      	blt.n	8003252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	490c      	ldr	r1, [pc, #48]	@ (8003274 <__NVIC_SetPriority+0x4c>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	0112      	lsls	r2, r2, #4
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	440b      	add	r3, r1
 800324c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003250:	e00a      	b.n	8003268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4908      	ldr	r1, [pc, #32]	@ (8003278 <__NVIC_SetPriority+0x50>)
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	3b04      	subs	r3, #4
 8003260:	0112      	lsls	r2, r2, #4
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	440b      	add	r3, r1
 8003266:	761a      	strb	r2, [r3, #24]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	e000e100 	.word	0xe000e100
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	@ 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f1c3 0307 	rsb	r3, r3, #7
 8003296:	2b04      	cmp	r3, #4
 8003298:	bf28      	it	cs
 800329a:	2304      	movcs	r3, #4
 800329c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d902      	bls.n	80032ac <NVIC_EncodePriority+0x30>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3b03      	subs	r3, #3
 80032aa:	e000      	b.n	80032ae <NVIC_EncodePriority+0x32>
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	401a      	ands	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	43d9      	mvns	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	4313      	orrs	r3, r2
         );
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3724      	adds	r7, #36	@ 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f0:	d301      	bcc.n	80032f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032f2:	2301      	movs	r3, #1
 80032f4:	e00f      	b.n	8003316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003320 <SysTick_Config+0x40>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032fe:	210f      	movs	r1, #15
 8003300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003304:	f7ff ff90 	bl	8003228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <SysTick_Config+0x40>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330e:	4b04      	ldr	r3, [pc, #16]	@ (8003320 <SysTick_Config+0x40>)
 8003310:	2207      	movs	r2, #7
 8003312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	e000e010 	.word	0xe000e010

08003324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff2d 	bl	800318c <__NVIC_SetPriorityGrouping>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	4603      	mov	r3, r0
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800334c:	f7ff ff42 	bl	80031d4 <__NVIC_GetPriorityGrouping>
 8003350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	6978      	ldr	r0, [r7, #20]
 8003358:	f7ff ff90 	bl	800327c <NVIC_EncodePriority>
 800335c:	4602      	mov	r2, r0
 800335e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff5f 	bl	8003228 <__NVIC_SetPriority>
}
 800336a:	bf00      	nop
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800337c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff35 	bl	80031f0 <__NVIC_EnableIRQ>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ffa2 	bl	80032e0 <SysTick_Config>
 800339c:	4603      	mov	r3, r0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d005      	beq.n	80033cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2204      	movs	r2, #4
 80033c4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	e051      	b.n	8003470 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 020e 	bic.w	r2, r2, #14
 80033da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a22      	ldr	r2, [pc, #136]	@ (800347c <HAL_DMA_Abort_IT+0xd4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d029      	beq.n	800344a <HAL_DMA_Abort_IT+0xa2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a21      	ldr	r2, [pc, #132]	@ (8003480 <HAL_DMA_Abort_IT+0xd8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d022      	beq.n	8003446 <HAL_DMA_Abort_IT+0x9e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1f      	ldr	r2, [pc, #124]	@ (8003484 <HAL_DMA_Abort_IT+0xdc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d01a      	beq.n	8003440 <HAL_DMA_Abort_IT+0x98>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1e      	ldr	r2, [pc, #120]	@ (8003488 <HAL_DMA_Abort_IT+0xe0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d012      	beq.n	800343a <HAL_DMA_Abort_IT+0x92>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1c      	ldr	r2, [pc, #112]	@ (800348c <HAL_DMA_Abort_IT+0xe4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00a      	beq.n	8003434 <HAL_DMA_Abort_IT+0x8c>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1b      	ldr	r2, [pc, #108]	@ (8003490 <HAL_DMA_Abort_IT+0xe8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d102      	bne.n	800342e <HAL_DMA_Abort_IT+0x86>
 8003428:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800342c:	e00e      	b.n	800344c <HAL_DMA_Abort_IT+0xa4>
 800342e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003432:	e00b      	b.n	800344c <HAL_DMA_Abort_IT+0xa4>
 8003434:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003438:	e008      	b.n	800344c <HAL_DMA_Abort_IT+0xa4>
 800343a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800343e:	e005      	b.n	800344c <HAL_DMA_Abort_IT+0xa4>
 8003440:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003444:	e002      	b.n	800344c <HAL_DMA_Abort_IT+0xa4>
 8003446:	2310      	movs	r3, #16
 8003448:	e000      	b.n	800344c <HAL_DMA_Abort_IT+0xa4>
 800344a:	2301      	movs	r3, #1
 800344c:	4a11      	ldr	r2, [pc, #68]	@ (8003494 <HAL_DMA_Abort_IT+0xec>)
 800344e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
    } 
  }
  return status;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40020008 	.word	0x40020008
 8003480:	4002001c 	.word	0x4002001c
 8003484:	40020030 	.word	0x40020030
 8003488:	40020044 	.word	0x40020044
 800348c:	40020058 	.word	0x40020058
 8003490:	4002006c 	.word	0x4002006c
 8003494:	40020000 	.word	0x40020000

08003498 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034a6:	b2db      	uxtb	r3, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b08b      	sub	sp, #44	@ 0x2c
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034c2:	2300      	movs	r3, #0
 80034c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c6:	e169      	b.n	800379c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034c8:	2201      	movs	r2, #1
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	f040 8158 	bne.w	8003796 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4a9a      	ldr	r2, [pc, #616]	@ (8003754 <HAL_GPIO_Init+0x2a0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d05e      	beq.n	80035ae <HAL_GPIO_Init+0xfa>
 80034f0:	4a98      	ldr	r2, [pc, #608]	@ (8003754 <HAL_GPIO_Init+0x2a0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d875      	bhi.n	80035e2 <HAL_GPIO_Init+0x12e>
 80034f6:	4a98      	ldr	r2, [pc, #608]	@ (8003758 <HAL_GPIO_Init+0x2a4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d058      	beq.n	80035ae <HAL_GPIO_Init+0xfa>
 80034fc:	4a96      	ldr	r2, [pc, #600]	@ (8003758 <HAL_GPIO_Init+0x2a4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d86f      	bhi.n	80035e2 <HAL_GPIO_Init+0x12e>
 8003502:	4a96      	ldr	r2, [pc, #600]	@ (800375c <HAL_GPIO_Init+0x2a8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d052      	beq.n	80035ae <HAL_GPIO_Init+0xfa>
 8003508:	4a94      	ldr	r2, [pc, #592]	@ (800375c <HAL_GPIO_Init+0x2a8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d869      	bhi.n	80035e2 <HAL_GPIO_Init+0x12e>
 800350e:	4a94      	ldr	r2, [pc, #592]	@ (8003760 <HAL_GPIO_Init+0x2ac>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d04c      	beq.n	80035ae <HAL_GPIO_Init+0xfa>
 8003514:	4a92      	ldr	r2, [pc, #584]	@ (8003760 <HAL_GPIO_Init+0x2ac>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d863      	bhi.n	80035e2 <HAL_GPIO_Init+0x12e>
 800351a:	4a92      	ldr	r2, [pc, #584]	@ (8003764 <HAL_GPIO_Init+0x2b0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d046      	beq.n	80035ae <HAL_GPIO_Init+0xfa>
 8003520:	4a90      	ldr	r2, [pc, #576]	@ (8003764 <HAL_GPIO_Init+0x2b0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d85d      	bhi.n	80035e2 <HAL_GPIO_Init+0x12e>
 8003526:	2b12      	cmp	r3, #18
 8003528:	d82a      	bhi.n	8003580 <HAL_GPIO_Init+0xcc>
 800352a:	2b12      	cmp	r3, #18
 800352c:	d859      	bhi.n	80035e2 <HAL_GPIO_Init+0x12e>
 800352e:	a201      	add	r2, pc, #4	@ (adr r2, 8003534 <HAL_GPIO_Init+0x80>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	080035af 	.word	0x080035af
 8003538:	08003589 	.word	0x08003589
 800353c:	0800359b 	.word	0x0800359b
 8003540:	080035dd 	.word	0x080035dd
 8003544:	080035e3 	.word	0x080035e3
 8003548:	080035e3 	.word	0x080035e3
 800354c:	080035e3 	.word	0x080035e3
 8003550:	080035e3 	.word	0x080035e3
 8003554:	080035e3 	.word	0x080035e3
 8003558:	080035e3 	.word	0x080035e3
 800355c:	080035e3 	.word	0x080035e3
 8003560:	080035e3 	.word	0x080035e3
 8003564:	080035e3 	.word	0x080035e3
 8003568:	080035e3 	.word	0x080035e3
 800356c:	080035e3 	.word	0x080035e3
 8003570:	080035e3 	.word	0x080035e3
 8003574:	080035e3 	.word	0x080035e3
 8003578:	08003591 	.word	0x08003591
 800357c:	080035a5 	.word	0x080035a5
 8003580:	4a79      	ldr	r2, [pc, #484]	@ (8003768 <HAL_GPIO_Init+0x2b4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003586:	e02c      	b.n	80035e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	623b      	str	r3, [r7, #32]
          break;
 800358e:	e029      	b.n	80035e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	3304      	adds	r3, #4
 8003596:	623b      	str	r3, [r7, #32]
          break;
 8003598:	e024      	b.n	80035e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	3308      	adds	r3, #8
 80035a0:	623b      	str	r3, [r7, #32]
          break;
 80035a2:	e01f      	b.n	80035e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	330c      	adds	r3, #12
 80035aa:	623b      	str	r3, [r7, #32]
          break;
 80035ac:	e01a      	b.n	80035e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d102      	bne.n	80035bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035b6:	2304      	movs	r3, #4
 80035b8:	623b      	str	r3, [r7, #32]
          break;
 80035ba:	e013      	b.n	80035e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035c4:	2308      	movs	r3, #8
 80035c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	611a      	str	r2, [r3, #16]
          break;
 80035ce:	e009      	b.n	80035e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035d0:	2308      	movs	r3, #8
 80035d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	615a      	str	r2, [r3, #20]
          break;
 80035da:	e003      	b.n	80035e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035dc:	2300      	movs	r3, #0
 80035de:	623b      	str	r3, [r7, #32]
          break;
 80035e0:	e000      	b.n	80035e4 <HAL_GPIO_Init+0x130>
          break;
 80035e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2bff      	cmp	r3, #255	@ 0xff
 80035e8:	d801      	bhi.n	80035ee <HAL_GPIO_Init+0x13a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	e001      	b.n	80035f2 <HAL_GPIO_Init+0x13e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2bff      	cmp	r3, #255	@ 0xff
 80035f8:	d802      	bhi.n	8003600 <HAL_GPIO_Init+0x14c>
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	e002      	b.n	8003606 <HAL_GPIO_Init+0x152>
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	3b08      	subs	r3, #8
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	210f      	movs	r1, #15
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	401a      	ands	r2, r3
 8003618:	6a39      	ldr	r1, [r7, #32]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	431a      	orrs	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80b1 	beq.w	8003796 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003634:	4b4d      	ldr	r3, [pc, #308]	@ (800376c <HAL_GPIO_Init+0x2b8>)
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	4a4c      	ldr	r2, [pc, #304]	@ (800376c <HAL_GPIO_Init+0x2b8>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6193      	str	r3, [r2, #24]
 8003640:	4b4a      	ldr	r3, [pc, #296]	@ (800376c <HAL_GPIO_Init+0x2b8>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800364c:	4a48      	ldr	r2, [pc, #288]	@ (8003770 <HAL_GPIO_Init+0x2bc>)
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	3302      	adds	r3, #2
 8003654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003658:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	220f      	movs	r2, #15
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4013      	ands	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a40      	ldr	r2, [pc, #256]	@ (8003774 <HAL_GPIO_Init+0x2c0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <HAL_GPIO_Init+0x1ec>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a3f      	ldr	r2, [pc, #252]	@ (8003778 <HAL_GPIO_Init+0x2c4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00d      	beq.n	800369c <HAL_GPIO_Init+0x1e8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a3e      	ldr	r2, [pc, #248]	@ (800377c <HAL_GPIO_Init+0x2c8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <HAL_GPIO_Init+0x1e4>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3d      	ldr	r2, [pc, #244]	@ (8003780 <HAL_GPIO_Init+0x2cc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d101      	bne.n	8003694 <HAL_GPIO_Init+0x1e0>
 8003690:	2303      	movs	r3, #3
 8003692:	e006      	b.n	80036a2 <HAL_GPIO_Init+0x1ee>
 8003694:	2304      	movs	r3, #4
 8003696:	e004      	b.n	80036a2 <HAL_GPIO_Init+0x1ee>
 8003698:	2302      	movs	r3, #2
 800369a:	e002      	b.n	80036a2 <HAL_GPIO_Init+0x1ee>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_GPIO_Init+0x1ee>
 80036a0:	2300      	movs	r3, #0
 80036a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a4:	f002 0203 	and.w	r2, r2, #3
 80036a8:	0092      	lsls	r2, r2, #2
 80036aa:	4093      	lsls	r3, r2
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036b2:	492f      	ldr	r1, [pc, #188]	@ (8003770 <HAL_GPIO_Init+0x2bc>)
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	3302      	adds	r3, #2
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d006      	beq.n	80036da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	492c      	ldr	r1, [pc, #176]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]
 80036d8:	e006      	b.n	80036e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036da:	4b2a      	ldr	r3, [pc, #168]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	4928      	ldr	r1, [pc, #160]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036f4:	4b23      	ldr	r3, [pc, #140]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	4922      	ldr	r1, [pc, #136]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60cb      	str	r3, [r1, #12]
 8003700:	e006      	b.n	8003710 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003702:	4b20      	ldr	r3, [pc, #128]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	43db      	mvns	r3, r3
 800370a:	491e      	ldr	r1, [pc, #120]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 800370c:	4013      	ands	r3, r2
 800370e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d006      	beq.n	800372a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800371c:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	4918      	ldr	r1, [pc, #96]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
 8003728:	e006      	b.n	8003738 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800372a:	4b16      	ldr	r3, [pc, #88]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	43db      	mvns	r3, r3
 8003732:	4914      	ldr	r1, [pc, #80]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 8003734:	4013      	ands	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d021      	beq.n	8003788 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003744:	4b0f      	ldr	r3, [pc, #60]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	490e      	ldr	r1, [pc, #56]	@ (8003784 <HAL_GPIO_Init+0x2d0>)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]
 8003750:	e021      	b.n	8003796 <HAL_GPIO_Init+0x2e2>
 8003752:	bf00      	nop
 8003754:	10320000 	.word	0x10320000
 8003758:	10310000 	.word	0x10310000
 800375c:	10220000 	.word	0x10220000
 8003760:	10210000 	.word	0x10210000
 8003764:	10120000 	.word	0x10120000
 8003768:	10110000 	.word	0x10110000
 800376c:	40021000 	.word	0x40021000
 8003770:	40010000 	.word	0x40010000
 8003774:	40010800 	.word	0x40010800
 8003778:	40010c00 	.word	0x40010c00
 800377c:	40011000 	.word	0x40011000
 8003780:	40011400 	.word	0x40011400
 8003784:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003788:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <HAL_GPIO_Init+0x304>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	43db      	mvns	r3, r3
 8003790:	4909      	ldr	r1, [pc, #36]	@ (80037b8 <HAL_GPIO_Init+0x304>)
 8003792:	4013      	ands	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	3301      	adds	r3, #1
 800379a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	fa22 f303 	lsr.w	r3, r2, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f47f ae8e 	bne.w	80034c8 <HAL_GPIO_Init+0x14>
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	372c      	adds	r7, #44	@ 0x2c
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr
 80037b8:	40010400 	.word	0x40010400

080037bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e001      	b.n	80037de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	807b      	strh	r3, [r7, #2]
 80037f6:	4613      	mov	r3, r2
 80037f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037fa:	787b      	ldrb	r3, [r7, #1]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003800:	887a      	ldrh	r2, [r7, #2]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003806:	e003      	b.n	8003810 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003808:	887b      	ldrh	r3, [r7, #2]
 800380a:	041a      	lsls	r2, r3, #16
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	611a      	str	r2, [r3, #16]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800382c:	887a      	ldrh	r2, [r7, #2]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4013      	ands	r3, r2
 8003832:	041a      	lsls	r2, r3, #16
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43d9      	mvns	r1, r3
 8003838:	887b      	ldrh	r3, [r7, #2]
 800383a:	400b      	ands	r3, r1
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	611a      	str	r2, [r3, #16]
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003856:	4b08      	ldr	r3, [pc, #32]	@ (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003862:	4a05      	ldr	r2, [pc, #20]	@ (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd ff2c 	bl	80016c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40010400 	.word	0x40010400

0800387c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e12b      	b.n	8003ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff f952 	bl	8002b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	@ 0x24
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e0:	f003 fa06 	bl	8006cf0 <HAL_RCC_GetPCLK1Freq>
 80038e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a81      	ldr	r2, [pc, #516]	@ (8003af0 <HAL_I2C_Init+0x274>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d807      	bhi.n	8003900 <HAL_I2C_Init+0x84>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a80      	ldr	r2, [pc, #512]	@ (8003af4 <HAL_I2C_Init+0x278>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bf94      	ite	ls
 80038f8:	2301      	movls	r3, #1
 80038fa:	2300      	movhi	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e006      	b.n	800390e <HAL_I2C_Init+0x92>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a7d      	ldr	r2, [pc, #500]	@ (8003af8 <HAL_I2C_Init+0x27c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	bf94      	ite	ls
 8003908:	2301      	movls	r3, #1
 800390a:	2300      	movhi	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0e7      	b.n	8003ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a78      	ldr	r2, [pc, #480]	@ (8003afc <HAL_I2C_Init+0x280>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0c9b      	lsrs	r3, r3, #18
 8003920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a6a      	ldr	r2, [pc, #424]	@ (8003af0 <HAL_I2C_Init+0x274>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d802      	bhi.n	8003950 <HAL_I2C_Init+0xd4>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3301      	adds	r3, #1
 800394e:	e009      	b.n	8003964 <HAL_I2C_Init+0xe8>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	4a69      	ldr	r2, [pc, #420]	@ (8003b00 <HAL_I2C_Init+0x284>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	099b      	lsrs	r3, r3, #6
 8003962:	3301      	adds	r3, #1
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003976:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	495c      	ldr	r1, [pc, #368]	@ (8003af0 <HAL_I2C_Init+0x274>)
 8003980:	428b      	cmp	r3, r1
 8003982:	d819      	bhi.n	80039b8 <HAL_I2C_Init+0x13c>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1e59      	subs	r1, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003992:	1c59      	adds	r1, r3, #1
 8003994:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003998:	400b      	ands	r3, r1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_I2C_Init+0x138>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1e59      	subs	r1, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b2:	e051      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 80039b4:	2304      	movs	r3, #4
 80039b6:	e04f      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <HAL_I2C_Init+0x168>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e58      	subs	r0, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	440b      	add	r3, r1
 80039ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e012      	b.n	8003a0a <HAL_I2C_Init+0x18e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1e58      	subs	r0, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	0099      	lsls	r1, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Init+0x196>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e022      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10e      	bne.n	8003a38 <HAL_I2C_Init+0x1bc>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e58      	subs	r0, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6859      	ldr	r1, [r3, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	440b      	add	r3, r1
 8003a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a36:	e00f      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e58      	subs	r0, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	0099      	lsls	r1, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	6809      	ldr	r1, [r1, #0]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6911      	ldr	r1, [r2, #16]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68d2      	ldr	r2, [r2, #12]
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	000186a0 	.word	0x000186a0
 8003af4:	001e847f 	.word	0x001e847f
 8003af8:	003d08ff 	.word	0x003d08ff
 8003afc:	431bde83 	.word	0x431bde83
 8003b00:	10624dd3 	.word	0x10624dd3

08003b04 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b16:	2b80      	cmp	r3, #128	@ 0x80
 8003b18:	d103      	bne.n	8003b22 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]
  }
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	461a      	mov	r2, r3
 8003b38:	460b      	mov	r3, r1
 8003b3a:	817b      	strh	r3, [r7, #10]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff faf6 	bl	8003130 <HAL_GetTick>
 8003b44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	f040 80e0 	bne.w	8003d14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2319      	movs	r3, #25
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	4970      	ldr	r1, [pc, #448]	@ (8003d20 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f002 fa7a 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e0d3      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_I2C_Master_Transmit+0x50>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0cc      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d007      	beq.n	8003ba2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2221      	movs	r2, #33	@ 0x21
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	893a      	ldrh	r2, [r7, #8]
 8003bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a50      	ldr	r2, [pc, #320]	@ (8003d24 <HAL_I2C_Master_Transmit+0x1f8>)
 8003be2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003be4:	8979      	ldrh	r1, [r7, #10]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f002 f83c 	bl	8005c68 <I2C_MasterRequestWrite>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e08d      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c10:	e066      	b.n	8003ce0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	6a39      	ldr	r1, [r7, #32]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f002 fb38 	bl	800628c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d107      	bne.n	8003c3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e06b      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d11b      	bne.n	8003cb4 <HAL_I2C_Master_Transmit+0x188>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d017      	beq.n	8003cb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6a39      	ldr	r1, [r7, #32]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f002 fb2f 	bl	800631c <I2C_WaitOnBTFFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d107      	bne.n	8003cdc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e01a      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d194      	bne.n	8003c12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e000      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	00100002 	.word	0x00100002
 8003d24:	ffff0000 	.word	0xffff0000

08003d28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08c      	sub	sp, #48	@ 0x30
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	461a      	mov	r2, r3
 8003d34:	460b      	mov	r3, r1
 8003d36:	817b      	strh	r3, [r7, #10]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d40:	f7ff f9f6 	bl	8003130 <HAL_GetTick>
 8003d44:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	f040 824b 	bne.w	80041ea <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2319      	movs	r3, #25
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	497f      	ldr	r1, [pc, #508]	@ (8003f5c <HAL_I2C_Master_Receive+0x234>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f002 f97a 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e23e      	b.n	80041ec <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2C_Master_Receive+0x54>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e237      	b.n	80041ec <HAL_I2C_Master_Receive+0x4c4>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d007      	beq.n	8003da2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003db0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2222      	movs	r2, #34	@ 0x22
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	893a      	ldrh	r2, [r7, #8]
 8003dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a5f      	ldr	r2, [pc, #380]	@ (8003f60 <HAL_I2C_Master_Receive+0x238>)
 8003de2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003de4:	8979      	ldrh	r1, [r7, #10]
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f001 ffbe 	bl	8005d6c <I2C_MasterRequestRead>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e1f8      	b.n	80041ec <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d113      	bne.n	8003e2a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e1cc      	b.n	80041c4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d11e      	bne.n	8003e70 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e42:	b672      	cpsid	i
}
 8003e44:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e6c:	b662      	cpsie	i
}
 8003e6e:	e035      	b.n	8003edc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d11e      	bne.n	8003eb6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e88:	b672      	cpsid	i
}
 8003e8a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003eb2:	b662      	cpsie	i
}
 8003eb4:	e012      	b.n	8003edc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003edc:	e172      	b.n	80041c4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	f200 811f 	bhi.w	8004126 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d123      	bne.n	8003f38 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f002 fa8b 	bl	8006410 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e173      	b.n	80041ec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f36:	e145      	b.n	80041c4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d152      	bne.n	8003fe6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	2200      	movs	r2, #0
 8003f48:	4906      	ldr	r1, [pc, #24]	@ (8003f64 <HAL_I2C_Master_Receive+0x23c>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f002 f884 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e148      	b.n	80041ec <HAL_I2C_Master_Receive+0x4c4>
 8003f5a:	bf00      	nop
 8003f5c:	00100002 	.word	0x00100002
 8003f60:	ffff0000 	.word	0xffff0000
 8003f64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f68:	b672      	cpsid	i
}
 8003f6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fae:	b662      	cpsie	i
}
 8003fb0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fe4:	e0ee      	b.n	80041c4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	2200      	movs	r2, #0
 8003fee:	4981      	ldr	r1, [pc, #516]	@ (80041f4 <HAL_I2C_Master_Receive+0x4cc>)
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f002 f831 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0f5      	b.n	80041ec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800400e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004010:	b672      	cpsid	i
}
 8004012:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004046:	4b6c      	ldr	r3, [pc, #432]	@ (80041f8 <HAL_I2C_Master_Receive+0x4d0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	08db      	lsrs	r3, r3, #3
 800404c:	4a6b      	ldr	r2, [pc, #428]	@ (80041fc <HAL_I2C_Master_Receive+0x4d4>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	0a1a      	lsrs	r2, r3, #8
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	00da      	lsls	r2, r3, #3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	3b01      	subs	r3, #1
 8004064:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d118      	bne.n	800409e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800408e:	b662      	cpsie	i
}
 8004090:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e0a6      	b.n	80041ec <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d1d9      	bne.n	8004060 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040ee:	b662      	cpsie	i
}
 80040f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004124:	e04e      	b.n	80041c4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004128:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f002 f970 	bl	8006410 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e058      	b.n	80041ec <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b04      	cmp	r3, #4
 8004178:	d124      	bne.n	80041c4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417e:	2b03      	cmp	r3, #3
 8004180:	d107      	bne.n	8004192 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004190:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f47f ae88 	bne.w	8003ede <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80041ea:	2302      	movs	r3, #2
  }
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3728      	adds	r7, #40	@ 0x28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	00010004 	.word	0x00010004
 80041f8:	20000024 	.word	0x20000024
 80041fc:	14f8b589 	.word	0x14f8b589

08004200 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	@ 0x28
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	460b      	mov	r3, r1
 800420e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004210:	f7fe ff8e 	bl	8003130 <HAL_GetTick>
 8004214:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	f040 8111 	bne.w	800444a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	2319      	movs	r3, #25
 800422e:	2201      	movs	r2, #1
 8004230:	4988      	ldr	r1, [pc, #544]	@ (8004454 <HAL_I2C_IsDeviceReady+0x254>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f001 ff10 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
 8004240:	e104      	b.n	800444c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_I2C_IsDeviceReady+0x50>
 800424c:	2302      	movs	r3, #2
 800424e:	e0fd      	b.n	800444c <HAL_I2C_IsDeviceReady+0x24c>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d007      	beq.n	8004276 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004284:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2224      	movs	r2, #36	@ 0x24
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a70      	ldr	r2, [pc, #448]	@ (8004458 <HAL_I2C_IsDeviceReady+0x258>)
 8004298:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f001 fece 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042d0:	d103      	bne.n	80042da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042d8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0b6      	b.n	800444c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80042ee:	f7fe ff1f 	bl	8003130 <HAL_GetTick>
 80042f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004318:	bf0c      	ite	eq
 800431a:	2301      	moveq	r3, #1
 800431c:	2300      	movne	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004322:	e025      	b.n	8004370 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004324:	f7fe ff04 	bl	8003130 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <HAL_I2C_IsDeviceReady+0x13a>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	22a0      	movs	r2, #160	@ 0xa0
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b02      	cmp	r3, #2
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2ba0      	cmp	r3, #160	@ 0xa0
 800437a:	d005      	beq.n	8004388 <HAL_I2C_IsDeviceReady+0x188>
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_I2C_IsDeviceReady+0x188>
 8004382:	7dbb      	ldrb	r3, [r7, #22]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0cd      	beq.n	8004324 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b02      	cmp	r3, #2
 800439c:	d129      	bne.n	80043f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	2319      	movs	r3, #25
 80043ca:	2201      	movs	r2, #1
 80043cc:	4921      	ldr	r1, [pc, #132]	@ (8004454 <HAL_I2C_IsDeviceReady+0x254>)
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f001 fe42 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e036      	b.n	800444c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e02c      	b.n	800444c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004400:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800440a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	2319      	movs	r3, #25
 8004412:	2201      	movs	r2, #1
 8004414:	490f      	ldr	r1, [pc, #60]	@ (8004454 <HAL_I2C_IsDeviceReady+0x254>)
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f001 fe1e 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e012      	b.n	800444c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	3301      	adds	r3, #1
 800442a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	f4ff af32 	bcc.w	800429a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800444a:	2302      	movs	r3, #2
  }
}
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	00100002 	.word	0x00100002
 8004458:	ffff0000 	.word	0xffff0000

0800445c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800447c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004484:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	2b10      	cmp	r3, #16
 800448a:	d003      	beq.n	8004494 <HAL_I2C_EV_IRQHandler+0x38>
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	f040 80c1 	bne.w	8004616 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10d      	bne.n	80044ca <HAL_I2C_EV_IRQHandler+0x6e>
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80044b4:	d003      	beq.n	80044be <HAL_I2C_EV_IRQHandler+0x62>
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80044bc:	d101      	bne.n	80044c2 <HAL_I2C_EV_IRQHandler+0x66>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_I2C_EV_IRQHandler+0x68>
 80044c2:	2300      	movs	r3, #0
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	f000 8132 	beq.w	800472e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00c      	beq.n	80044ee <HAL_I2C_EV_IRQHandler+0x92>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	0a5b      	lsrs	r3, r3, #9
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d006      	beq.n	80044ee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f002 f820 	bl	8006526 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fd99 	bl	800501e <I2C_Master_SB>
 80044ec:	e092      	b.n	8004614 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	08db      	lsrs	r3, r3, #3
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <HAL_I2C_EV_IRQHandler+0xb2>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	0a5b      	lsrs	r3, r3, #9
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fe0e 	bl	8005128 <I2C_Master_ADD10>
 800450c:	e082      	b.n	8004614 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_I2C_EV_IRQHandler+0xd2>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	0a5b      	lsrs	r3, r3, #9
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fe27 	bl	800517a <I2C_Master_ADDR>
 800452c:	e072      	b.n	8004614 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	089b      	lsrs	r3, r3, #2
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d03b      	beq.n	80045b2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004548:	f000 80f3 	beq.w	8004732 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	09db      	lsrs	r3, r3, #7
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00f      	beq.n	8004578 <HAL_I2C_EV_IRQHandler+0x11c>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	0a9b      	lsrs	r3, r3, #10
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <HAL_I2C_EV_IRQHandler+0x11c>
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	089b      	lsrs	r3, r3, #2
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d103      	bne.n	8004578 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f9f1 	bl	8004958 <I2C_MasterTransmit_TXE>
 8004576:	e04d      	b.n	8004614 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80d6 	beq.w	8004732 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	0a5b      	lsrs	r3, r3, #9
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80cf 	beq.w	8004732 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004594:	7bbb      	ldrb	r3, [r7, #14]
 8004596:	2b21      	cmp	r3, #33	@ 0x21
 8004598:	d103      	bne.n	80045a2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fa78 	bl	8004a90 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a0:	e0c7      	b.n	8004732 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b40      	cmp	r3, #64	@ 0x40
 80045a6:	f040 80c4 	bne.w	8004732 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fae6 	bl	8004b7c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045b0:	e0bf      	b.n	8004732 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c0:	f000 80b7 	beq.w	8004732 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00f      	beq.n	80045f0 <HAL_I2C_EV_IRQHandler+0x194>
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	0a9b      	lsrs	r3, r3, #10
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d009      	beq.n	80045f0 <HAL_I2C_EV_IRQHandler+0x194>
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d103      	bne.n	80045f0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fb5f 	bl	8004cac <I2C_MasterReceive_RXNE>
 80045ee:	e011      	b.n	8004614 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	089b      	lsrs	r3, r3, #2
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 809a 	beq.w	8004732 <HAL_I2C_EV_IRQHandler+0x2d6>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	0a5b      	lsrs	r3, r3, #9
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8093 	beq.w	8004732 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fc15 	bl	8004e3c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004612:	e08e      	b.n	8004732 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004614:	e08d      	b.n	8004732 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	e007      	b.n	8004638 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d012      	beq.n	800466a <HAL_I2C_EV_IRQHandler+0x20e>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	0a5b      	lsrs	r3, r3, #9
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00c      	beq.n	800466a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004660:	69b9      	ldr	r1, [r7, #24]
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 ffe0 	bl	8005628 <I2C_Slave_ADDR>
 8004668:	e066      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_I2C_EV_IRQHandler+0x22e>
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	0a5b      	lsrs	r3, r3, #9
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f001 f81a 	bl	80056bc <I2C_Slave_STOPF>
 8004688:	e056      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800468a:	7bbb      	ldrb	r3, [r7, #14]
 800468c:	2b21      	cmp	r3, #33	@ 0x21
 800468e:	d002      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x23a>
 8004690:	7bbb      	ldrb	r3, [r7, #14]
 8004692:	2b29      	cmp	r3, #41	@ 0x29
 8004694:	d125      	bne.n	80046e2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	09db      	lsrs	r3, r3, #7
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00f      	beq.n	80046c2 <HAL_I2C_EV_IRQHandler+0x266>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	0a9b      	lsrs	r3, r3, #10
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_I2C_EV_IRQHandler+0x266>
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fef8 	bl	80054b0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046c0:	e039      	b.n	8004736 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d033      	beq.n	8004736 <HAL_I2C_EV_IRQHandler+0x2da>
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	0a5b      	lsrs	r3, r3, #9
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d02d      	beq.n	8004736 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 ff25 	bl	800552a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046e0:	e029      	b.n	8004736 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	099b      	lsrs	r3, r3, #6
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00f      	beq.n	800470e <HAL_I2C_EV_IRQHandler+0x2b2>
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	0a9b      	lsrs	r3, r3, #10
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_I2C_EV_IRQHandler+0x2b2>
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d103      	bne.n	800470e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 ff2f 	bl	800556a <I2C_SlaveReceive_RXNE>
 800470c:	e014      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	089b      	lsrs	r3, r3, #2
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00e      	beq.n	8004738 <HAL_I2C_EV_IRQHandler+0x2dc>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	0a5b      	lsrs	r3, r3, #9
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 ff5d 	bl	80055e6 <I2C_SlaveReceive_BTF>
 800472c:	e004      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004736:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b08a      	sub	sp, #40	@ 0x28
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004756:	2300      	movs	r3, #0
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004760:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	0a1b      	lsrs	r3, r3, #8
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d016      	beq.n	800479c <HAL_I2C_ER_IRQHandler+0x5e>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d010      	beq.n	800479c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800478a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800479a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	0a5b      	lsrs	r3, r3, #9
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00e      	beq.n	80047c6 <HAL_I2C_ER_IRQHandler+0x88>
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80047c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	0a9b      	lsrs	r3, r3, #10
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d03f      	beq.n	8004852 <HAL_I2C_ER_IRQHandler+0x114>
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	0a1b      	lsrs	r3, r3, #8
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d039      	beq.n	8004852 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80047de:	7efb      	ldrb	r3, [r7, #27]
 80047e0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047f8:	7ebb      	ldrb	r3, [r7, #26]
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d112      	bne.n	8004824 <HAL_I2C_ER_IRQHandler+0xe6>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10f      	bne.n	8004824 <HAL_I2C_ER_IRQHandler+0xe6>
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	2b21      	cmp	r3, #33	@ 0x21
 8004808:	d008      	beq.n	800481c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b29      	cmp	r3, #41	@ 0x29
 800480e:	d005      	beq.n	800481c <HAL_I2C_ER_IRQHandler+0xde>
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	2b28      	cmp	r3, #40	@ 0x28
 8004814:	d106      	bne.n	8004824 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b21      	cmp	r3, #33	@ 0x21
 800481a:	d103      	bne.n	8004824 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f001 f87d 	bl	800591c <I2C_Slave_AF>
 8004822:	e016      	b.n	8004852 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800482c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004836:	7efb      	ldrb	r3, [r7, #27]
 8004838:	2b10      	cmp	r3, #16
 800483a:	d002      	beq.n	8004842 <HAL_I2C_ER_IRQHandler+0x104>
 800483c:	7efb      	ldrb	r3, [r7, #27]
 800483e:	2b40      	cmp	r3, #64	@ 0x40
 8004840:	d107      	bne.n	8004852 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004850:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	0adb      	lsrs	r3, r3, #11
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00e      	beq.n	800487c <HAL_I2C_ER_IRQHandler+0x13e>
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	0a1b      	lsrs	r3, r3, #8
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	f043 0308 	orr.w	r3, r3, #8
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800487a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d008      	beq.n	8004894 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f001 f8b8 	bl	8005a04 <I2C_ITError>
  }
}
 8004894:	bf00      	nop
 8004896:	3728      	adds	r7, #40	@ 0x28
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	70fb      	strb	r3, [r7, #3]
 80048f0:	4613      	mov	r3, r2
 80048f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr

080048fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr

08004910 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr

08004922 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr

08004934 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr

08004946 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004966:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800496e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497a:	2b00      	cmp	r3, #0
 800497c:	d150      	bne.n	8004a20 <I2C_MasterTransmit_TXE+0xc8>
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	2b21      	cmp	r3, #33	@ 0x21
 8004982:	d14d      	bne.n	8004a20 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b08      	cmp	r3, #8
 8004988:	d01d      	beq.n	80049c6 <I2C_MasterTransmit_TXE+0x6e>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b20      	cmp	r3, #32
 800498e:	d01a      	beq.n	80049c6 <I2C_MasterTransmit_TXE+0x6e>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004996:	d016      	beq.n	80049c6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049a6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2211      	movs	r2, #17
 80049ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ff6c 	bl	800489c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049c4:	e060      	b.n	8004a88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049d4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b40      	cmp	r3, #64	@ 0x40
 80049fe:	d107      	bne.n	8004a10 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff ff81 	bl	8004910 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a0e:	e03b      	b.n	8004a88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ff3f 	bl	800489c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a1e:	e033      	b.n	8004a88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b21      	cmp	r3, #33	@ 0x21
 8004a24:	d005      	beq.n	8004a32 <I2C_MasterTransmit_TXE+0xda>
 8004a26:	7bbb      	ldrb	r3, [r7, #14]
 8004a28:	2b40      	cmp	r3, #64	@ 0x40
 8004a2a:	d12d      	bne.n	8004a88 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b22      	cmp	r3, #34	@ 0x22
 8004a30:	d12a      	bne.n	8004a88 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d108      	bne.n	8004a4e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a4a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a4c:	e01c      	b.n	8004a88 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b40      	cmp	r3, #64	@ 0x40
 8004a58:	d103      	bne.n	8004a62 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f88e 	bl	8004b7c <I2C_MemoryTransmit_TXE_BTF>
}
 8004a60:	e012      	b.n	8004a88 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a86:	e7ff      	b.n	8004a88 <I2C_MasterTransmit_TXE+0x130>
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b21      	cmp	r3, #33	@ 0x21
 8004aa8:	d164      	bne.n	8004b74 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d012      	beq.n	8004ada <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004ad8:	e04c      	b.n	8004b74 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d01d      	beq.n	8004b1c <I2C_MasterTransmit_BTF+0x8c>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d01a      	beq.n	8004b1c <I2C_MasterTransmit_BTF+0x8c>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004aec:	d016      	beq.n	8004b1c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004afc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2211      	movs	r2, #17
 8004b02:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff fec1 	bl	800489c <HAL_I2C_MasterTxCpltCallback>
}
 8004b1a:	e02b      	b.n	8004b74 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b2a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b3a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b40      	cmp	r3, #64	@ 0x40
 8004b54:	d107      	bne.n	8004b66 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fed6 	bl	8004910 <HAL_I2C_MemTxCpltCallback>
}
 8004b64:	e006      	b.n	8004b74 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fe94 	bl	800489c <HAL_I2C_MasterTxCpltCallback>
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d11d      	bne.n	8004bd0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10b      	bne.n	8004bb4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004bb2:	e077      	b.n	8004ca4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	121b      	asrs	r3, r3, #8
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bce:	e069      	b.n	8004ca4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d10b      	bne.n	8004bf0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bee:	e059      	b.n	8004ca4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d152      	bne.n	8004c9e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b22      	cmp	r3, #34	@ 0x22
 8004bfc:	d10d      	bne.n	8004c1a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c0c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c18:	e044      	b.n	8004ca4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d015      	beq.n	8004c50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b21      	cmp	r3, #33	@ 0x21
 8004c28:	d112      	bne.n	8004c50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	781a      	ldrb	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c4e:	e029      	b.n	8004ca4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d124      	bne.n	8004ca4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	2b21      	cmp	r3, #33	@ 0x21
 8004c5e:	d121      	bne.n	8004ca4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c6e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff fe3a 	bl	8004910 <HAL_I2C_MemTxCpltCallback>
}
 8004c9c:	e002      	b.n	8004ca4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fe ff30 	bl	8003b04 <I2C_Flush_DR>
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b22      	cmp	r3, #34	@ 0x22
 8004cbe:	f040 80b9 	bne.w	8004e34 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d921      	bls.n	8004d1a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	f040 8096 	bne.w	8004e34 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d16:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004d18:	e08c      	b.n	8004e34 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d07f      	beq.n	8004e22 <I2C_MasterReceive_RXNE+0x176>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d002      	beq.n	8004d2e <I2C_MasterReceive_RXNE+0x82>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d179      	bne.n	8004e22 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f001 fb3c 	bl	80063ac <I2C_WaitOnSTOPRequestThroughIT>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d14c      	bne.n	8004dd4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d48:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d58:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	d10a      	bne.n	8004daa <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fdbd 	bl	8004922 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004da8:	e044      	b.n	8004e34 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d002      	beq.n	8004dbe <I2C_MasterReceive_RXNE+0x112>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d103      	bne.n	8004dc6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dc4:	e002      	b.n	8004dcc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2212      	movs	r2, #18
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff fd6e 	bl	80048ae <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dd2:	e02f      	b.n	8004e34 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004de2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fd8a 	bl	8004934 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e20:	e008      	b.n	8004e34 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e30:	605a      	str	r2, [r3, #4]
}
 8004e32:	e7ff      	b.n	8004e34 <I2C_MasterReceive_RXNE+0x188>
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d11b      	bne.n	8004e8c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e62:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e8a:	e0c4      	b.n	8005016 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d129      	bne.n	8004eea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d00a      	beq.n	8004ec2 <I2C_MasterReceive_BTF+0x86>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d007      	beq.n	8004ec2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004ee8:	e095      	b.n	8005016 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d17d      	bne.n	8004ff0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d002      	beq.n	8004f00 <I2C_MasterReceive_BTF+0xc4>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d108      	bne.n	8004f12 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e016      	b.n	8004f40 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d002      	beq.n	8004f1e <I2C_MasterReceive_BTF+0xe2>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d108      	bne.n	8004f30 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e007      	b.n	8004f40 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f9a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b40      	cmp	r3, #64	@ 0x40
 8004fae:	d10a      	bne.n	8004fc6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff fcaf 	bl	8004922 <HAL_I2C_MemRxCpltCallback>
}
 8004fc4:	e027      	b.n	8005016 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d002      	beq.n	8004fda <I2C_MasterReceive_BTF+0x19e>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d103      	bne.n	8004fe2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fe0:	e002      	b.n	8004fe8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2212      	movs	r2, #18
 8004fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fc60 	bl	80048ae <HAL_I2C_MasterRxCpltCallback>
}
 8004fee:	e012      	b.n	8005016 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b40      	cmp	r3, #64	@ 0x40
 8005030:	d117      	bne.n	8005062 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503e:	b2db      	uxtb	r3, r3
 8005040:	461a      	mov	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800504a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800504c:	e067      	b.n	800511e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	b2da      	uxtb	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	611a      	str	r2, [r3, #16]
}
 8005060:	e05d      	b.n	800511e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800506a:	d133      	bne.n	80050d4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b21      	cmp	r3, #33	@ 0x21
 8005076:	d109      	bne.n	800508c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005088:	611a      	str	r2, [r3, #16]
 800508a:	e008      	b.n	800509e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	b2da      	uxtb	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <I2C_Master_SB+0x92>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d108      	bne.n	80050c2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d032      	beq.n	800511e <I2C_Master_SB+0x100>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02d      	beq.n	800511e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050d0:	605a      	str	r2, [r3, #4]
}
 80050d2:	e024      	b.n	800511e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10e      	bne.n	80050fa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	11db      	asrs	r3, r3, #7
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	f003 0306 	and.w	r3, r3, #6
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f063 030f 	orn	r3, r3, #15
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	611a      	str	r2, [r3, #16]
}
 80050f8:	e011      	b.n	800511e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d10d      	bne.n	800511e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005106:	b29b      	uxth	r3, r3
 8005108:	11db      	asrs	r3, r3, #7
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f003 0306 	and.w	r3, r3, #6
 8005110:	b2db      	uxtb	r3, r3
 8005112:	f063 030e 	orn	r3, r3, #14
 8005116:	b2da      	uxtb	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	611a      	str	r2, [r3, #16]
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005134:	b2da      	uxtb	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <I2C_Master_ADD10+0x26>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514a:	2b00      	cmp	r3, #0
 800514c:	d108      	bne.n	8005160 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00c      	beq.n	8005170 <I2C_Master_ADD10+0x48>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800516e:	605a      	str	r2, [r3, #4]
  }
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800517a:	b480      	push	{r7}
 800517c:	b091      	sub	sp, #68	@ 0x44
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005188:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005190:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005196:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b22      	cmp	r3, #34	@ 0x22
 80051a2:	f040 8174 	bne.w	800548e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10f      	bne.n	80051ce <I2C_Master_ADDR+0x54>
 80051ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80051b2:	2b40      	cmp	r3, #64	@ 0x40
 80051b4:	d10b      	bne.n	80051ce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b6:	2300      	movs	r3, #0
 80051b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	e16b      	b.n	80054a6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d11d      	bne.n	8005212 <I2C_Master_ADDR+0x98>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80051de:	d118      	bne.n	8005212 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e0:	2300      	movs	r3, #0
 80051e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005204:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005210:	e149      	b.n	80054a6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d113      	bne.n	8005244 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521c:	2300      	movs	r3, #0
 800521e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005230:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e120      	b.n	8005486 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b01      	cmp	r3, #1
 800524c:	f040 808a 	bne.w	8005364 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005252:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005256:	d137      	bne.n	80052c8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005266:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005276:	d113      	bne.n	80052a0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005286:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005288:	2300      	movs	r3, #0
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	e0f2      	b.n	8005486 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a0:	2300      	movs	r3, #0
 80052a2:	623b      	str	r3, [r7, #32]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	623b      	str	r3, [r7, #32]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	623b      	str	r3, [r7, #32]
 80052b4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e0de      	b.n	8005486 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d02e      	beq.n	800532c <I2C_Master_ADDR+0x1b2>
 80052ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d02b      	beq.n	800532c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d6:	2b12      	cmp	r3, #18
 80052d8:	d102      	bne.n	80052e0 <I2C_Master_ADDR+0x166>
 80052da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d125      	bne.n	800532c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d00e      	beq.n	8005304 <I2C_Master_ADDR+0x18a>
 80052e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d00b      	beq.n	8005304 <I2C_Master_ADDR+0x18a>
 80052ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ee:	2b10      	cmp	r3, #16
 80052f0:	d008      	beq.n	8005304 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e007      	b.n	8005314 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005312:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	e0ac      	b.n	8005486 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800533a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533c:	2300      	movs	r3, #0
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	61bb      	str	r3, [r7, #24]
 8005350:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e090      	b.n	8005486 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d158      	bne.n	8005420 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800536e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005370:	2b04      	cmp	r3, #4
 8005372:	d021      	beq.n	80053b8 <I2C_Master_ADDR+0x23e>
 8005374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005376:	2b02      	cmp	r3, #2
 8005378:	d01e      	beq.n	80053b8 <I2C_Master_ADDR+0x23e>
 800537a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537c:	2b10      	cmp	r3, #16
 800537e:	d01b      	beq.n	80053b8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800538e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	e012      	b.n	80053de <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053ec:	d14b      	bne.n	8005486 <I2C_Master_ADDR+0x30c>
 80053ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053f4:	d00b      	beq.n	800540e <I2C_Master_ADDR+0x294>
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d008      	beq.n	800540e <I2C_Master_ADDR+0x294>
 80053fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d005      	beq.n	800540e <I2C_Master_ADDR+0x294>
 8005402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005404:	2b10      	cmp	r3, #16
 8005406:	d002      	beq.n	800540e <I2C_Master_ADDR+0x294>
 8005408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540a:	2b20      	cmp	r3, #32
 800540c:	d13b      	bne.n	8005486 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	e032      	b.n	8005486 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800542e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800543a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800543e:	d117      	bne.n	8005470 <I2C_Master_ADDR+0x2f6>
 8005440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005442:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005446:	d00b      	beq.n	8005460 <I2C_Master_ADDR+0x2e6>
 8005448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544a:	2b01      	cmp	r3, #1
 800544c:	d008      	beq.n	8005460 <I2C_Master_ADDR+0x2e6>
 800544e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005450:	2b08      	cmp	r3, #8
 8005452:	d005      	beq.n	8005460 <I2C_Master_ADDR+0x2e6>
 8005454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005456:	2b10      	cmp	r3, #16
 8005458:	d002      	beq.n	8005460 <I2C_Master_ADDR+0x2e6>
 800545a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545c:	2b20      	cmp	r3, #32
 800545e:	d107      	bne.n	8005470 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800546e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800548c:	e00b      	b.n	80054a6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	68bb      	ldr	r3, [r7, #8]
}
 80054a4:	e7ff      	b.n	80054a6 <I2C_Master_ADDR+0x32c>
 80054a6:	bf00      	nop
 80054a8:	3744      	adds	r7, #68	@ 0x44
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr

080054b0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d02b      	beq.n	8005522 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	781a      	ldrb	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d114      	bne.n	8005522 <I2C_SlaveTransmit_TXE+0x72>
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	2b29      	cmp	r3, #41	@ 0x29
 80054fc:	d111      	bne.n	8005522 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800550c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2221      	movs	r2, #33	@ 0x21
 8005512:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2228      	movs	r2, #40	@ 0x28
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff f9cf 	bl	80048c0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d011      	beq.n	8005560 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	781a      	ldrb	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr

0800556a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005578:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02c      	beq.n	80055de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d114      	bne.n	80055de <I2C_SlaveReceive_RXNE+0x74>
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80055b8:	d111      	bne.n	80055de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2222      	movs	r2, #34	@ 0x22
 80055ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2228      	movs	r2, #40	@ 0x28
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff f97a 	bl	80048d2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d012      	beq.n	800561e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005642:	2b28      	cmp	r3, #40	@ 0x28
 8005644:	d127      	bne.n	8005696 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005654:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	089b      	lsrs	r3, r3, #2
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005662:	2301      	movs	r3, #1
 8005664:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	09db      	lsrs	r3, r3, #7
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d103      	bne.n	800567a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	81bb      	strh	r3, [r7, #12]
 8005678:	e002      	b.n	8005680 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005688:	89ba      	ldrh	r2, [r7, #12]
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff f928 	bl	80048e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005694:	e00e      	b.n	80056b4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005696:	2300      	movs	r3, #0
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80056b4:	bf00      	nop
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056dc:	2300      	movs	r3, #0
 80056de:	60bb      	str	r3, [r7, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	60bb      	str	r3, [r7, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005708:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005718:	d172      	bne.n	8005800 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	2b22      	cmp	r3, #34	@ 0x22
 800571e:	d002      	beq.n	8005726 <I2C_Slave_STOPF+0x6a>
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b2a      	cmp	r3, #42	@ 0x2a
 8005724:	d135      	bne.n	8005792 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	b29a      	uxth	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d005      	beq.n	800574a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	f043 0204 	orr.w	r2, r3, #4
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005758:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575e:	4618      	mov	r0, r3
 8005760:	f7fd fe9a 	bl	8003498 <HAL_DMA_GetState>
 8005764:	4603      	mov	r3, r0
 8005766:	2b01      	cmp	r3, #1
 8005768:	d049      	beq.n	80057fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576e:	4a69      	ldr	r2, [pc, #420]	@ (8005914 <I2C_Slave_STOPF+0x258>)
 8005770:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005776:	4618      	mov	r0, r3
 8005778:	f7fd fe16 	bl	80033a8 <HAL_DMA_Abort_IT>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d03d      	beq.n	80057fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800578c:	4610      	mov	r0, r2
 800578e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005790:	e035      	b.n	80057fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	b29a      	uxth	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	f043 0204 	orr.w	r2, r3, #4
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fd fe64 	bl	8003498 <HAL_DMA_GetState>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d014      	beq.n	8005800 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057da:	4a4e      	ldr	r2, [pc, #312]	@ (8005914 <I2C_Slave_STOPF+0x258>)
 80057dc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fd fde0 	bl	80033a8 <HAL_DMA_Abort_IT>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057f8:	4610      	mov	r0, r2
 80057fa:	4798      	blx	r3
 80057fc:	e000      	b.n	8005800 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d03e      	beq.n	8005888 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b04      	cmp	r3, #4
 8005816:	d112      	bne.n	800583e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	2b40      	cmp	r3, #64	@ 0x40
 800584a:	d112      	bne.n	8005872 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005880:	f043 0204 	orr.w	r2, r3, #4
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f8b7 	bl	8005a04 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005896:	e039      	b.n	800590c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	2b2a      	cmp	r3, #42	@ 0x2a
 800589c:	d109      	bne.n	80058b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2228      	movs	r2, #40	@ 0x28
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff f810 	bl	80048d2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b28      	cmp	r3, #40	@ 0x28
 80058bc:	d111      	bne.n	80058e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a15      	ldr	r2, [pc, #84]	@ (8005918 <I2C_Slave_STOPF+0x25c>)
 80058c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff f80f 	bl	80048fe <HAL_I2C_ListenCpltCallback>
}
 80058e0:	e014      	b.n	800590c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e6:	2b22      	cmp	r3, #34	@ 0x22
 80058e8:	d002      	beq.n	80058f0 <I2C_Slave_STOPF+0x234>
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	2b22      	cmp	r3, #34	@ 0x22
 80058ee:	d10d      	bne.n	800590c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fe ffe3 	bl	80048d2 <HAL_I2C_SlaveRxCpltCallback>
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	08005f09 	.word	0x08005f09
 8005918:	ffff0000 	.word	0xffff0000

0800591c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800592a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005930:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d002      	beq.n	800593e <I2C_Slave_AF+0x22>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b20      	cmp	r3, #32
 800593c:	d129      	bne.n	8005992 <I2C_Slave_AF+0x76>
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b28      	cmp	r3, #40	@ 0x28
 8005942:	d126      	bne.n	8005992 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a2e      	ldr	r2, [pc, #184]	@ (8005a00 <I2C_Slave_AF+0xe4>)
 8005948:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005958:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005962:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005972:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fe ffb7 	bl	80048fe <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005990:	e031      	b.n	80059f6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005992:	7bfb      	ldrb	r3, [r7, #15]
 8005994:	2b21      	cmp	r3, #33	@ 0x21
 8005996:	d129      	bne.n	80059ec <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a19      	ldr	r2, [pc, #100]	@ (8005a00 <I2C_Slave_AF+0xe4>)
 800599c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2221      	movs	r2, #33	@ 0x21
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059dc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fe f890 	bl	8003b04 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fe ff6b 	bl	80048c0 <HAL_I2C_SlaveTxCpltCallback>
}
 80059ea:	e004      	b.n	80059f6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059f4:	615a      	str	r2, [r3, #20]
}
 80059f6:	bf00      	nop
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	ffff0000 	.word	0xffff0000

08005a04 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a1c:	7bbb      	ldrb	r3, [r7, #14]
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d002      	beq.n	8005a28 <I2C_ITError+0x24>
 8005a22:	7bbb      	ldrb	r3, [r7, #14]
 8005a24:	2b40      	cmp	r3, #64	@ 0x40
 8005a26:	d10a      	bne.n	8005a3e <I2C_ITError+0x3a>
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	2b22      	cmp	r3, #34	@ 0x22
 8005a2c:	d107      	bne.n	8005a3e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a3c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a44:	2b28      	cmp	r3, #40	@ 0x28
 8005a46:	d107      	bne.n	8005a58 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2228      	movs	r2, #40	@ 0x28
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005a56:	e015      	b.n	8005a84 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a66:	d00a      	beq.n	8005a7e <I2C_ITError+0x7a>
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	2b60      	cmp	r3, #96	@ 0x60
 8005a6c:	d007      	beq.n	8005a7e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a92:	d162      	bne.n	8005b5a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005aa2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d020      	beq.n	8005af4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab6:	4a6a      	ldr	r2, [pc, #424]	@ (8005c60 <I2C_ITError+0x25c>)
 8005ab8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fd fc72 	bl	80033a8 <HAL_DMA_Abort_IT>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 8089 	beq.w	8005bde <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0201 	bic.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005aee:	4610      	mov	r0, r2
 8005af0:	4798      	blx	r3
 8005af2:	e074      	b.n	8005bde <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af8:	4a59      	ldr	r2, [pc, #356]	@ (8005c60 <I2C_ITError+0x25c>)
 8005afa:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fd fc51 	bl	80033a8 <HAL_DMA_Abort_IT>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d068      	beq.n	8005bde <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b16:	2b40      	cmp	r3, #64	@ 0x40
 8005b18:	d10b      	bne.n	8005b32 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0201 	bic.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b54:	4610      	mov	r0, r2
 8005b56:	4798      	blx	r3
 8005b58:	e041      	b.n	8005bde <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b60      	cmp	r3, #96	@ 0x60
 8005b64:	d125      	bne.n	8005bb2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b7e:	2b40      	cmp	r3, #64	@ 0x40
 8005b80:	d10b      	bne.n	8005b9a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fe fecb 	bl	8004946 <HAL_I2C_AbortCpltCallback>
 8005bb0:	e015      	b.n	8005bde <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbc:	2b40      	cmp	r3, #64	@ 0x40
 8005bbe:	d10b      	bne.n	8005bd8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fe feab 	bl	8004934 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10e      	bne.n	8005c0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d109      	bne.n	8005c0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d104      	bne.n	8005c0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c1a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c22:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d113      	bne.n	8005c58 <I2C_ITError+0x254>
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b28      	cmp	r3, #40	@ 0x28
 8005c34:	d110      	bne.n	8005c58 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a0a      	ldr	r2, [pc, #40]	@ (8005c64 <I2C_ITError+0x260>)
 8005c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fe fe53 	bl	80048fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	08005f09 	.word	0x08005f09
 8005c64:	ffff0000 	.word	0xffff0000

08005c68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	607a      	str	r2, [r7, #4]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	460b      	mov	r3, r1
 8005c76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d006      	beq.n	8005c92 <I2C_MasterRequestWrite+0x2a>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d003      	beq.n	8005c92 <I2C_MasterRequestWrite+0x2a>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c90:	d108      	bne.n	8005ca4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	e00b      	b.n	8005cbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca8:	2b12      	cmp	r3, #18
 8005caa:	d107      	bne.n	8005cbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f9c5 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00d      	beq.n	8005cf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ce2:	d103      	bne.n	8005cec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e035      	b.n	8005d5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cf8:	d108      	bne.n	8005d0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cfa:	897b      	ldrh	r3, [r7, #10]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d08:	611a      	str	r2, [r3, #16]
 8005d0a:	e01b      	b.n	8005d44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d0c:	897b      	ldrh	r3, [r7, #10]
 8005d0e:	11db      	asrs	r3, r3, #7
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f003 0306 	and.w	r3, r3, #6
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f063 030f 	orn	r3, r3, #15
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	490e      	ldr	r1, [pc, #56]	@ (8005d64 <I2C_MasterRequestWrite+0xfc>)
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fa0e 	bl	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e010      	b.n	8005d5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d3a:	897b      	ldrh	r3, [r7, #10]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	4907      	ldr	r1, [pc, #28]	@ (8005d68 <I2C_MasterRequestWrite+0x100>)
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f9fe 	bl	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	00010008 	.word	0x00010008
 8005d68:	00010002 	.word	0x00010002

08005d6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d006      	beq.n	8005da6 <I2C_MasterRequestRead+0x3a>
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d003      	beq.n	8005da6 <I2C_MasterRequestRead+0x3a>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005da4:	d108      	bne.n	8005db8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	e00b      	b.n	8005dd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dbc:	2b11      	cmp	r3, #17
 8005dbe:	d107      	bne.n	8005dd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f93b 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00d      	beq.n	8005e04 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005df6:	d103      	bne.n	8005e00 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e079      	b.n	8005ef8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e0c:	d108      	bne.n	8005e20 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e0e:	897b      	ldrh	r3, [r7, #10]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	611a      	str	r2, [r3, #16]
 8005e1e:	e05f      	b.n	8005ee0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e20:	897b      	ldrh	r3, [r7, #10]
 8005e22:	11db      	asrs	r3, r3, #7
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f003 0306 	and.w	r3, r3, #6
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f063 030f 	orn	r3, r3, #15
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	4930      	ldr	r1, [pc, #192]	@ (8005f00 <I2C_MasterRequestRead+0x194>)
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f984 	bl	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e054      	b.n	8005ef8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e4e:	897b      	ldrh	r3, [r7, #10]
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	4929      	ldr	r1, [pc, #164]	@ (8005f04 <I2C_MasterRequestRead+0x198>)
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f974 	bl	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e044      	b.n	8005ef8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e92:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f8d9 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00d      	beq.n	8005ec8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eba:	d103      	bne.n	8005ec4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ec2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e017      	b.n	8005ef8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005ec8:	897b      	ldrh	r3, [r7, #10]
 8005eca:	11db      	asrs	r3, r3, #7
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 0306 	and.w	r3, r3, #6
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	f063 030e 	orn	r3, r3, #14
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	4907      	ldr	r1, [pc, #28]	@ (8005f04 <I2C_MasterRequestRead+0x198>)
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 f930 	bl	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	00010008 	.word	0x00010008
 8005f04:	00010002 	.word	0x00010002

08005f08 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f20:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f22:	4b4b      	ldr	r3, [pc, #300]	@ (8006050 <I2C_DMAAbort+0x148>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	08db      	lsrs	r3, r3, #3
 8005f28:	4a4a      	ldr	r2, [pc, #296]	@ (8006054 <I2C_DMAAbort+0x14c>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	0a1a      	lsrs	r2, r3, #8
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	00da      	lsls	r2, r3, #3
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	f043 0220 	orr.w	r2, r3, #32
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005f4e:	e00a      	b.n	8005f66 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f64:	d0ea      	beq.n	8005f3c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f72:	2200      	movs	r2, #0
 8005f74:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f82:	2200      	movs	r2, #0
 8005f84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f94:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa8:	2200      	movs	r2, #0
 8005faa:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb8:	2200      	movs	r2, #0
 8005fba:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b60      	cmp	r3, #96	@ 0x60
 8005fd6:	d10e      	bne.n	8005ff6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2200      	movs	r2, #0
 8005fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fee:	6978      	ldr	r0, [r7, #20]
 8005ff0:	f7fe fca9 	bl	8004946 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ff4:	e027      	b.n	8006046 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ff6:	7cfb      	ldrb	r3, [r7, #19]
 8005ff8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ffc:	2b28      	cmp	r3, #40	@ 0x28
 8005ffe:	d117      	bne.n	8006030 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800601e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2200      	movs	r2, #0
 8006024:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2228      	movs	r2, #40	@ 0x28
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800602e:	e007      	b.n	8006040 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006040:	6978      	ldr	r0, [r7, #20]
 8006042:	f7fe fc77 	bl	8004934 <HAL_I2C_ErrorCallback>
}
 8006046:	bf00      	nop
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000024 	.word	0x20000024
 8006054:	14f8b589 	.word	0x14f8b589

08006058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006068:	e048      	b.n	80060fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006070:	d044      	beq.n	80060fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006072:	f7fd f85d 	bl	8003130 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d302      	bcc.n	8006088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d139      	bne.n	80060fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	0c1b      	lsrs	r3, r3, #16
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b01      	cmp	r3, #1
 8006090:	d10d      	bne.n	80060ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	43da      	mvns	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4013      	ands	r3, r2
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf0c      	ite	eq
 80060a4:	2301      	moveq	r3, #1
 80060a6:	2300      	movne	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	e00c      	b.n	80060c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	43da      	mvns	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	4013      	ands	r3, r2
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bf0c      	ite	eq
 80060c0:	2301      	moveq	r3, #1
 80060c2:	2300      	movne	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d116      	bne.n	80060fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e8:	f043 0220 	orr.w	r2, r3, #32
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e023      	b.n	8006144 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	0c1b      	lsrs	r3, r3, #16
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b01      	cmp	r3, #1
 8006104:	d10d      	bne.n	8006122 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	43da      	mvns	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	4013      	ands	r3, r2
 8006112:	b29b      	uxth	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	bf0c      	ite	eq
 8006118:	2301      	moveq	r3, #1
 800611a:	2300      	movne	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	e00c      	b.n	800613c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	43da      	mvns	r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4013      	ands	r3, r2
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	429a      	cmp	r2, r3
 8006140:	d093      	beq.n	800606a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800615a:	e071      	b.n	8006240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800616a:	d123      	bne.n	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800617a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006184:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a0:	f043 0204 	orr.w	r2, r3, #4
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e067      	b.n	8006284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061ba:	d041      	beq.n	8006240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061bc:	f7fc ffb8 	bl	8003130 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d302      	bcc.n	80061d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d136      	bne.n	8006240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d10c      	bne.n	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	43da      	mvns	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4013      	ands	r3, r2
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	bf14      	ite	ne
 80061ee:	2301      	movne	r3, #1
 80061f0:	2300      	moveq	r3, #0
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	e00b      	b.n	800620e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	43da      	mvns	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4013      	ands	r3, r2
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	bf14      	ite	ne
 8006208:	2301      	movne	r3, #1
 800620a:	2300      	moveq	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d016      	beq.n	8006240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622c:	f043 0220 	orr.w	r2, r3, #32
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e021      	b.n	8006284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	0c1b      	lsrs	r3, r3, #16
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b01      	cmp	r3, #1
 8006248:	d10c      	bne.n	8006264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	43da      	mvns	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4013      	ands	r3, r2
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	bf14      	ite	ne
 800625c:	2301      	movne	r3, #1
 800625e:	2300      	moveq	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	e00b      	b.n	800627c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	43da      	mvns	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4013      	ands	r3, r2
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	bf14      	ite	ne
 8006276:	2301      	movne	r3, #1
 8006278:	2300      	moveq	r3, #0
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	f47f af6d 	bne.w	800615c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006298:	e034      	b.n	8006304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f915 	bl	80064ca <I2C_IsAcknowledgeFailed>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e034      	b.n	8006314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062b0:	d028      	beq.n	8006304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b2:	f7fc ff3d 	bl	8003130 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d302      	bcc.n	80062c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11d      	bne.n	8006304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d2:	2b80      	cmp	r3, #128	@ 0x80
 80062d4:	d016      	beq.n	8006304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	f043 0220 	orr.w	r2, r3, #32
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e007      	b.n	8006314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630e:	2b80      	cmp	r3, #128	@ 0x80
 8006310:	d1c3      	bne.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006328:	e034      	b.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f8cd 	bl	80064ca <I2C_IsAcknowledgeFailed>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e034      	b.n	80063a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006340:	d028      	beq.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fc fef5 	bl	8003130 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d11d      	bne.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b04      	cmp	r3, #4
 8006364:	d016      	beq.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2220      	movs	r2, #32
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e007      	b.n	80063a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d1c3      	bne.n	800632a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80063b8:	4b13      	ldr	r3, [pc, #76]	@ (8006408 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	08db      	lsrs	r3, r3, #3
 80063be:	4a13      	ldr	r2, [pc, #76]	@ (800640c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80063c0:	fba2 2303 	umull	r2, r3, r2, r3
 80063c4:	0a1a      	lsrs	r2, r3, #8
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d107      	bne.n	80063ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063de:	f043 0220 	orr.w	r2, r3, #32
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e008      	b.n	80063fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063f8:	d0e9      	beq.n	80063ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20000024 	.word	0x20000024
 800640c:	14f8b589 	.word	0x14f8b589

08006410 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800641c:	e049      	b.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b10      	cmp	r3, #16
 800642a:	d119      	bne.n	8006460 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f06f 0210 	mvn.w	r2, #16
 8006434:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e030      	b.n	80064c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006460:	f7fc fe66 	bl	8003130 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	429a      	cmp	r2, r3
 800646e:	d302      	bcc.n	8006476 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d11d      	bne.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006480:	2b40      	cmp	r3, #64	@ 0x40
 8006482:	d016      	beq.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649e:	f043 0220 	orr.w	r2, r3, #32
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e007      	b.n	80064c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064bc:	2b40      	cmp	r3, #64	@ 0x40
 80064be:	d1ae      	bne.n	800641e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e0:	d11b      	bne.n	800651a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006506:	f043 0204 	orr.w	r2, r3, #4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr

08006526 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006532:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006536:	d103      	bne.n	8006540 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800653e:	e007      	b.n	8006550 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006544:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006548:	d102      	bne.n	8006550 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2208      	movs	r2, #8
 800654e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr
	...

0800655c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e272      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 8087 	beq.w	800668a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800657c:	4b92      	ldr	r3, [pc, #584]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f003 030c 	and.w	r3, r3, #12
 8006584:	2b04      	cmp	r3, #4
 8006586:	d00c      	beq.n	80065a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006588:	4b8f      	ldr	r3, [pc, #572]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f003 030c 	and.w	r3, r3, #12
 8006590:	2b08      	cmp	r3, #8
 8006592:	d112      	bne.n	80065ba <HAL_RCC_OscConfig+0x5e>
 8006594:	4b8c      	ldr	r3, [pc, #560]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800659c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065a0:	d10b      	bne.n	80065ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a2:	4b89      	ldr	r3, [pc, #548]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d06c      	beq.n	8006688 <HAL_RCC_OscConfig+0x12c>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d168      	bne.n	8006688 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e24c      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c2:	d106      	bne.n	80065d2 <HAL_RCC_OscConfig+0x76>
 80065c4:	4b80      	ldr	r3, [pc, #512]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a7f      	ldr	r2, [pc, #508]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80065ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	e02e      	b.n	8006630 <HAL_RCC_OscConfig+0xd4>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10c      	bne.n	80065f4 <HAL_RCC_OscConfig+0x98>
 80065da:	4b7b      	ldr	r3, [pc, #492]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a7a      	ldr	r2, [pc, #488]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	4b78      	ldr	r3, [pc, #480]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a77      	ldr	r2, [pc, #476]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80065ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	e01d      	b.n	8006630 <HAL_RCC_OscConfig+0xd4>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065fc:	d10c      	bne.n	8006618 <HAL_RCC_OscConfig+0xbc>
 80065fe:	4b72      	ldr	r3, [pc, #456]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a71      	ldr	r2, [pc, #452]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 8006604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	4b6f      	ldr	r3, [pc, #444]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a6e      	ldr	r2, [pc, #440]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 8006610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	e00b      	b.n	8006630 <HAL_RCC_OscConfig+0xd4>
 8006618:	4b6b      	ldr	r3, [pc, #428]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a6a      	ldr	r2, [pc, #424]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 800661e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	4b68      	ldr	r3, [pc, #416]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a67      	ldr	r2, [pc, #412]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 800662a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800662e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d013      	beq.n	8006660 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006638:	f7fc fd7a 	bl	8003130 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006640:	f7fc fd76 	bl	8003130 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b64      	cmp	r3, #100	@ 0x64
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e200      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006652:	4b5d      	ldr	r3, [pc, #372]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0f0      	beq.n	8006640 <HAL_RCC_OscConfig+0xe4>
 800665e:	e014      	b.n	800668a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006660:	f7fc fd66 	bl	8003130 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006668:	f7fc fd62 	bl	8003130 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b64      	cmp	r3, #100	@ 0x64
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e1ec      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667a:	4b53      	ldr	r3, [pc, #332]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f0      	bne.n	8006668 <HAL_RCC_OscConfig+0x10c>
 8006686:	e000      	b.n	800668a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d063      	beq.n	800675e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006696:	4b4c      	ldr	r3, [pc, #304]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f003 030c 	and.w	r3, r3, #12
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00b      	beq.n	80066ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80066a2:	4b49      	ldr	r3, [pc, #292]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f003 030c 	and.w	r3, r3, #12
 80066aa:	2b08      	cmp	r3, #8
 80066ac:	d11c      	bne.n	80066e8 <HAL_RCC_OscConfig+0x18c>
 80066ae:	4b46      	ldr	r3, [pc, #280]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d116      	bne.n	80066e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ba:	4b43      	ldr	r3, [pc, #268]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <HAL_RCC_OscConfig+0x176>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d001      	beq.n	80066d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e1c0      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d2:	4b3d      	ldr	r3, [pc, #244]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	4939      	ldr	r1, [pc, #228]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066e6:	e03a      	b.n	800675e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d020      	beq.n	8006732 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066f0:	4b36      	ldr	r3, [pc, #216]	@ (80067cc <HAL_RCC_OscConfig+0x270>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f6:	f7fc fd1b 	bl	8003130 <HAL_GetTick>
 80066fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066fe:	f7fc fd17 	bl	8003130 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e1a1      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006710:	4b2d      	ldr	r3, [pc, #180]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0f0      	beq.n	80066fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800671c:	4b2a      	ldr	r3, [pc, #168]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	4927      	ldr	r1, [pc, #156]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 800672c:	4313      	orrs	r3, r2
 800672e:	600b      	str	r3, [r1, #0]
 8006730:	e015      	b.n	800675e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006732:	4b26      	ldr	r3, [pc, #152]	@ (80067cc <HAL_RCC_OscConfig+0x270>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006738:	f7fc fcfa 	bl	8003130 <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006740:	f7fc fcf6 	bl	8003130 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e180      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006752:	4b1d      	ldr	r3, [pc, #116]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f0      	bne.n	8006740 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0308 	and.w	r3, r3, #8
 8006766:	2b00      	cmp	r3, #0
 8006768:	d03a      	beq.n	80067e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d019      	beq.n	80067a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006772:	4b17      	ldr	r3, [pc, #92]	@ (80067d0 <HAL_RCC_OscConfig+0x274>)
 8006774:	2201      	movs	r2, #1
 8006776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006778:	f7fc fcda 	bl	8003130 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006780:	f7fc fcd6 	bl	8003130 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e160      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006792:	4b0d      	ldr	r3, [pc, #52]	@ (80067c8 <HAL_RCC_OscConfig+0x26c>)
 8006794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f0      	beq.n	8006780 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800679e:	2001      	movs	r0, #1
 80067a0:	f000 face 	bl	8006d40 <RCC_Delay>
 80067a4:	e01c      	b.n	80067e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067a6:	4b0a      	ldr	r3, [pc, #40]	@ (80067d0 <HAL_RCC_OscConfig+0x274>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ac:	f7fc fcc0 	bl	8003130 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b2:	e00f      	b.n	80067d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b4:	f7fc fcbc 	bl	8003130 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d908      	bls.n	80067d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e146      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
 80067c6:	bf00      	nop
 80067c8:	40021000 	.word	0x40021000
 80067cc:	42420000 	.word	0x42420000
 80067d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d4:	4b92      	ldr	r3, [pc, #584]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80067d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e9      	bne.n	80067b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 80a6 	beq.w	800693a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067f2:	4b8b      	ldr	r3, [pc, #556]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10d      	bne.n	800681a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067fe:	4b88      	ldr	r3, [pc, #544]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	4a87      	ldr	r2, [pc, #540]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006808:	61d3      	str	r3, [r2, #28]
 800680a:	4b85      	ldr	r3, [pc, #532]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006812:	60bb      	str	r3, [r7, #8]
 8006814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006816:	2301      	movs	r3, #1
 8006818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800681a:	4b82      	ldr	r3, [pc, #520]	@ (8006a24 <HAL_RCC_OscConfig+0x4c8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006822:	2b00      	cmp	r3, #0
 8006824:	d118      	bne.n	8006858 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006826:	4b7f      	ldr	r3, [pc, #508]	@ (8006a24 <HAL_RCC_OscConfig+0x4c8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a24 <HAL_RCC_OscConfig+0x4c8>)
 800682c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006832:	f7fc fc7d 	bl	8003130 <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800683a:	f7fc fc79 	bl	8003130 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b64      	cmp	r3, #100	@ 0x64
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e103      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684c:	4b75      	ldr	r3, [pc, #468]	@ (8006a24 <HAL_RCC_OscConfig+0x4c8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d106      	bne.n	800686e <HAL_RCC_OscConfig+0x312>
 8006860:	4b6f      	ldr	r3, [pc, #444]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	4a6e      	ldr	r2, [pc, #440]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	6213      	str	r3, [r2, #32]
 800686c:	e02d      	b.n	80068ca <HAL_RCC_OscConfig+0x36e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10c      	bne.n	8006890 <HAL_RCC_OscConfig+0x334>
 8006876:	4b6a      	ldr	r3, [pc, #424]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	4a69      	ldr	r2, [pc, #420]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 800687c:	f023 0301 	bic.w	r3, r3, #1
 8006880:	6213      	str	r3, [r2, #32]
 8006882:	4b67      	ldr	r3, [pc, #412]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	4a66      	ldr	r2, [pc, #408]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006888:	f023 0304 	bic.w	r3, r3, #4
 800688c:	6213      	str	r3, [r2, #32]
 800688e:	e01c      	b.n	80068ca <HAL_RCC_OscConfig+0x36e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	2b05      	cmp	r3, #5
 8006896:	d10c      	bne.n	80068b2 <HAL_RCC_OscConfig+0x356>
 8006898:	4b61      	ldr	r3, [pc, #388]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	4a60      	ldr	r2, [pc, #384]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 800689e:	f043 0304 	orr.w	r3, r3, #4
 80068a2:	6213      	str	r3, [r2, #32]
 80068a4:	4b5e      	ldr	r3, [pc, #376]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80068aa:	f043 0301 	orr.w	r3, r3, #1
 80068ae:	6213      	str	r3, [r2, #32]
 80068b0:	e00b      	b.n	80068ca <HAL_RCC_OscConfig+0x36e>
 80068b2:	4b5b      	ldr	r3, [pc, #364]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	4a5a      	ldr	r2, [pc, #360]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80068b8:	f023 0301 	bic.w	r3, r3, #1
 80068bc:	6213      	str	r3, [r2, #32]
 80068be:	4b58      	ldr	r3, [pc, #352]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	4a57      	ldr	r2, [pc, #348]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80068c4:	f023 0304 	bic.w	r3, r3, #4
 80068c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d015      	beq.n	80068fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068d2:	f7fc fc2d 	bl	8003130 <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d8:	e00a      	b.n	80068f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068da:	f7fc fc29 	bl	8003130 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e0b1      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f0:	4b4b      	ldr	r3, [pc, #300]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0ee      	beq.n	80068da <HAL_RCC_OscConfig+0x37e>
 80068fc:	e014      	b.n	8006928 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068fe:	f7fc fc17 	bl	8003130 <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006904:	e00a      	b.n	800691c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006906:	f7fc fc13 	bl	8003130 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006914:	4293      	cmp	r3, r2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e09b      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800691c:	4b40      	ldr	r3, [pc, #256]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1ee      	bne.n	8006906 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d105      	bne.n	800693a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800692e:	4b3c      	ldr	r3, [pc, #240]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	4a3b      	ldr	r2, [pc, #236]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006934:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006938:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 8087 	beq.w	8006a52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006944:	4b36      	ldr	r3, [pc, #216]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f003 030c 	and.w	r3, r3, #12
 800694c:	2b08      	cmp	r3, #8
 800694e:	d061      	beq.n	8006a14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d146      	bne.n	80069e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006958:	4b33      	ldr	r3, [pc, #204]	@ (8006a28 <HAL_RCC_OscConfig+0x4cc>)
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695e:	f7fc fbe7 	bl	8003130 <HAL_GetTick>
 8006962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006966:	f7fc fbe3 	bl	8003130 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e06d      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006978:	4b29      	ldr	r3, [pc, #164]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f0      	bne.n	8006966 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800698c:	d108      	bne.n	80069a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800698e:	4b24      	ldr	r3, [pc, #144]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	4921      	ldr	r1, [pc, #132]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 800699c:	4313      	orrs	r3, r2
 800699e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a19      	ldr	r1, [r3, #32]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	430b      	orrs	r3, r1
 80069b2:	491b      	ldr	r1, [pc, #108]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a28 <HAL_RCC_OscConfig+0x4cc>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069be:	f7fc fbb7 	bl	8003130 <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c6:	f7fc fbb3 	bl	8003130 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e03d      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069d8:	4b11      	ldr	r3, [pc, #68]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0f0      	beq.n	80069c6 <HAL_RCC_OscConfig+0x46a>
 80069e4:	e035      	b.n	8006a52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e6:	4b10      	ldr	r3, [pc, #64]	@ (8006a28 <HAL_RCC_OscConfig+0x4cc>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ec:	f7fc fba0 	bl	8003130 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f4:	f7fc fb9c 	bl	8003130 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e026      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a06:	4b06      	ldr	r3, [pc, #24]	@ (8006a20 <HAL_RCC_OscConfig+0x4c4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x498>
 8006a12:	e01e      	b.n	8006a52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d107      	bne.n	8006a2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e019      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
 8006a20:	40021000 	.word	0x40021000
 8006a24:	40007000 	.word	0x40007000
 8006a28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a5c <HAL_RCC_OscConfig+0x500>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d001      	beq.n	8006a52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40021000 	.word	0x40021000

08006a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0d0      	b.n	8006c16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a74:	4b6a      	ldr	r3, [pc, #424]	@ (8006c20 <HAL_RCC_ClockConfig+0x1c0>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d910      	bls.n	8006aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a82:	4b67      	ldr	r3, [pc, #412]	@ (8006c20 <HAL_RCC_ClockConfig+0x1c0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f023 0207 	bic.w	r2, r3, #7
 8006a8a:	4965      	ldr	r1, [pc, #404]	@ (8006c20 <HAL_RCC_ClockConfig+0x1c0>)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a92:	4b63      	ldr	r3, [pc, #396]	@ (8006c20 <HAL_RCC_ClockConfig+0x1c0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d001      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e0b8      	b.n	8006c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d020      	beq.n	8006af2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006abc:	4b59      	ldr	r3, [pc, #356]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	4a58      	ldr	r2, [pc, #352]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ac6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ad4:	4b53      	ldr	r3, [pc, #332]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	4a52      	ldr	r2, [pc, #328]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006ada:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006ade:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ae0:	4b50      	ldr	r3, [pc, #320]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	494d      	ldr	r1, [pc, #308]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d040      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d107      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b06:	4b47      	ldr	r3, [pc, #284]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d115      	bne.n	8006b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e07f      	b.n	8006c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d107      	bne.n	8006b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b1e:	4b41      	ldr	r3, [pc, #260]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e073      	b.n	8006c16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e06b      	b.n	8006c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b3e:	4b39      	ldr	r3, [pc, #228]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f023 0203 	bic.w	r2, r3, #3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	4936      	ldr	r1, [pc, #216]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b50:	f7fc faee 	bl	8003130 <HAL_GetTick>
 8006b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b56:	e00a      	b.n	8006b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b58:	f7fc faea 	bl	8003130 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e053      	b.n	8006c16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f003 020c 	and.w	r2, r3, #12
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d1eb      	bne.n	8006b58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b80:	4b27      	ldr	r3, [pc, #156]	@ (8006c20 <HAL_RCC_ClockConfig+0x1c0>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d210      	bcs.n	8006bb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8e:	4b24      	ldr	r3, [pc, #144]	@ (8006c20 <HAL_RCC_ClockConfig+0x1c0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f023 0207 	bic.w	r2, r3, #7
 8006b96:	4922      	ldr	r1, [pc, #136]	@ (8006c20 <HAL_RCC_ClockConfig+0x1c0>)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b9e:	4b20      	ldr	r3, [pc, #128]	@ (8006c20 <HAL_RCC_ClockConfig+0x1c0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d001      	beq.n	8006bb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e032      	b.n	8006c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d008      	beq.n	8006bce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bbc:	4b19      	ldr	r3, [pc, #100]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	4916      	ldr	r1, [pc, #88]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d009      	beq.n	8006bee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006bda:	4b12      	ldr	r3, [pc, #72]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	490e      	ldr	r1, [pc, #56]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bee:	f000 f821 	bl	8006c34 <HAL_RCC_GetSysClockFreq>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	091b      	lsrs	r3, r3, #4
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	490a      	ldr	r1, [pc, #40]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c8>)
 8006c00:	5ccb      	ldrb	r3, [r1, r3]
 8006c02:	fa22 f303 	lsr.w	r3, r2, r3
 8006c06:	4a09      	ldr	r2, [pc, #36]	@ (8006c2c <HAL_RCC_ClockConfig+0x1cc>)
 8006c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c0a:	4b09      	ldr	r3, [pc, #36]	@ (8006c30 <HAL_RCC_ClockConfig+0x1d0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fc fa4c 	bl	80030ac <HAL_InitTick>

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40022000 	.word	0x40022000
 8006c24:	40021000 	.word	0x40021000
 8006c28:	0800aea8 	.word	0x0800aea8
 8006c2c:	20000024 	.word	0x20000024
 8006c30:	20000028 	.word	0x20000028

08006c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60bb      	str	r3, [r7, #8]
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f003 030c 	and.w	r3, r3, #12
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d002      	beq.n	8006c64 <HAL_RCC_GetSysClockFreq+0x30>
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d003      	beq.n	8006c6a <HAL_RCC_GetSysClockFreq+0x36>
 8006c62:	e027      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c64:	4b19      	ldr	r3, [pc, #100]	@ (8006ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8006c66:	613b      	str	r3, [r7, #16]
      break;
 8006c68:	e027      	b.n	8006cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	0c9b      	lsrs	r3, r3, #18
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	4a17      	ldr	r2, [pc, #92]	@ (8006cd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006c74:	5cd3      	ldrb	r3, [r2, r3]
 8006c76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d010      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c82:	4b11      	ldr	r3, [pc, #68]	@ (8006cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	0c5b      	lsrs	r3, r3, #17
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	4a11      	ldr	r2, [pc, #68]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006c8e:	5cd3      	ldrb	r3, [r2, r3]
 8006c90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a0d      	ldr	r2, [pc, #52]	@ (8006ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8006c96:	fb03 f202 	mul.w	r2, r3, r2
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	e004      	b.n	8006cae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ca8:	fb02 f303 	mul.w	r3, r2, r3
 8006cac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	613b      	str	r3, [r7, #16]
      break;
 8006cb2:	e002      	b.n	8006cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006cb4:	4b05      	ldr	r3, [pc, #20]	@ (8006ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8006cb6:	613b      	str	r3, [r7, #16]
      break;
 8006cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cba:	693b      	ldr	r3, [r7, #16]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	007a1200 	.word	0x007a1200
 8006cd0:	0800aec0 	.word	0x0800aec0
 8006cd4:	0800aed0 	.word	0x0800aed0
 8006cd8:	003d0900 	.word	0x003d0900

08006cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ce0:	4b02      	ldr	r3, [pc, #8]	@ (8006cec <HAL_RCC_GetHCLKFreq+0x10>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr
 8006cec:	20000024 	.word	0x20000024

08006cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006cf4:	f7ff fff2 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	4b05      	ldr	r3, [pc, #20]	@ (8006d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	0a1b      	lsrs	r3, r3, #8
 8006d00:	f003 0307 	and.w	r3, r3, #7
 8006d04:	4903      	ldr	r1, [pc, #12]	@ (8006d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d06:	5ccb      	ldrb	r3, [r1, r3]
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	40021000 	.word	0x40021000
 8006d14:	0800aeb8 	.word	0x0800aeb8

08006d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d1c:	f7ff ffde 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8006d20:	4602      	mov	r2, r0
 8006d22:	4b05      	ldr	r3, [pc, #20]	@ (8006d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	0adb      	lsrs	r3, r3, #11
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	4903      	ldr	r1, [pc, #12]	@ (8006d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d2e:	5ccb      	ldrb	r3, [r1, r3]
 8006d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40021000 	.word	0x40021000
 8006d3c:	0800aeb8 	.word	0x0800aeb8

08006d40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006d48:	4b0a      	ldr	r3, [pc, #40]	@ (8006d74 <RCC_Delay+0x34>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d78 <RCC_Delay+0x38>)
 8006d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d52:	0a5b      	lsrs	r3, r3, #9
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
 8006d5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006d5c:	bf00      	nop
  }
  while (Delay --);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	1e5a      	subs	r2, r3, #1
 8006d62:	60fa      	str	r2, [r7, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1f9      	bne.n	8006d5c <RCC_Delay+0x1c>
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr
 8006d74:	20000024 	.word	0x20000024
 8006d78:	10624dd3 	.word	0x10624dd3

08006d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e041      	b.n	8006e12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fb ff20 	bl	8002be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3304      	adds	r3, #4
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f000 fa5c 	bl	8007278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d001      	beq.n	8006e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e03a      	b.n	8006eaa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a18      	ldr	r2, [pc, #96]	@ (8006eb4 <HAL_TIM_Base_Start_IT+0x98>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d00e      	beq.n	8006e74 <HAL_TIM_Base_Start_IT+0x58>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e5e:	d009      	beq.n	8006e74 <HAL_TIM_Base_Start_IT+0x58>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a14      	ldr	r2, [pc, #80]	@ (8006eb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d004      	beq.n	8006e74 <HAL_TIM_Base_Start_IT+0x58>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a13      	ldr	r2, [pc, #76]	@ (8006ebc <HAL_TIM_Base_Start_IT+0xa0>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d111      	bne.n	8006e98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b06      	cmp	r3, #6
 8006e84:	d010      	beq.n	8006ea8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0201 	orr.w	r2, r2, #1
 8006e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e96:	e007      	b.n	8006ea8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0201 	orr.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr
 8006eb4:	40012c00 	.word	0x40012c00
 8006eb8:	40000400 	.word	0x40000400
 8006ebc:	40000800 	.word	0x40000800

08006ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d020      	beq.n	8006f24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01b      	beq.n	8006f24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0202 	mvn.w	r2, #2
 8006ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f998 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 8006f10:	e005      	b.n	8006f1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f98b 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f99a 	bl	8007252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f003 0304 	and.w	r3, r3, #4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d020      	beq.n	8006f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01b      	beq.n	8006f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f06f 0204 	mvn.w	r2, #4
 8006f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f972 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 8006f5c:	e005      	b.n	8006f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f965 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f974 	bl	8007252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d020      	beq.n	8006fbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01b      	beq.n	8006fbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f06f 0208 	mvn.w	r2, #8
 8006f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2204      	movs	r2, #4
 8006f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	f003 0303 	and.w	r3, r3, #3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f94c 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 8006fa8:	e005      	b.n	8006fb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f93f 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f94e 	bl	8007252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d020      	beq.n	8007008 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01b      	beq.n	8007008 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f06f 0210 	mvn.w	r2, #16
 8006fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f926 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 8006ff4:	e005      	b.n	8007002 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f919 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f928 	bl	8007252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00c      	beq.n	800702c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d007      	beq.n	800702c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f06f 0201 	mvn.w	r2, #1
 8007024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fa fc10 	bl	800184c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00c      	beq.n	8007050 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703c:	2b00      	cmp	r3, #0
 800703e:	d007      	beq.n	8007050 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fa7f 	bl	800754e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00c      	beq.n	8007074 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d007      	beq.n	8007074 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800706c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f8f8 	bl	8007264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0220 	mvn.w	r2, #32
 8007090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa52 	bl	800753c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d101      	bne.n	80070bc <HAL_TIM_ConfigClockSource+0x1c>
 80070b8:	2302      	movs	r3, #2
 80070ba:	e0b4      	b.n	8007226 <HAL_TIM_ConfigClockSource+0x186>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070f4:	d03e      	beq.n	8007174 <HAL_TIM_ConfigClockSource+0xd4>
 80070f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070fa:	f200 8087 	bhi.w	800720c <HAL_TIM_ConfigClockSource+0x16c>
 80070fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007102:	f000 8086 	beq.w	8007212 <HAL_TIM_ConfigClockSource+0x172>
 8007106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800710a:	d87f      	bhi.n	800720c <HAL_TIM_ConfigClockSource+0x16c>
 800710c:	2b70      	cmp	r3, #112	@ 0x70
 800710e:	d01a      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0xa6>
 8007110:	2b70      	cmp	r3, #112	@ 0x70
 8007112:	d87b      	bhi.n	800720c <HAL_TIM_ConfigClockSource+0x16c>
 8007114:	2b60      	cmp	r3, #96	@ 0x60
 8007116:	d050      	beq.n	80071ba <HAL_TIM_ConfigClockSource+0x11a>
 8007118:	2b60      	cmp	r3, #96	@ 0x60
 800711a:	d877      	bhi.n	800720c <HAL_TIM_ConfigClockSource+0x16c>
 800711c:	2b50      	cmp	r3, #80	@ 0x50
 800711e:	d03c      	beq.n	800719a <HAL_TIM_ConfigClockSource+0xfa>
 8007120:	2b50      	cmp	r3, #80	@ 0x50
 8007122:	d873      	bhi.n	800720c <HAL_TIM_ConfigClockSource+0x16c>
 8007124:	2b40      	cmp	r3, #64	@ 0x40
 8007126:	d058      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x13a>
 8007128:	2b40      	cmp	r3, #64	@ 0x40
 800712a:	d86f      	bhi.n	800720c <HAL_TIM_ConfigClockSource+0x16c>
 800712c:	2b30      	cmp	r3, #48	@ 0x30
 800712e:	d064      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x15a>
 8007130:	2b30      	cmp	r3, #48	@ 0x30
 8007132:	d86b      	bhi.n	800720c <HAL_TIM_ConfigClockSource+0x16c>
 8007134:	2b20      	cmp	r3, #32
 8007136:	d060      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x15a>
 8007138:	2b20      	cmp	r3, #32
 800713a:	d867      	bhi.n	800720c <HAL_TIM_ConfigClockSource+0x16c>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d05c      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x15a>
 8007140:	2b10      	cmp	r3, #16
 8007142:	d05a      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x15a>
 8007144:	e062      	b.n	800720c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007156:	f000 f974 	bl	8007442 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	609a      	str	r2, [r3, #8]
      break;
 8007172:	e04f      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007184:	f000 f95d 	bl	8007442 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007196:	609a      	str	r2, [r3, #8]
      break;
 8007198:	e03c      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a6:	461a      	mov	r2, r3
 80071a8:	f000 f8d4 	bl	8007354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2150      	movs	r1, #80	@ 0x50
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 f92b 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 80071b8:	e02c      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071c6:	461a      	mov	r2, r3
 80071c8:	f000 f8f2 	bl	80073b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2160      	movs	r1, #96	@ 0x60
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f91b 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 80071d8:	e01c      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071e6:	461a      	mov	r2, r3
 80071e8:	f000 f8b4 	bl	8007354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2140      	movs	r1, #64	@ 0x40
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 f90b 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 80071f8:	e00c      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4619      	mov	r1, r3
 8007204:	4610      	mov	r0, r2
 8007206:	f000 f902 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 800720a:	e003      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
      break;
 8007210:	e000      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007224:	7bfb      	ldrb	r3, [r7, #15]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	bc80      	pop	{r7}
 800723e:	4770      	bx	lr

08007240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr

08007252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	bc80      	pop	{r7}
 8007262:	4770      	bx	lr

08007264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr
	...

08007278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a2f      	ldr	r2, [pc, #188]	@ (8007348 <TIM_Base_SetConfig+0xd0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00b      	beq.n	80072a8 <TIM_Base_SetConfig+0x30>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007296:	d007      	beq.n	80072a8 <TIM_Base_SetConfig+0x30>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a2c      	ldr	r2, [pc, #176]	@ (800734c <TIM_Base_SetConfig+0xd4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d003      	beq.n	80072a8 <TIM_Base_SetConfig+0x30>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a2b      	ldr	r2, [pc, #172]	@ (8007350 <TIM_Base_SetConfig+0xd8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d108      	bne.n	80072ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a22      	ldr	r2, [pc, #136]	@ (8007348 <TIM_Base_SetConfig+0xd0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00b      	beq.n	80072da <TIM_Base_SetConfig+0x62>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c8:	d007      	beq.n	80072da <TIM_Base_SetConfig+0x62>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a1f      	ldr	r2, [pc, #124]	@ (800734c <TIM_Base_SetConfig+0xd4>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <TIM_Base_SetConfig+0x62>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007350 <TIM_Base_SetConfig+0xd8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d108      	bne.n	80072ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a0d      	ldr	r2, [pc, #52]	@ (8007348 <TIM_Base_SetConfig+0xd0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d103      	bne.n	8007320 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	691a      	ldr	r2, [r3, #16]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f023 0201 	bic.w	r2, r3, #1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	611a      	str	r2, [r3, #16]
  }
}
 800733e:	bf00      	nop
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr
 8007348:	40012c00 	.word	0x40012c00
 800734c:	40000400 	.word	0x40000400
 8007350:	40000800 	.word	0x40000800

08007354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	f023 0201 	bic.w	r2, r3, #1
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800737e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f023 030a 	bic.w	r3, r3, #10
 8007390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr

080073b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f023 0210 	bic.w	r2, r3, #16
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	031b      	lsls	r3, r3, #12
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	621a      	str	r2, [r3, #32]
}
 8007404:	bf00      	nop
 8007406:	371c      	adds	r7, #28
 8007408:	46bd      	mov	sp, r7
 800740a:	bc80      	pop	{r7}
 800740c:	4770      	bx	lr

0800740e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	f043 0307 	orr.w	r3, r3, #7
 8007430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	609a      	str	r2, [r3, #8]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr

08007442 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007442:	b480      	push	{r7}
 8007444:	b087      	sub	sp, #28
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800745c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	021a      	lsls	r2, r3, #8
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	431a      	orrs	r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	4313      	orrs	r3, r2
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	609a      	str	r2, [r3, #8]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr

08007480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007494:	2302      	movs	r3, #2
 8007496:	e046      	b.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a16      	ldr	r2, [pc, #88]	@ (8007530 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00e      	beq.n	80074fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e4:	d009      	beq.n	80074fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a12      	ldr	r2, [pc, #72]	@ (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a10      	ldr	r2, [pc, #64]	@ (8007538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d10c      	bne.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	4313      	orrs	r3, r2
 800750a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	bc80      	pop	{r7}
 800752e:	4770      	bx	lr
 8007530:	40012c00 	.word	0x40012c00
 8007534:	40000400 	.word	0x40000400
 8007538:	40000800 	.word	0x40000800

0800753c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	bc80      	pop	{r7}
 800754c:	4770      	bx	lr

0800754e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	bc80      	pop	{r7}
 800755e:	4770      	bx	lr

08007560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e042      	b.n	80075f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fb fb70 	bl	8002c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2224      	movs	r2, #36	@ 0x24
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f971 	bl	800788c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	695a      	ldr	r2, [r3, #20]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	@ 0x28
 8007604:	af02      	add	r7, sp, #8
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	4613      	mov	r3, r2
 800760e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b20      	cmp	r3, #32
 800761e:	d175      	bne.n	800770c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_UART_Transmit+0x2c>
 8007626:	88fb      	ldrh	r3, [r7, #6]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e06e      	b.n	800770e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2221      	movs	r2, #33	@ 0x21
 800763a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800763e:	f7fb fd77 	bl	8003130 <HAL_GetTick>
 8007642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	88fa      	ldrh	r2, [r7, #6]
 8007648:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	88fa      	ldrh	r2, [r7, #6]
 800764e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007658:	d108      	bne.n	800766c <HAL_UART_Transmit+0x6c>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d104      	bne.n	800766c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	e003      	b.n	8007674 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007670:	2300      	movs	r3, #0
 8007672:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007674:	e02e      	b.n	80076d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2200      	movs	r2, #0
 800767e:	2180      	movs	r1, #128	@ 0x80
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f848 	bl	8007716 <UART_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e03a      	b.n	800770e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	3302      	adds	r3, #2
 80076b2:	61bb      	str	r3, [r7, #24]
 80076b4:	e007      	b.n	80076c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	781a      	ldrb	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	3301      	adds	r3, #1
 80076c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1cb      	bne.n	8007676 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2200      	movs	r2, #0
 80076e6:	2140      	movs	r1, #64	@ 0x40
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 f814 	bl	8007716 <UART_WaitOnFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d005      	beq.n	8007700 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e006      	b.n	800770e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	e000      	b.n	800770e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800770c:	2302      	movs	r3, #2
  }
}
 800770e:	4618      	mov	r0, r3
 8007710:	3720      	adds	r7, #32
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b086      	sub	sp, #24
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	603b      	str	r3, [r7, #0]
 8007722:	4613      	mov	r3, r2
 8007724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007726:	e03b      	b.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800772e:	d037      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007730:	f7fb fcfe 	bl	8003130 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	6a3a      	ldr	r2, [r7, #32]
 800773c:	429a      	cmp	r2, r3
 800773e:	d302      	bcc.n	8007746 <UART_WaitOnFlagUntilTimeout+0x30>
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e03a      	b.n	80077c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d023      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b80      	cmp	r3, #128	@ 0x80
 800775c:	d020      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b40      	cmp	r3, #64	@ 0x40
 8007762:	d01d      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b08      	cmp	r3, #8
 8007770:	d116      	bne.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	617b      	str	r3, [r7, #20]
 8007786:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f81d 	bl	80077c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2208      	movs	r2, #8
 8007792:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e00f      	b.n	80077c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	4013      	ands	r3, r2
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	bf0c      	ite	eq
 80077b0:	2301      	moveq	r3, #1
 80077b2:	2300      	movne	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	461a      	mov	r2, r3
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d0b4      	beq.n	8007728 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b095      	sub	sp, #84	@ 0x54
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e5      	bne.n	80077d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3314      	adds	r3, #20
 800780a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	61fb      	str	r3, [r7, #28]
   return(result);
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3314      	adds	r3, #20
 8007822:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007824:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007826:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800782a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e5      	bne.n	8007804 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783c:	2b01      	cmp	r3, #1
 800783e:	d119      	bne.n	8007874 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f023 0310 	bic.w	r3, r3, #16
 8007856:	647b      	str	r3, [r7, #68]	@ 0x44
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007860:	61ba      	str	r2, [r7, #24]
 8007862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6979      	ldr	r1, [r7, #20]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	613b      	str	r3, [r7, #16]
   return(result);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007882:	bf00      	nop
 8007884:	3754      	adds	r7, #84	@ 0x54
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr

0800788c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	431a      	orrs	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80078c6:	f023 030c 	bic.w	r3, r3, #12
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	6812      	ldr	r2, [r2, #0]
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	430b      	orrs	r3, r1
 80078d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699a      	ldr	r2, [r3, #24]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a2c      	ldr	r2, [pc, #176]	@ (80079a0 <UART_SetConfig+0x114>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d103      	bne.n	80078fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80078f4:	f7ff fa10 	bl	8006d18 <HAL_RCC_GetPCLK2Freq>
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	e002      	b.n	8007902 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80078fc:	f7ff f9f8 	bl	8006cf0 <HAL_RCC_GetPCLK1Freq>
 8007900:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	009a      	lsls	r2, r3, #2
 800790c:	441a      	add	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	fbb2 f3f3 	udiv	r3, r2, r3
 8007918:	4a22      	ldr	r2, [pc, #136]	@ (80079a4 <UART_SetConfig+0x118>)
 800791a:	fba2 2303 	umull	r2, r3, r2, r3
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	0119      	lsls	r1, r3, #4
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009a      	lsls	r2, r3, #2
 800792c:	441a      	add	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	fbb2 f2f3 	udiv	r2, r2, r3
 8007938:	4b1a      	ldr	r3, [pc, #104]	@ (80079a4 <UART_SetConfig+0x118>)
 800793a:	fba3 0302 	umull	r0, r3, r3, r2
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	2064      	movs	r0, #100	@ 0x64
 8007942:	fb00 f303 	mul.w	r3, r0, r3
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	3332      	adds	r3, #50	@ 0x32
 800794c:	4a15      	ldr	r2, [pc, #84]	@ (80079a4 <UART_SetConfig+0x118>)
 800794e:	fba2 2303 	umull	r2, r3, r2, r3
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007958:	4419      	add	r1, r3
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	009a      	lsls	r2, r3, #2
 8007964:	441a      	add	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007970:	4b0c      	ldr	r3, [pc, #48]	@ (80079a4 <UART_SetConfig+0x118>)
 8007972:	fba3 0302 	umull	r0, r3, r3, r2
 8007976:	095b      	lsrs	r3, r3, #5
 8007978:	2064      	movs	r0, #100	@ 0x64
 800797a:	fb00 f303 	mul.w	r3, r0, r3
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	011b      	lsls	r3, r3, #4
 8007982:	3332      	adds	r3, #50	@ 0x32
 8007984:	4a07      	ldr	r2, [pc, #28]	@ (80079a4 <UART_SetConfig+0x118>)
 8007986:	fba2 2303 	umull	r2, r3, r2, r3
 800798a:	095b      	lsrs	r3, r3, #5
 800798c:	f003 020f 	and.w	r2, r3, #15
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	440a      	add	r2, r1
 8007996:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007998:	bf00      	nop
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	40013800 	.word	0x40013800
 80079a4:	51eb851f 	.word	0x51eb851f

080079a8 <__cvt>:
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ae:	461d      	mov	r5, r3
 80079b0:	bfbb      	ittet	lt
 80079b2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80079b6:	461d      	movlt	r5, r3
 80079b8:	2300      	movge	r3, #0
 80079ba:	232d      	movlt	r3, #45	@ 0x2d
 80079bc:	b088      	sub	sp, #32
 80079be:	4614      	mov	r4, r2
 80079c0:	bfb8      	it	lt
 80079c2:	4614      	movlt	r4, r2
 80079c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80079c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80079c8:	7013      	strb	r3, [r2, #0]
 80079ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80079cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80079d0:	f023 0820 	bic.w	r8, r3, #32
 80079d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80079d8:	d005      	beq.n	80079e6 <__cvt+0x3e>
 80079da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80079de:	d100      	bne.n	80079e2 <__cvt+0x3a>
 80079e0:	3601      	adds	r6, #1
 80079e2:	2302      	movs	r3, #2
 80079e4:	e000      	b.n	80079e8 <__cvt+0x40>
 80079e6:	2303      	movs	r3, #3
 80079e8:	aa07      	add	r2, sp, #28
 80079ea:	9204      	str	r2, [sp, #16]
 80079ec:	aa06      	add	r2, sp, #24
 80079ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80079f2:	e9cd 3600 	strd	r3, r6, [sp]
 80079f6:	4622      	mov	r2, r4
 80079f8:	462b      	mov	r3, r5
 80079fa:	f000 fe6d 	bl	80086d8 <_dtoa_r>
 80079fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007a02:	4607      	mov	r7, r0
 8007a04:	d119      	bne.n	8007a3a <__cvt+0x92>
 8007a06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a08:	07db      	lsls	r3, r3, #31
 8007a0a:	d50e      	bpl.n	8007a2a <__cvt+0x82>
 8007a0c:	eb00 0906 	add.w	r9, r0, r6
 8007a10:	2200      	movs	r2, #0
 8007a12:	2300      	movs	r3, #0
 8007a14:	4620      	mov	r0, r4
 8007a16:	4629      	mov	r1, r5
 8007a18:	f7f8 ffc6 	bl	80009a8 <__aeabi_dcmpeq>
 8007a1c:	b108      	cbz	r0, 8007a22 <__cvt+0x7a>
 8007a1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007a22:	2230      	movs	r2, #48	@ 0x30
 8007a24:	9b07      	ldr	r3, [sp, #28]
 8007a26:	454b      	cmp	r3, r9
 8007a28:	d31e      	bcc.n	8007a68 <__cvt+0xc0>
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	9b07      	ldr	r3, [sp, #28]
 8007a2e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007a30:	1bdb      	subs	r3, r3, r7
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	b008      	add	sp, #32
 8007a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a3e:	eb00 0906 	add.w	r9, r0, r6
 8007a42:	d1e5      	bne.n	8007a10 <__cvt+0x68>
 8007a44:	7803      	ldrb	r3, [r0, #0]
 8007a46:	2b30      	cmp	r3, #48	@ 0x30
 8007a48:	d10a      	bne.n	8007a60 <__cvt+0xb8>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4620      	mov	r0, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	f7f8 ffa9 	bl	80009a8 <__aeabi_dcmpeq>
 8007a56:	b918      	cbnz	r0, 8007a60 <__cvt+0xb8>
 8007a58:	f1c6 0601 	rsb	r6, r6, #1
 8007a5c:	f8ca 6000 	str.w	r6, [sl]
 8007a60:	f8da 3000 	ldr.w	r3, [sl]
 8007a64:	4499      	add	r9, r3
 8007a66:	e7d3      	b.n	8007a10 <__cvt+0x68>
 8007a68:	1c59      	adds	r1, r3, #1
 8007a6a:	9107      	str	r1, [sp, #28]
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	e7d9      	b.n	8007a24 <__cvt+0x7c>

08007a70 <__exponent>:
 8007a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a72:	2900      	cmp	r1, #0
 8007a74:	bfb6      	itet	lt
 8007a76:	232d      	movlt	r3, #45	@ 0x2d
 8007a78:	232b      	movge	r3, #43	@ 0x2b
 8007a7a:	4249      	neglt	r1, r1
 8007a7c:	2909      	cmp	r1, #9
 8007a7e:	7002      	strb	r2, [r0, #0]
 8007a80:	7043      	strb	r3, [r0, #1]
 8007a82:	dd29      	ble.n	8007ad8 <__exponent+0x68>
 8007a84:	f10d 0307 	add.w	r3, sp, #7
 8007a88:	461d      	mov	r5, r3
 8007a8a:	270a      	movs	r7, #10
 8007a8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007a90:	461a      	mov	r2, r3
 8007a92:	fb07 1416 	mls	r4, r7, r6, r1
 8007a96:	3430      	adds	r4, #48	@ 0x30
 8007a98:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	2c63      	cmp	r4, #99	@ 0x63
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007aa6:	dcf1      	bgt.n	8007a8c <__exponent+0x1c>
 8007aa8:	3130      	adds	r1, #48	@ 0x30
 8007aaa:	1e94      	subs	r4, r2, #2
 8007aac:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ab0:	4623      	mov	r3, r4
 8007ab2:	1c41      	adds	r1, r0, #1
 8007ab4:	42ab      	cmp	r3, r5
 8007ab6:	d30a      	bcc.n	8007ace <__exponent+0x5e>
 8007ab8:	f10d 0309 	add.w	r3, sp, #9
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	42ac      	cmp	r4, r5
 8007ac0:	bf88      	it	hi
 8007ac2:	2300      	movhi	r3, #0
 8007ac4:	3302      	adds	r3, #2
 8007ac6:	4403      	add	r3, r0
 8007ac8:	1a18      	subs	r0, r3, r0
 8007aca:	b003      	add	sp, #12
 8007acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ace:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ad2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007ad6:	e7ed      	b.n	8007ab4 <__exponent+0x44>
 8007ad8:	2330      	movs	r3, #48	@ 0x30
 8007ada:	3130      	adds	r1, #48	@ 0x30
 8007adc:	7083      	strb	r3, [r0, #2]
 8007ade:	70c1      	strb	r1, [r0, #3]
 8007ae0:	1d03      	adds	r3, r0, #4
 8007ae2:	e7f1      	b.n	8007ac8 <__exponent+0x58>

08007ae4 <_printf_float>:
 8007ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae8:	b091      	sub	sp, #68	@ 0x44
 8007aea:	460c      	mov	r4, r1
 8007aec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007af0:	4616      	mov	r6, r2
 8007af2:	461f      	mov	r7, r3
 8007af4:	4605      	mov	r5, r0
 8007af6:	f000 fce1 	bl	80084bc <_localeconv_r>
 8007afa:	6803      	ldr	r3, [r0, #0]
 8007afc:	4618      	mov	r0, r3
 8007afe:	9308      	str	r3, [sp, #32]
 8007b00:	f7f8 fb26 	bl	8000150 <strlen>
 8007b04:	2300      	movs	r3, #0
 8007b06:	930e      	str	r3, [sp, #56]	@ 0x38
 8007b08:	f8d8 3000 	ldr.w	r3, [r8]
 8007b0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8007b0e:	3307      	adds	r3, #7
 8007b10:	f023 0307 	bic.w	r3, r3, #7
 8007b14:	f103 0208 	add.w	r2, r3, #8
 8007b18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b1c:	f8d4 b000 	ldr.w	fp, [r4]
 8007b20:	f8c8 2000 	str.w	r2, [r8]
 8007b24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007b2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b2e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007b32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007b3e:	4b9c      	ldr	r3, [pc, #624]	@ (8007db0 <_printf_float+0x2cc>)
 8007b40:	f7f8 ff64 	bl	8000a0c <__aeabi_dcmpun>
 8007b44:	bb70      	cbnz	r0, 8007ba4 <_printf_float+0xc0>
 8007b46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b4e:	4b98      	ldr	r3, [pc, #608]	@ (8007db0 <_printf_float+0x2cc>)
 8007b50:	f7f8 ff3e 	bl	80009d0 <__aeabi_dcmple>
 8007b54:	bb30      	cbnz	r0, 8007ba4 <_printf_float+0xc0>
 8007b56:	2200      	movs	r2, #0
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	f7f8 ff2d 	bl	80009bc <__aeabi_dcmplt>
 8007b62:	b110      	cbz	r0, 8007b6a <_printf_float+0x86>
 8007b64:	232d      	movs	r3, #45	@ 0x2d
 8007b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b6a:	4a92      	ldr	r2, [pc, #584]	@ (8007db4 <_printf_float+0x2d0>)
 8007b6c:	4b92      	ldr	r3, [pc, #584]	@ (8007db8 <_printf_float+0x2d4>)
 8007b6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007b72:	bf8c      	ite	hi
 8007b74:	4690      	movhi	r8, r2
 8007b76:	4698      	movls	r8, r3
 8007b78:	2303      	movs	r3, #3
 8007b7a:	f04f 0900 	mov.w	r9, #0
 8007b7e:	6123      	str	r3, [r4, #16]
 8007b80:	f02b 0304 	bic.w	r3, fp, #4
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	4633      	mov	r3, r6
 8007b88:	4621      	mov	r1, r4
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	9700      	str	r7, [sp, #0]
 8007b8e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007b90:	f000 f9d4 	bl	8007f3c <_printf_common>
 8007b94:	3001      	adds	r0, #1
 8007b96:	f040 8090 	bne.w	8007cba <_printf_float+0x1d6>
 8007b9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b9e:	b011      	add	sp, #68	@ 0x44
 8007ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	464b      	mov	r3, r9
 8007ba8:	4640      	mov	r0, r8
 8007baa:	4649      	mov	r1, r9
 8007bac:	f7f8 ff2e 	bl	8000a0c <__aeabi_dcmpun>
 8007bb0:	b148      	cbz	r0, 8007bc6 <_printf_float+0xe2>
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	bfb8      	it	lt
 8007bb8:	232d      	movlt	r3, #45	@ 0x2d
 8007bba:	4a80      	ldr	r2, [pc, #512]	@ (8007dbc <_printf_float+0x2d8>)
 8007bbc:	bfb8      	it	lt
 8007bbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8007dc0 <_printf_float+0x2dc>)
 8007bc4:	e7d3      	b.n	8007b6e <_printf_float+0x8a>
 8007bc6:	6863      	ldr	r3, [r4, #4]
 8007bc8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	d13f      	bne.n	8007c50 <_printf_float+0x16c>
 8007bd0:	2306      	movs	r3, #6
 8007bd2:	6063      	str	r3, [r4, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007bda:	6023      	str	r3, [r4, #0]
 8007bdc:	9206      	str	r2, [sp, #24]
 8007bde:	aa0e      	add	r2, sp, #56	@ 0x38
 8007be0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007be4:	aa0d      	add	r2, sp, #52	@ 0x34
 8007be6:	9203      	str	r2, [sp, #12]
 8007be8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007bec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007bf0:	6863      	ldr	r3, [r4, #4]
 8007bf2:	4642      	mov	r2, r8
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	464b      	mov	r3, r9
 8007bfa:	910a      	str	r1, [sp, #40]	@ 0x28
 8007bfc:	f7ff fed4 	bl	80079a8 <__cvt>
 8007c00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c02:	4680      	mov	r8, r0
 8007c04:	2947      	cmp	r1, #71	@ 0x47
 8007c06:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007c08:	d128      	bne.n	8007c5c <_printf_float+0x178>
 8007c0a:	1cc8      	adds	r0, r1, #3
 8007c0c:	db02      	blt.n	8007c14 <_printf_float+0x130>
 8007c0e:	6863      	ldr	r3, [r4, #4]
 8007c10:	4299      	cmp	r1, r3
 8007c12:	dd40      	ble.n	8007c96 <_printf_float+0x1b2>
 8007c14:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c18:	fa5f fa8a 	uxtb.w	sl, sl
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	3901      	subs	r1, #1
 8007c20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007c24:	910d      	str	r1, [sp, #52]	@ 0x34
 8007c26:	f7ff ff23 	bl	8007a70 <__exponent>
 8007c2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c2c:	4681      	mov	r9, r0
 8007c2e:	1813      	adds	r3, r2, r0
 8007c30:	2a01      	cmp	r2, #1
 8007c32:	6123      	str	r3, [r4, #16]
 8007c34:	dc02      	bgt.n	8007c3c <_printf_float+0x158>
 8007c36:	6822      	ldr	r2, [r4, #0]
 8007c38:	07d2      	lsls	r2, r2, #31
 8007c3a:	d501      	bpl.n	8007c40 <_printf_float+0x15c>
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	6123      	str	r3, [r4, #16]
 8007c40:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d09e      	beq.n	8007b86 <_printf_float+0xa2>
 8007c48:	232d      	movs	r3, #45	@ 0x2d
 8007c4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c4e:	e79a      	b.n	8007b86 <_printf_float+0xa2>
 8007c50:	2947      	cmp	r1, #71	@ 0x47
 8007c52:	d1bf      	bne.n	8007bd4 <_printf_float+0xf0>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1bd      	bne.n	8007bd4 <_printf_float+0xf0>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e7ba      	b.n	8007bd2 <_printf_float+0xee>
 8007c5c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c60:	d9dc      	bls.n	8007c1c <_printf_float+0x138>
 8007c62:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007c66:	d118      	bne.n	8007c9a <_printf_float+0x1b6>
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	6863      	ldr	r3, [r4, #4]
 8007c6c:	dd0b      	ble.n	8007c86 <_printf_float+0x1a2>
 8007c6e:	6121      	str	r1, [r4, #16]
 8007c70:	b913      	cbnz	r3, 8007c78 <_printf_float+0x194>
 8007c72:	6822      	ldr	r2, [r4, #0]
 8007c74:	07d0      	lsls	r0, r2, #31
 8007c76:	d502      	bpl.n	8007c7e <_printf_float+0x19a>
 8007c78:	3301      	adds	r3, #1
 8007c7a:	440b      	add	r3, r1
 8007c7c:	6123      	str	r3, [r4, #16]
 8007c7e:	f04f 0900 	mov.w	r9, #0
 8007c82:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007c84:	e7dc      	b.n	8007c40 <_printf_float+0x15c>
 8007c86:	b913      	cbnz	r3, 8007c8e <_printf_float+0x1aa>
 8007c88:	6822      	ldr	r2, [r4, #0]
 8007c8a:	07d2      	lsls	r2, r2, #31
 8007c8c:	d501      	bpl.n	8007c92 <_printf_float+0x1ae>
 8007c8e:	3302      	adds	r3, #2
 8007c90:	e7f4      	b.n	8007c7c <_printf_float+0x198>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e7f2      	b.n	8007c7c <_printf_float+0x198>
 8007c96:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c9c:	4299      	cmp	r1, r3
 8007c9e:	db05      	blt.n	8007cac <_printf_float+0x1c8>
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	6121      	str	r1, [r4, #16]
 8007ca4:	07d8      	lsls	r0, r3, #31
 8007ca6:	d5ea      	bpl.n	8007c7e <_printf_float+0x19a>
 8007ca8:	1c4b      	adds	r3, r1, #1
 8007caa:	e7e7      	b.n	8007c7c <_printf_float+0x198>
 8007cac:	2900      	cmp	r1, #0
 8007cae:	bfcc      	ite	gt
 8007cb0:	2201      	movgt	r2, #1
 8007cb2:	f1c1 0202 	rsble	r2, r1, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	e7e0      	b.n	8007c7c <_printf_float+0x198>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	055a      	lsls	r2, r3, #21
 8007cbe:	d407      	bmi.n	8007cd0 <_printf_float+0x1ec>
 8007cc0:	6923      	ldr	r3, [r4, #16]
 8007cc2:	4642      	mov	r2, r8
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	47b8      	blx	r7
 8007cca:	3001      	adds	r0, #1
 8007ccc:	d12b      	bne.n	8007d26 <_printf_float+0x242>
 8007cce:	e764      	b.n	8007b9a <_printf_float+0xb6>
 8007cd0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007cd4:	f240 80dc 	bls.w	8007e90 <_printf_float+0x3ac>
 8007cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f7f8 fe62 	bl	80009a8 <__aeabi_dcmpeq>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d033      	beq.n	8007d50 <_printf_float+0x26c>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	4631      	mov	r1, r6
 8007cec:	4628      	mov	r0, r5
 8007cee:	4a35      	ldr	r2, [pc, #212]	@ (8007dc4 <_printf_float+0x2e0>)
 8007cf0:	47b8      	blx	r7
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	f43f af51 	beq.w	8007b9a <_printf_float+0xb6>
 8007cf8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007cfc:	4543      	cmp	r3, r8
 8007cfe:	db02      	blt.n	8007d06 <_printf_float+0x222>
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	07d8      	lsls	r0, r3, #31
 8007d04:	d50f      	bpl.n	8007d26 <_printf_float+0x242>
 8007d06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b8      	blx	r7
 8007d10:	3001      	adds	r0, #1
 8007d12:	f43f af42 	beq.w	8007b9a <_printf_float+0xb6>
 8007d16:	f04f 0900 	mov.w	r9, #0
 8007d1a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007d1e:	f104 0a1a 	add.w	sl, r4, #26
 8007d22:	45c8      	cmp	r8, r9
 8007d24:	dc09      	bgt.n	8007d3a <_printf_float+0x256>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	079b      	lsls	r3, r3, #30
 8007d2a:	f100 8102 	bmi.w	8007f32 <_printf_float+0x44e>
 8007d2e:	68e0      	ldr	r0, [r4, #12]
 8007d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d32:	4298      	cmp	r0, r3
 8007d34:	bfb8      	it	lt
 8007d36:	4618      	movlt	r0, r3
 8007d38:	e731      	b.n	8007b9e <_printf_float+0xba>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b8      	blx	r7
 8007d44:	3001      	adds	r0, #1
 8007d46:	f43f af28 	beq.w	8007b9a <_printf_float+0xb6>
 8007d4a:	f109 0901 	add.w	r9, r9, #1
 8007d4e:	e7e8      	b.n	8007d22 <_printf_float+0x23e>
 8007d50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dc38      	bgt.n	8007dc8 <_printf_float+0x2e4>
 8007d56:	2301      	movs	r3, #1
 8007d58:	4631      	mov	r1, r6
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	4a19      	ldr	r2, [pc, #100]	@ (8007dc4 <_printf_float+0x2e0>)
 8007d5e:	47b8      	blx	r7
 8007d60:	3001      	adds	r0, #1
 8007d62:	f43f af1a 	beq.w	8007b9a <_printf_float+0xb6>
 8007d66:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007d6a:	ea59 0303 	orrs.w	r3, r9, r3
 8007d6e:	d102      	bne.n	8007d76 <_printf_float+0x292>
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	07d9      	lsls	r1, r3, #31
 8007d74:	d5d7      	bpl.n	8007d26 <_printf_float+0x242>
 8007d76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	47b8      	blx	r7
 8007d80:	3001      	adds	r0, #1
 8007d82:	f43f af0a 	beq.w	8007b9a <_printf_float+0xb6>
 8007d86:	f04f 0a00 	mov.w	sl, #0
 8007d8a:	f104 0b1a 	add.w	fp, r4, #26
 8007d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d90:	425b      	negs	r3, r3
 8007d92:	4553      	cmp	r3, sl
 8007d94:	dc01      	bgt.n	8007d9a <_printf_float+0x2b6>
 8007d96:	464b      	mov	r3, r9
 8007d98:	e793      	b.n	8007cc2 <_printf_float+0x1de>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	465a      	mov	r2, fp
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b8      	blx	r7
 8007da4:	3001      	adds	r0, #1
 8007da6:	f43f aef8 	beq.w	8007b9a <_printf_float+0xb6>
 8007daa:	f10a 0a01 	add.w	sl, sl, #1
 8007dae:	e7ee      	b.n	8007d8e <_printf_float+0x2aa>
 8007db0:	7fefffff 	.word	0x7fefffff
 8007db4:	0800aed6 	.word	0x0800aed6
 8007db8:	0800aed2 	.word	0x0800aed2
 8007dbc:	0800aede 	.word	0x0800aede
 8007dc0:	0800aeda 	.word	0x0800aeda
 8007dc4:	0800aee2 	.word	0x0800aee2
 8007dc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007dca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007dce:	4553      	cmp	r3, sl
 8007dd0:	bfa8      	it	ge
 8007dd2:	4653      	movge	r3, sl
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	4699      	mov	r9, r3
 8007dd8:	dc36      	bgt.n	8007e48 <_printf_float+0x364>
 8007dda:	f04f 0b00 	mov.w	fp, #0
 8007dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007de2:	f104 021a 	add.w	r2, r4, #26
 8007de6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007de8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dea:	eba3 0309 	sub.w	r3, r3, r9
 8007dee:	455b      	cmp	r3, fp
 8007df0:	dc31      	bgt.n	8007e56 <_printf_float+0x372>
 8007df2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007df4:	459a      	cmp	sl, r3
 8007df6:	dc3a      	bgt.n	8007e6e <_printf_float+0x38a>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	07da      	lsls	r2, r3, #31
 8007dfc:	d437      	bmi.n	8007e6e <_printf_float+0x38a>
 8007dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e00:	ebaa 0903 	sub.w	r9, sl, r3
 8007e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e06:	ebaa 0303 	sub.w	r3, sl, r3
 8007e0a:	4599      	cmp	r9, r3
 8007e0c:	bfa8      	it	ge
 8007e0e:	4699      	movge	r9, r3
 8007e10:	f1b9 0f00 	cmp.w	r9, #0
 8007e14:	dc33      	bgt.n	8007e7e <_printf_float+0x39a>
 8007e16:	f04f 0800 	mov.w	r8, #0
 8007e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e1e:	f104 0b1a 	add.w	fp, r4, #26
 8007e22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e24:	ebaa 0303 	sub.w	r3, sl, r3
 8007e28:	eba3 0309 	sub.w	r3, r3, r9
 8007e2c:	4543      	cmp	r3, r8
 8007e2e:	f77f af7a 	ble.w	8007d26 <_printf_float+0x242>
 8007e32:	2301      	movs	r3, #1
 8007e34:	465a      	mov	r2, fp
 8007e36:	4631      	mov	r1, r6
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b8      	blx	r7
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	f43f aeac 	beq.w	8007b9a <_printf_float+0xb6>
 8007e42:	f108 0801 	add.w	r8, r8, #1
 8007e46:	e7ec      	b.n	8007e22 <_printf_float+0x33e>
 8007e48:	4642      	mov	r2, r8
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b8      	blx	r7
 8007e50:	3001      	adds	r0, #1
 8007e52:	d1c2      	bne.n	8007dda <_printf_float+0x2f6>
 8007e54:	e6a1      	b.n	8007b9a <_printf_float+0xb6>
 8007e56:	2301      	movs	r3, #1
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	920a      	str	r2, [sp, #40]	@ 0x28
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	f43f ae9a 	beq.w	8007b9a <_printf_float+0xb6>
 8007e66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e68:	f10b 0b01 	add.w	fp, fp, #1
 8007e6c:	e7bb      	b.n	8007de6 <_printf_float+0x302>
 8007e6e:	4631      	mov	r1, r6
 8007e70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e74:	4628      	mov	r0, r5
 8007e76:	47b8      	blx	r7
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d1c0      	bne.n	8007dfe <_printf_float+0x31a>
 8007e7c:	e68d      	b.n	8007b9a <_printf_float+0xb6>
 8007e7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e80:	464b      	mov	r3, r9
 8007e82:	4631      	mov	r1, r6
 8007e84:	4628      	mov	r0, r5
 8007e86:	4442      	add	r2, r8
 8007e88:	47b8      	blx	r7
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	d1c3      	bne.n	8007e16 <_printf_float+0x332>
 8007e8e:	e684      	b.n	8007b9a <_printf_float+0xb6>
 8007e90:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007e94:	f1ba 0f01 	cmp.w	sl, #1
 8007e98:	dc01      	bgt.n	8007e9e <_printf_float+0x3ba>
 8007e9a:	07db      	lsls	r3, r3, #31
 8007e9c:	d536      	bpl.n	8007f0c <_printf_float+0x428>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	47b8      	blx	r7
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	f43f ae76 	beq.w	8007b9a <_printf_float+0xb6>
 8007eae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b8      	blx	r7
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f43f ae6e 	beq.w	8007b9a <_printf_float+0xb6>
 8007ebe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007eca:	f7f8 fd6d 	bl	80009a8 <__aeabi_dcmpeq>
 8007ece:	b9c0      	cbnz	r0, 8007f02 <_printf_float+0x41e>
 8007ed0:	4653      	mov	r3, sl
 8007ed2:	f108 0201 	add.w	r2, r8, #1
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	4628      	mov	r0, r5
 8007eda:	47b8      	blx	r7
 8007edc:	3001      	adds	r0, #1
 8007ede:	d10c      	bne.n	8007efa <_printf_float+0x416>
 8007ee0:	e65b      	b.n	8007b9a <_printf_float+0xb6>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	465a      	mov	r2, fp
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4628      	mov	r0, r5
 8007eea:	47b8      	blx	r7
 8007eec:	3001      	adds	r0, #1
 8007eee:	f43f ae54 	beq.w	8007b9a <_printf_float+0xb6>
 8007ef2:	f108 0801 	add.w	r8, r8, #1
 8007ef6:	45d0      	cmp	r8, sl
 8007ef8:	dbf3      	blt.n	8007ee2 <_printf_float+0x3fe>
 8007efa:	464b      	mov	r3, r9
 8007efc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f00:	e6e0      	b.n	8007cc4 <_printf_float+0x1e0>
 8007f02:	f04f 0800 	mov.w	r8, #0
 8007f06:	f104 0b1a 	add.w	fp, r4, #26
 8007f0a:	e7f4      	b.n	8007ef6 <_printf_float+0x412>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	4642      	mov	r2, r8
 8007f10:	e7e1      	b.n	8007ed6 <_printf_float+0x3f2>
 8007f12:	2301      	movs	r3, #1
 8007f14:	464a      	mov	r2, r9
 8007f16:	4631      	mov	r1, r6
 8007f18:	4628      	mov	r0, r5
 8007f1a:	47b8      	blx	r7
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	f43f ae3c 	beq.w	8007b9a <_printf_float+0xb6>
 8007f22:	f108 0801 	add.w	r8, r8, #1
 8007f26:	68e3      	ldr	r3, [r4, #12]
 8007f28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007f2a:	1a5b      	subs	r3, r3, r1
 8007f2c:	4543      	cmp	r3, r8
 8007f2e:	dcf0      	bgt.n	8007f12 <_printf_float+0x42e>
 8007f30:	e6fd      	b.n	8007d2e <_printf_float+0x24a>
 8007f32:	f04f 0800 	mov.w	r8, #0
 8007f36:	f104 0919 	add.w	r9, r4, #25
 8007f3a:	e7f4      	b.n	8007f26 <_printf_float+0x442>

08007f3c <_printf_common>:
 8007f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f40:	4616      	mov	r6, r2
 8007f42:	4698      	mov	r8, r3
 8007f44:	688a      	ldr	r2, [r1, #8]
 8007f46:	690b      	ldr	r3, [r1, #16]
 8007f48:	4607      	mov	r7, r0
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	bfb8      	it	lt
 8007f4e:	4613      	movlt	r3, r2
 8007f50:	6033      	str	r3, [r6, #0]
 8007f52:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f56:	460c      	mov	r4, r1
 8007f58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f5c:	b10a      	cbz	r2, 8007f62 <_printf_common+0x26>
 8007f5e:	3301      	adds	r3, #1
 8007f60:	6033      	str	r3, [r6, #0]
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	0699      	lsls	r1, r3, #26
 8007f66:	bf42      	ittt	mi
 8007f68:	6833      	ldrmi	r3, [r6, #0]
 8007f6a:	3302      	addmi	r3, #2
 8007f6c:	6033      	strmi	r3, [r6, #0]
 8007f6e:	6825      	ldr	r5, [r4, #0]
 8007f70:	f015 0506 	ands.w	r5, r5, #6
 8007f74:	d106      	bne.n	8007f84 <_printf_common+0x48>
 8007f76:	f104 0a19 	add.w	sl, r4, #25
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	6832      	ldr	r2, [r6, #0]
 8007f7e:	1a9b      	subs	r3, r3, r2
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	dc2b      	bgt.n	8007fdc <_printf_common+0xa0>
 8007f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f88:	6822      	ldr	r2, [r4, #0]
 8007f8a:	3b00      	subs	r3, #0
 8007f8c:	bf18      	it	ne
 8007f8e:	2301      	movne	r3, #1
 8007f90:	0692      	lsls	r2, r2, #26
 8007f92:	d430      	bmi.n	8007ff6 <_printf_common+0xba>
 8007f94:	4641      	mov	r1, r8
 8007f96:	4638      	mov	r0, r7
 8007f98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f9c:	47c8      	blx	r9
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	d023      	beq.n	8007fea <_printf_common+0xae>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	6922      	ldr	r2, [r4, #16]
 8007fa6:	f003 0306 	and.w	r3, r3, #6
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	bf14      	ite	ne
 8007fae:	2500      	movne	r5, #0
 8007fb0:	6833      	ldreq	r3, [r6, #0]
 8007fb2:	f04f 0600 	mov.w	r6, #0
 8007fb6:	bf08      	it	eq
 8007fb8:	68e5      	ldreq	r5, [r4, #12]
 8007fba:	f104 041a 	add.w	r4, r4, #26
 8007fbe:	bf08      	it	eq
 8007fc0:	1aed      	subeq	r5, r5, r3
 8007fc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007fc6:	bf08      	it	eq
 8007fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	bfc4      	itt	gt
 8007fd0:	1a9b      	subgt	r3, r3, r2
 8007fd2:	18ed      	addgt	r5, r5, r3
 8007fd4:	42b5      	cmp	r5, r6
 8007fd6:	d11a      	bne.n	800800e <_printf_common+0xd2>
 8007fd8:	2000      	movs	r0, #0
 8007fda:	e008      	b.n	8007fee <_printf_common+0xb2>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	4652      	mov	r2, sl
 8007fe0:	4641      	mov	r1, r8
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	47c8      	blx	r9
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	d103      	bne.n	8007ff2 <_printf_common+0xb6>
 8007fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff2:	3501      	adds	r5, #1
 8007ff4:	e7c1      	b.n	8007f7a <_printf_common+0x3e>
 8007ff6:	2030      	movs	r0, #48	@ 0x30
 8007ff8:	18e1      	adds	r1, r4, r3
 8007ffa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008004:	4422      	add	r2, r4
 8008006:	3302      	adds	r3, #2
 8008008:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800800c:	e7c2      	b.n	8007f94 <_printf_common+0x58>
 800800e:	2301      	movs	r3, #1
 8008010:	4622      	mov	r2, r4
 8008012:	4641      	mov	r1, r8
 8008014:	4638      	mov	r0, r7
 8008016:	47c8      	blx	r9
 8008018:	3001      	adds	r0, #1
 800801a:	d0e6      	beq.n	8007fea <_printf_common+0xae>
 800801c:	3601      	adds	r6, #1
 800801e:	e7d9      	b.n	8007fd4 <_printf_common+0x98>

08008020 <_printf_i>:
 8008020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008024:	7e0f      	ldrb	r7, [r1, #24]
 8008026:	4691      	mov	r9, r2
 8008028:	2f78      	cmp	r7, #120	@ 0x78
 800802a:	4680      	mov	r8, r0
 800802c:	460c      	mov	r4, r1
 800802e:	469a      	mov	sl, r3
 8008030:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008032:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008036:	d807      	bhi.n	8008048 <_printf_i+0x28>
 8008038:	2f62      	cmp	r7, #98	@ 0x62
 800803a:	d80a      	bhi.n	8008052 <_printf_i+0x32>
 800803c:	2f00      	cmp	r7, #0
 800803e:	f000 80d1 	beq.w	80081e4 <_printf_i+0x1c4>
 8008042:	2f58      	cmp	r7, #88	@ 0x58
 8008044:	f000 80b8 	beq.w	80081b8 <_printf_i+0x198>
 8008048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800804c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008050:	e03a      	b.n	80080c8 <_printf_i+0xa8>
 8008052:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008056:	2b15      	cmp	r3, #21
 8008058:	d8f6      	bhi.n	8008048 <_printf_i+0x28>
 800805a:	a101      	add	r1, pc, #4	@ (adr r1, 8008060 <_printf_i+0x40>)
 800805c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008060:	080080b9 	.word	0x080080b9
 8008064:	080080cd 	.word	0x080080cd
 8008068:	08008049 	.word	0x08008049
 800806c:	08008049 	.word	0x08008049
 8008070:	08008049 	.word	0x08008049
 8008074:	08008049 	.word	0x08008049
 8008078:	080080cd 	.word	0x080080cd
 800807c:	08008049 	.word	0x08008049
 8008080:	08008049 	.word	0x08008049
 8008084:	08008049 	.word	0x08008049
 8008088:	08008049 	.word	0x08008049
 800808c:	080081cb 	.word	0x080081cb
 8008090:	080080f7 	.word	0x080080f7
 8008094:	08008185 	.word	0x08008185
 8008098:	08008049 	.word	0x08008049
 800809c:	08008049 	.word	0x08008049
 80080a0:	080081ed 	.word	0x080081ed
 80080a4:	08008049 	.word	0x08008049
 80080a8:	080080f7 	.word	0x080080f7
 80080ac:	08008049 	.word	0x08008049
 80080b0:	08008049 	.word	0x08008049
 80080b4:	0800818d 	.word	0x0800818d
 80080b8:	6833      	ldr	r3, [r6, #0]
 80080ba:	1d1a      	adds	r2, r3, #4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6032      	str	r2, [r6, #0]
 80080c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080c8:	2301      	movs	r3, #1
 80080ca:	e09c      	b.n	8008206 <_printf_i+0x1e6>
 80080cc:	6833      	ldr	r3, [r6, #0]
 80080ce:	6820      	ldr	r0, [r4, #0]
 80080d0:	1d19      	adds	r1, r3, #4
 80080d2:	6031      	str	r1, [r6, #0]
 80080d4:	0606      	lsls	r6, r0, #24
 80080d6:	d501      	bpl.n	80080dc <_printf_i+0xbc>
 80080d8:	681d      	ldr	r5, [r3, #0]
 80080da:	e003      	b.n	80080e4 <_printf_i+0xc4>
 80080dc:	0645      	lsls	r5, r0, #25
 80080de:	d5fb      	bpl.n	80080d8 <_printf_i+0xb8>
 80080e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080e4:	2d00      	cmp	r5, #0
 80080e6:	da03      	bge.n	80080f0 <_printf_i+0xd0>
 80080e8:	232d      	movs	r3, #45	@ 0x2d
 80080ea:	426d      	negs	r5, r5
 80080ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080f0:	230a      	movs	r3, #10
 80080f2:	4858      	ldr	r0, [pc, #352]	@ (8008254 <_printf_i+0x234>)
 80080f4:	e011      	b.n	800811a <_printf_i+0xfa>
 80080f6:	6821      	ldr	r1, [r4, #0]
 80080f8:	6833      	ldr	r3, [r6, #0]
 80080fa:	0608      	lsls	r0, r1, #24
 80080fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008100:	d402      	bmi.n	8008108 <_printf_i+0xe8>
 8008102:	0649      	lsls	r1, r1, #25
 8008104:	bf48      	it	mi
 8008106:	b2ad      	uxthmi	r5, r5
 8008108:	2f6f      	cmp	r7, #111	@ 0x6f
 800810a:	6033      	str	r3, [r6, #0]
 800810c:	bf14      	ite	ne
 800810e:	230a      	movne	r3, #10
 8008110:	2308      	moveq	r3, #8
 8008112:	4850      	ldr	r0, [pc, #320]	@ (8008254 <_printf_i+0x234>)
 8008114:	2100      	movs	r1, #0
 8008116:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800811a:	6866      	ldr	r6, [r4, #4]
 800811c:	2e00      	cmp	r6, #0
 800811e:	60a6      	str	r6, [r4, #8]
 8008120:	db05      	blt.n	800812e <_printf_i+0x10e>
 8008122:	6821      	ldr	r1, [r4, #0]
 8008124:	432e      	orrs	r6, r5
 8008126:	f021 0104 	bic.w	r1, r1, #4
 800812a:	6021      	str	r1, [r4, #0]
 800812c:	d04b      	beq.n	80081c6 <_printf_i+0x1a6>
 800812e:	4616      	mov	r6, r2
 8008130:	fbb5 f1f3 	udiv	r1, r5, r3
 8008134:	fb03 5711 	mls	r7, r3, r1, r5
 8008138:	5dc7      	ldrb	r7, [r0, r7]
 800813a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800813e:	462f      	mov	r7, r5
 8008140:	42bb      	cmp	r3, r7
 8008142:	460d      	mov	r5, r1
 8008144:	d9f4      	bls.n	8008130 <_printf_i+0x110>
 8008146:	2b08      	cmp	r3, #8
 8008148:	d10b      	bne.n	8008162 <_printf_i+0x142>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	07df      	lsls	r7, r3, #31
 800814e:	d508      	bpl.n	8008162 <_printf_i+0x142>
 8008150:	6923      	ldr	r3, [r4, #16]
 8008152:	6861      	ldr	r1, [r4, #4]
 8008154:	4299      	cmp	r1, r3
 8008156:	bfde      	ittt	le
 8008158:	2330      	movle	r3, #48	@ 0x30
 800815a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800815e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008162:	1b92      	subs	r2, r2, r6
 8008164:	6122      	str	r2, [r4, #16]
 8008166:	464b      	mov	r3, r9
 8008168:	4621      	mov	r1, r4
 800816a:	4640      	mov	r0, r8
 800816c:	f8cd a000 	str.w	sl, [sp]
 8008170:	aa03      	add	r2, sp, #12
 8008172:	f7ff fee3 	bl	8007f3c <_printf_common>
 8008176:	3001      	adds	r0, #1
 8008178:	d14a      	bne.n	8008210 <_printf_i+0x1f0>
 800817a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800817e:	b004      	add	sp, #16
 8008180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	f043 0320 	orr.w	r3, r3, #32
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	2778      	movs	r7, #120	@ 0x78
 800818e:	4832      	ldr	r0, [pc, #200]	@ (8008258 <_printf_i+0x238>)
 8008190:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	6831      	ldr	r1, [r6, #0]
 8008198:	061f      	lsls	r7, r3, #24
 800819a:	f851 5b04 	ldr.w	r5, [r1], #4
 800819e:	d402      	bmi.n	80081a6 <_printf_i+0x186>
 80081a0:	065f      	lsls	r7, r3, #25
 80081a2:	bf48      	it	mi
 80081a4:	b2ad      	uxthmi	r5, r5
 80081a6:	6031      	str	r1, [r6, #0]
 80081a8:	07d9      	lsls	r1, r3, #31
 80081aa:	bf44      	itt	mi
 80081ac:	f043 0320 	orrmi.w	r3, r3, #32
 80081b0:	6023      	strmi	r3, [r4, #0]
 80081b2:	b11d      	cbz	r5, 80081bc <_printf_i+0x19c>
 80081b4:	2310      	movs	r3, #16
 80081b6:	e7ad      	b.n	8008114 <_printf_i+0xf4>
 80081b8:	4826      	ldr	r0, [pc, #152]	@ (8008254 <_printf_i+0x234>)
 80081ba:	e7e9      	b.n	8008190 <_printf_i+0x170>
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	f023 0320 	bic.w	r3, r3, #32
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	e7f6      	b.n	80081b4 <_printf_i+0x194>
 80081c6:	4616      	mov	r6, r2
 80081c8:	e7bd      	b.n	8008146 <_printf_i+0x126>
 80081ca:	6833      	ldr	r3, [r6, #0]
 80081cc:	6825      	ldr	r5, [r4, #0]
 80081ce:	1d18      	adds	r0, r3, #4
 80081d0:	6961      	ldr	r1, [r4, #20]
 80081d2:	6030      	str	r0, [r6, #0]
 80081d4:	062e      	lsls	r6, r5, #24
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	d501      	bpl.n	80081de <_printf_i+0x1be>
 80081da:	6019      	str	r1, [r3, #0]
 80081dc:	e002      	b.n	80081e4 <_printf_i+0x1c4>
 80081de:	0668      	lsls	r0, r5, #25
 80081e0:	d5fb      	bpl.n	80081da <_printf_i+0x1ba>
 80081e2:	8019      	strh	r1, [r3, #0]
 80081e4:	2300      	movs	r3, #0
 80081e6:	4616      	mov	r6, r2
 80081e8:	6123      	str	r3, [r4, #16]
 80081ea:	e7bc      	b.n	8008166 <_printf_i+0x146>
 80081ec:	6833      	ldr	r3, [r6, #0]
 80081ee:	2100      	movs	r1, #0
 80081f0:	1d1a      	adds	r2, r3, #4
 80081f2:	6032      	str	r2, [r6, #0]
 80081f4:	681e      	ldr	r6, [r3, #0]
 80081f6:	6862      	ldr	r2, [r4, #4]
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 f9d6 	bl	80085aa <memchr>
 80081fe:	b108      	cbz	r0, 8008204 <_printf_i+0x1e4>
 8008200:	1b80      	subs	r0, r0, r6
 8008202:	6060      	str	r0, [r4, #4]
 8008204:	6863      	ldr	r3, [r4, #4]
 8008206:	6123      	str	r3, [r4, #16]
 8008208:	2300      	movs	r3, #0
 800820a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800820e:	e7aa      	b.n	8008166 <_printf_i+0x146>
 8008210:	4632      	mov	r2, r6
 8008212:	4649      	mov	r1, r9
 8008214:	4640      	mov	r0, r8
 8008216:	6923      	ldr	r3, [r4, #16]
 8008218:	47d0      	blx	sl
 800821a:	3001      	adds	r0, #1
 800821c:	d0ad      	beq.n	800817a <_printf_i+0x15a>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	079b      	lsls	r3, r3, #30
 8008222:	d413      	bmi.n	800824c <_printf_i+0x22c>
 8008224:	68e0      	ldr	r0, [r4, #12]
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	4298      	cmp	r0, r3
 800822a:	bfb8      	it	lt
 800822c:	4618      	movlt	r0, r3
 800822e:	e7a6      	b.n	800817e <_printf_i+0x15e>
 8008230:	2301      	movs	r3, #1
 8008232:	4632      	mov	r2, r6
 8008234:	4649      	mov	r1, r9
 8008236:	4640      	mov	r0, r8
 8008238:	47d0      	blx	sl
 800823a:	3001      	adds	r0, #1
 800823c:	d09d      	beq.n	800817a <_printf_i+0x15a>
 800823e:	3501      	adds	r5, #1
 8008240:	68e3      	ldr	r3, [r4, #12]
 8008242:	9903      	ldr	r1, [sp, #12]
 8008244:	1a5b      	subs	r3, r3, r1
 8008246:	42ab      	cmp	r3, r5
 8008248:	dcf2      	bgt.n	8008230 <_printf_i+0x210>
 800824a:	e7eb      	b.n	8008224 <_printf_i+0x204>
 800824c:	2500      	movs	r5, #0
 800824e:	f104 0619 	add.w	r6, r4, #25
 8008252:	e7f5      	b.n	8008240 <_printf_i+0x220>
 8008254:	0800aee4 	.word	0x0800aee4
 8008258:	0800aef5 	.word	0x0800aef5

0800825c <std>:
 800825c:	2300      	movs	r3, #0
 800825e:	b510      	push	{r4, lr}
 8008260:	4604      	mov	r4, r0
 8008262:	e9c0 3300 	strd	r3, r3, [r0]
 8008266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800826a:	6083      	str	r3, [r0, #8]
 800826c:	8181      	strh	r1, [r0, #12]
 800826e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008270:	81c2      	strh	r2, [r0, #14]
 8008272:	6183      	str	r3, [r0, #24]
 8008274:	4619      	mov	r1, r3
 8008276:	2208      	movs	r2, #8
 8008278:	305c      	adds	r0, #92	@ 0x5c
 800827a:	f000 f916 	bl	80084aa <memset>
 800827e:	4b0d      	ldr	r3, [pc, #52]	@ (80082b4 <std+0x58>)
 8008280:	6224      	str	r4, [r4, #32]
 8008282:	6263      	str	r3, [r4, #36]	@ 0x24
 8008284:	4b0c      	ldr	r3, [pc, #48]	@ (80082b8 <std+0x5c>)
 8008286:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008288:	4b0c      	ldr	r3, [pc, #48]	@ (80082bc <std+0x60>)
 800828a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800828c:	4b0c      	ldr	r3, [pc, #48]	@ (80082c0 <std+0x64>)
 800828e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008290:	4b0c      	ldr	r3, [pc, #48]	@ (80082c4 <std+0x68>)
 8008292:	429c      	cmp	r4, r3
 8008294:	d006      	beq.n	80082a4 <std+0x48>
 8008296:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800829a:	4294      	cmp	r4, r2
 800829c:	d002      	beq.n	80082a4 <std+0x48>
 800829e:	33d0      	adds	r3, #208	@ 0xd0
 80082a0:	429c      	cmp	r4, r3
 80082a2:	d105      	bne.n	80082b0 <std+0x54>
 80082a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ac:	f000 b97a 	b.w	80085a4 <__retarget_lock_init_recursive>
 80082b0:	bd10      	pop	{r4, pc}
 80082b2:	bf00      	nop
 80082b4:	08008425 	.word	0x08008425
 80082b8:	08008447 	.word	0x08008447
 80082bc:	0800847f 	.word	0x0800847f
 80082c0:	080084a3 	.word	0x080084a3
 80082c4:	200008c0 	.word	0x200008c0

080082c8 <stdio_exit_handler>:
 80082c8:	4a02      	ldr	r2, [pc, #8]	@ (80082d4 <stdio_exit_handler+0xc>)
 80082ca:	4903      	ldr	r1, [pc, #12]	@ (80082d8 <stdio_exit_handler+0x10>)
 80082cc:	4803      	ldr	r0, [pc, #12]	@ (80082dc <stdio_exit_handler+0x14>)
 80082ce:	f000 b869 	b.w	80083a4 <_fwalk_sglue>
 80082d2:	bf00      	nop
 80082d4:	20000030 	.word	0x20000030
 80082d8:	08009f21 	.word	0x08009f21
 80082dc:	20000040 	.word	0x20000040

080082e0 <cleanup_stdio>:
 80082e0:	6841      	ldr	r1, [r0, #4]
 80082e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008314 <cleanup_stdio+0x34>)
 80082e4:	b510      	push	{r4, lr}
 80082e6:	4299      	cmp	r1, r3
 80082e8:	4604      	mov	r4, r0
 80082ea:	d001      	beq.n	80082f0 <cleanup_stdio+0x10>
 80082ec:	f001 fe18 	bl	8009f20 <_fflush_r>
 80082f0:	68a1      	ldr	r1, [r4, #8]
 80082f2:	4b09      	ldr	r3, [pc, #36]	@ (8008318 <cleanup_stdio+0x38>)
 80082f4:	4299      	cmp	r1, r3
 80082f6:	d002      	beq.n	80082fe <cleanup_stdio+0x1e>
 80082f8:	4620      	mov	r0, r4
 80082fa:	f001 fe11 	bl	8009f20 <_fflush_r>
 80082fe:	68e1      	ldr	r1, [r4, #12]
 8008300:	4b06      	ldr	r3, [pc, #24]	@ (800831c <cleanup_stdio+0x3c>)
 8008302:	4299      	cmp	r1, r3
 8008304:	d004      	beq.n	8008310 <cleanup_stdio+0x30>
 8008306:	4620      	mov	r0, r4
 8008308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800830c:	f001 be08 	b.w	8009f20 <_fflush_r>
 8008310:	bd10      	pop	{r4, pc}
 8008312:	bf00      	nop
 8008314:	200008c0 	.word	0x200008c0
 8008318:	20000928 	.word	0x20000928
 800831c:	20000990 	.word	0x20000990

08008320 <global_stdio_init.part.0>:
 8008320:	b510      	push	{r4, lr}
 8008322:	4b0b      	ldr	r3, [pc, #44]	@ (8008350 <global_stdio_init.part.0+0x30>)
 8008324:	4c0b      	ldr	r4, [pc, #44]	@ (8008354 <global_stdio_init.part.0+0x34>)
 8008326:	4a0c      	ldr	r2, [pc, #48]	@ (8008358 <global_stdio_init.part.0+0x38>)
 8008328:	4620      	mov	r0, r4
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	2104      	movs	r1, #4
 800832e:	2200      	movs	r2, #0
 8008330:	f7ff ff94 	bl	800825c <std>
 8008334:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008338:	2201      	movs	r2, #1
 800833a:	2109      	movs	r1, #9
 800833c:	f7ff ff8e 	bl	800825c <std>
 8008340:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008344:	2202      	movs	r2, #2
 8008346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800834a:	2112      	movs	r1, #18
 800834c:	f7ff bf86 	b.w	800825c <std>
 8008350:	200009f8 	.word	0x200009f8
 8008354:	200008c0 	.word	0x200008c0
 8008358:	080082c9 	.word	0x080082c9

0800835c <__sfp_lock_acquire>:
 800835c:	4801      	ldr	r0, [pc, #4]	@ (8008364 <__sfp_lock_acquire+0x8>)
 800835e:	f000 b922 	b.w	80085a6 <__retarget_lock_acquire_recursive>
 8008362:	bf00      	nop
 8008364:	20000a01 	.word	0x20000a01

08008368 <__sfp_lock_release>:
 8008368:	4801      	ldr	r0, [pc, #4]	@ (8008370 <__sfp_lock_release+0x8>)
 800836a:	f000 b91d 	b.w	80085a8 <__retarget_lock_release_recursive>
 800836e:	bf00      	nop
 8008370:	20000a01 	.word	0x20000a01

08008374 <__sinit>:
 8008374:	b510      	push	{r4, lr}
 8008376:	4604      	mov	r4, r0
 8008378:	f7ff fff0 	bl	800835c <__sfp_lock_acquire>
 800837c:	6a23      	ldr	r3, [r4, #32]
 800837e:	b11b      	cbz	r3, 8008388 <__sinit+0x14>
 8008380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008384:	f7ff bff0 	b.w	8008368 <__sfp_lock_release>
 8008388:	4b04      	ldr	r3, [pc, #16]	@ (800839c <__sinit+0x28>)
 800838a:	6223      	str	r3, [r4, #32]
 800838c:	4b04      	ldr	r3, [pc, #16]	@ (80083a0 <__sinit+0x2c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1f5      	bne.n	8008380 <__sinit+0xc>
 8008394:	f7ff ffc4 	bl	8008320 <global_stdio_init.part.0>
 8008398:	e7f2      	b.n	8008380 <__sinit+0xc>
 800839a:	bf00      	nop
 800839c:	080082e1 	.word	0x080082e1
 80083a0:	200009f8 	.word	0x200009f8

080083a4 <_fwalk_sglue>:
 80083a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a8:	4607      	mov	r7, r0
 80083aa:	4688      	mov	r8, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	2600      	movs	r6, #0
 80083b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083b4:	f1b9 0901 	subs.w	r9, r9, #1
 80083b8:	d505      	bpl.n	80083c6 <_fwalk_sglue+0x22>
 80083ba:	6824      	ldr	r4, [r4, #0]
 80083bc:	2c00      	cmp	r4, #0
 80083be:	d1f7      	bne.n	80083b0 <_fwalk_sglue+0xc>
 80083c0:	4630      	mov	r0, r6
 80083c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083c6:	89ab      	ldrh	r3, [r5, #12]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d907      	bls.n	80083dc <_fwalk_sglue+0x38>
 80083cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083d0:	3301      	adds	r3, #1
 80083d2:	d003      	beq.n	80083dc <_fwalk_sglue+0x38>
 80083d4:	4629      	mov	r1, r5
 80083d6:	4638      	mov	r0, r7
 80083d8:	47c0      	blx	r8
 80083da:	4306      	orrs	r6, r0
 80083dc:	3568      	adds	r5, #104	@ 0x68
 80083de:	e7e9      	b.n	80083b4 <_fwalk_sglue+0x10>

080083e0 <siprintf>:
 80083e0:	b40e      	push	{r1, r2, r3}
 80083e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083e6:	b510      	push	{r4, lr}
 80083e8:	2400      	movs	r4, #0
 80083ea:	b09d      	sub	sp, #116	@ 0x74
 80083ec:	ab1f      	add	r3, sp, #124	@ 0x7c
 80083ee:	9002      	str	r0, [sp, #8]
 80083f0:	9006      	str	r0, [sp, #24]
 80083f2:	9107      	str	r1, [sp, #28]
 80083f4:	9104      	str	r1, [sp, #16]
 80083f6:	4809      	ldr	r0, [pc, #36]	@ (800841c <siprintf+0x3c>)
 80083f8:	4909      	ldr	r1, [pc, #36]	@ (8008420 <siprintf+0x40>)
 80083fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fe:	9105      	str	r1, [sp, #20]
 8008400:	6800      	ldr	r0, [r0, #0]
 8008402:	a902      	add	r1, sp, #8
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008408:	f001 fc0e 	bl	8009c28 <_svfiprintf_r>
 800840c:	9b02      	ldr	r3, [sp, #8]
 800840e:	701c      	strb	r4, [r3, #0]
 8008410:	b01d      	add	sp, #116	@ 0x74
 8008412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008416:	b003      	add	sp, #12
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	2000003c 	.word	0x2000003c
 8008420:	ffff0208 	.word	0xffff0208

08008424 <__sread>:
 8008424:	b510      	push	{r4, lr}
 8008426:	460c      	mov	r4, r1
 8008428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800842c:	f000 f86c 	bl	8008508 <_read_r>
 8008430:	2800      	cmp	r0, #0
 8008432:	bfab      	itete	ge
 8008434:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008436:	89a3      	ldrhlt	r3, [r4, #12]
 8008438:	181b      	addge	r3, r3, r0
 800843a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800843e:	bfac      	ite	ge
 8008440:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008442:	81a3      	strhlt	r3, [r4, #12]
 8008444:	bd10      	pop	{r4, pc}

08008446 <__swrite>:
 8008446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800844a:	461f      	mov	r7, r3
 800844c:	898b      	ldrh	r3, [r1, #12]
 800844e:	4605      	mov	r5, r0
 8008450:	05db      	lsls	r3, r3, #23
 8008452:	460c      	mov	r4, r1
 8008454:	4616      	mov	r6, r2
 8008456:	d505      	bpl.n	8008464 <__swrite+0x1e>
 8008458:	2302      	movs	r3, #2
 800845a:	2200      	movs	r2, #0
 800845c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008460:	f000 f840 	bl	80084e4 <_lseek_r>
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	4632      	mov	r2, r6
 8008468:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	4628      	mov	r0, r5
 8008470:	463b      	mov	r3, r7
 8008472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800847a:	f000 b857 	b.w	800852c <_write_r>

0800847e <__sseek>:
 800847e:	b510      	push	{r4, lr}
 8008480:	460c      	mov	r4, r1
 8008482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008486:	f000 f82d 	bl	80084e4 <_lseek_r>
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	bf15      	itete	ne
 8008490:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008492:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008496:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800849a:	81a3      	strheq	r3, [r4, #12]
 800849c:	bf18      	it	ne
 800849e:	81a3      	strhne	r3, [r4, #12]
 80084a0:	bd10      	pop	{r4, pc}

080084a2 <__sclose>:
 80084a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a6:	f000 b80d 	b.w	80084c4 <_close_r>

080084aa <memset>:
 80084aa:	4603      	mov	r3, r0
 80084ac:	4402      	add	r2, r0
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d100      	bne.n	80084b4 <memset+0xa>
 80084b2:	4770      	bx	lr
 80084b4:	f803 1b01 	strb.w	r1, [r3], #1
 80084b8:	e7f9      	b.n	80084ae <memset+0x4>
	...

080084bc <_localeconv_r>:
 80084bc:	4800      	ldr	r0, [pc, #0]	@ (80084c0 <_localeconv_r+0x4>)
 80084be:	4770      	bx	lr
 80084c0:	2000017c 	.word	0x2000017c

080084c4 <_close_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	2300      	movs	r3, #0
 80084c8:	4d05      	ldr	r5, [pc, #20]	@ (80084e0 <_close_r+0x1c>)
 80084ca:	4604      	mov	r4, r0
 80084cc:	4608      	mov	r0, r1
 80084ce:	602b      	str	r3, [r5, #0]
 80084d0:	f7fa fd43 	bl	8002f5a <_close>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_close_r+0x1a>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	b103      	cbz	r3, 80084de <_close_r+0x1a>
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	200009fc 	.word	0x200009fc

080084e4 <_lseek_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4604      	mov	r4, r0
 80084e8:	4608      	mov	r0, r1
 80084ea:	4611      	mov	r1, r2
 80084ec:	2200      	movs	r2, #0
 80084ee:	4d05      	ldr	r5, [pc, #20]	@ (8008504 <_lseek_r+0x20>)
 80084f0:	602a      	str	r2, [r5, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f7fa fd55 	bl	8002fa2 <_lseek>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_lseek_r+0x1e>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_lseek_r+0x1e>
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	200009fc 	.word	0x200009fc

08008508 <_read_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	4611      	mov	r1, r2
 8008510:	2200      	movs	r2, #0
 8008512:	4d05      	ldr	r5, [pc, #20]	@ (8008528 <_read_r+0x20>)
 8008514:	602a      	str	r2, [r5, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	f7fa fce6 	bl	8002ee8 <_read>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	d102      	bne.n	8008526 <_read_r+0x1e>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	b103      	cbz	r3, 8008526 <_read_r+0x1e>
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	bd38      	pop	{r3, r4, r5, pc}
 8008528:	200009fc 	.word	0x200009fc

0800852c <_write_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4604      	mov	r4, r0
 8008530:	4608      	mov	r0, r1
 8008532:	4611      	mov	r1, r2
 8008534:	2200      	movs	r2, #0
 8008536:	4d05      	ldr	r5, [pc, #20]	@ (800854c <_write_r+0x20>)
 8008538:	602a      	str	r2, [r5, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	f7fa fcf1 	bl	8002f22 <_write>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_write_r+0x1e>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_write_r+0x1e>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	200009fc 	.word	0x200009fc

08008550 <__errno>:
 8008550:	4b01      	ldr	r3, [pc, #4]	@ (8008558 <__errno+0x8>)
 8008552:	6818      	ldr	r0, [r3, #0]
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	2000003c 	.word	0x2000003c

0800855c <__libc_init_array>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	2600      	movs	r6, #0
 8008560:	4d0c      	ldr	r5, [pc, #48]	@ (8008594 <__libc_init_array+0x38>)
 8008562:	4c0d      	ldr	r4, [pc, #52]	@ (8008598 <__libc_init_array+0x3c>)
 8008564:	1b64      	subs	r4, r4, r5
 8008566:	10a4      	asrs	r4, r4, #2
 8008568:	42a6      	cmp	r6, r4
 800856a:	d109      	bne.n	8008580 <__libc_init_array+0x24>
 800856c:	f002 f874 	bl	800a658 <_init>
 8008570:	2600      	movs	r6, #0
 8008572:	4d0a      	ldr	r5, [pc, #40]	@ (800859c <__libc_init_array+0x40>)
 8008574:	4c0a      	ldr	r4, [pc, #40]	@ (80085a0 <__libc_init_array+0x44>)
 8008576:	1b64      	subs	r4, r4, r5
 8008578:	10a4      	asrs	r4, r4, #2
 800857a:	42a6      	cmp	r6, r4
 800857c:	d105      	bne.n	800858a <__libc_init_array+0x2e>
 800857e:	bd70      	pop	{r4, r5, r6, pc}
 8008580:	f855 3b04 	ldr.w	r3, [r5], #4
 8008584:	4798      	blx	r3
 8008586:	3601      	adds	r6, #1
 8008588:	e7ee      	b.n	8008568 <__libc_init_array+0xc>
 800858a:	f855 3b04 	ldr.w	r3, [r5], #4
 800858e:	4798      	blx	r3
 8008590:	3601      	adds	r6, #1
 8008592:	e7f2      	b.n	800857a <__libc_init_array+0x1e>
 8008594:	0800b24c 	.word	0x0800b24c
 8008598:	0800b24c 	.word	0x0800b24c
 800859c:	0800b24c 	.word	0x0800b24c
 80085a0:	0800b250 	.word	0x0800b250

080085a4 <__retarget_lock_init_recursive>:
 80085a4:	4770      	bx	lr

080085a6 <__retarget_lock_acquire_recursive>:
 80085a6:	4770      	bx	lr

080085a8 <__retarget_lock_release_recursive>:
 80085a8:	4770      	bx	lr

080085aa <memchr>:
 80085aa:	4603      	mov	r3, r0
 80085ac:	b510      	push	{r4, lr}
 80085ae:	b2c9      	uxtb	r1, r1
 80085b0:	4402      	add	r2, r0
 80085b2:	4293      	cmp	r3, r2
 80085b4:	4618      	mov	r0, r3
 80085b6:	d101      	bne.n	80085bc <memchr+0x12>
 80085b8:	2000      	movs	r0, #0
 80085ba:	e003      	b.n	80085c4 <memchr+0x1a>
 80085bc:	7804      	ldrb	r4, [r0, #0]
 80085be:	3301      	adds	r3, #1
 80085c0:	428c      	cmp	r4, r1
 80085c2:	d1f6      	bne.n	80085b2 <memchr+0x8>
 80085c4:	bd10      	pop	{r4, pc}

080085c6 <quorem>:
 80085c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ca:	6903      	ldr	r3, [r0, #16]
 80085cc:	690c      	ldr	r4, [r1, #16]
 80085ce:	4607      	mov	r7, r0
 80085d0:	42a3      	cmp	r3, r4
 80085d2:	db7e      	blt.n	80086d2 <quorem+0x10c>
 80085d4:	3c01      	subs	r4, #1
 80085d6:	00a3      	lsls	r3, r4, #2
 80085d8:	f100 0514 	add.w	r5, r0, #20
 80085dc:	f101 0814 	add.w	r8, r1, #20
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085f0:	3301      	adds	r3, #1
 80085f2:	429a      	cmp	r2, r3
 80085f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80085f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085fc:	d32e      	bcc.n	800865c <quorem+0x96>
 80085fe:	f04f 0a00 	mov.w	sl, #0
 8008602:	46c4      	mov	ip, r8
 8008604:	46ae      	mov	lr, r5
 8008606:	46d3      	mov	fp, sl
 8008608:	f85c 3b04 	ldr.w	r3, [ip], #4
 800860c:	b298      	uxth	r0, r3
 800860e:	fb06 a000 	mla	r0, r6, r0, sl
 8008612:	0c1b      	lsrs	r3, r3, #16
 8008614:	0c02      	lsrs	r2, r0, #16
 8008616:	fb06 2303 	mla	r3, r6, r3, r2
 800861a:	f8de 2000 	ldr.w	r2, [lr]
 800861e:	b280      	uxth	r0, r0
 8008620:	b292      	uxth	r2, r2
 8008622:	1a12      	subs	r2, r2, r0
 8008624:	445a      	add	r2, fp
 8008626:	f8de 0000 	ldr.w	r0, [lr]
 800862a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800862e:	b29b      	uxth	r3, r3
 8008630:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008634:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008638:	b292      	uxth	r2, r2
 800863a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800863e:	45e1      	cmp	r9, ip
 8008640:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008644:	f84e 2b04 	str.w	r2, [lr], #4
 8008648:	d2de      	bcs.n	8008608 <quorem+0x42>
 800864a:	9b00      	ldr	r3, [sp, #0]
 800864c:	58eb      	ldr	r3, [r5, r3]
 800864e:	b92b      	cbnz	r3, 800865c <quorem+0x96>
 8008650:	9b01      	ldr	r3, [sp, #4]
 8008652:	3b04      	subs	r3, #4
 8008654:	429d      	cmp	r5, r3
 8008656:	461a      	mov	r2, r3
 8008658:	d32f      	bcc.n	80086ba <quorem+0xf4>
 800865a:	613c      	str	r4, [r7, #16]
 800865c:	4638      	mov	r0, r7
 800865e:	f001 f97f 	bl	8009960 <__mcmp>
 8008662:	2800      	cmp	r0, #0
 8008664:	db25      	blt.n	80086b2 <quorem+0xec>
 8008666:	4629      	mov	r1, r5
 8008668:	2000      	movs	r0, #0
 800866a:	f858 2b04 	ldr.w	r2, [r8], #4
 800866e:	f8d1 c000 	ldr.w	ip, [r1]
 8008672:	fa1f fe82 	uxth.w	lr, r2
 8008676:	fa1f f38c 	uxth.w	r3, ip
 800867a:	eba3 030e 	sub.w	r3, r3, lr
 800867e:	4403      	add	r3, r0
 8008680:	0c12      	lsrs	r2, r2, #16
 8008682:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008686:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800868a:	b29b      	uxth	r3, r3
 800868c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008690:	45c1      	cmp	r9, r8
 8008692:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008696:	f841 3b04 	str.w	r3, [r1], #4
 800869a:	d2e6      	bcs.n	800866a <quorem+0xa4>
 800869c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086a4:	b922      	cbnz	r2, 80086b0 <quorem+0xea>
 80086a6:	3b04      	subs	r3, #4
 80086a8:	429d      	cmp	r5, r3
 80086aa:	461a      	mov	r2, r3
 80086ac:	d30b      	bcc.n	80086c6 <quorem+0x100>
 80086ae:	613c      	str	r4, [r7, #16]
 80086b0:	3601      	adds	r6, #1
 80086b2:	4630      	mov	r0, r6
 80086b4:	b003      	add	sp, #12
 80086b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ba:	6812      	ldr	r2, [r2, #0]
 80086bc:	3b04      	subs	r3, #4
 80086be:	2a00      	cmp	r2, #0
 80086c0:	d1cb      	bne.n	800865a <quorem+0x94>
 80086c2:	3c01      	subs	r4, #1
 80086c4:	e7c6      	b.n	8008654 <quorem+0x8e>
 80086c6:	6812      	ldr	r2, [r2, #0]
 80086c8:	3b04      	subs	r3, #4
 80086ca:	2a00      	cmp	r2, #0
 80086cc:	d1ef      	bne.n	80086ae <quorem+0xe8>
 80086ce:	3c01      	subs	r4, #1
 80086d0:	e7ea      	b.n	80086a8 <quorem+0xe2>
 80086d2:	2000      	movs	r0, #0
 80086d4:	e7ee      	b.n	80086b4 <quorem+0xee>
	...

080086d8 <_dtoa_r>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	4614      	mov	r4, r2
 80086de:	461d      	mov	r5, r3
 80086e0:	69c7      	ldr	r7, [r0, #28]
 80086e2:	b097      	sub	sp, #92	@ 0x5c
 80086e4:	4681      	mov	r9, r0
 80086e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80086ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80086ec:	b97f      	cbnz	r7, 800870e <_dtoa_r+0x36>
 80086ee:	2010      	movs	r0, #16
 80086f0:	f000 fe0e 	bl	8009310 <malloc>
 80086f4:	4602      	mov	r2, r0
 80086f6:	f8c9 001c 	str.w	r0, [r9, #28]
 80086fa:	b920      	cbnz	r0, 8008706 <_dtoa_r+0x2e>
 80086fc:	21ef      	movs	r1, #239	@ 0xef
 80086fe:	4bac      	ldr	r3, [pc, #688]	@ (80089b0 <_dtoa_r+0x2d8>)
 8008700:	48ac      	ldr	r0, [pc, #688]	@ (80089b4 <_dtoa_r+0x2dc>)
 8008702:	f001 fc6d 	bl	8009fe0 <__assert_func>
 8008706:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800870a:	6007      	str	r7, [r0, #0]
 800870c:	60c7      	str	r7, [r0, #12]
 800870e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008712:	6819      	ldr	r1, [r3, #0]
 8008714:	b159      	cbz	r1, 800872e <_dtoa_r+0x56>
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	2301      	movs	r3, #1
 800871a:	4093      	lsls	r3, r2
 800871c:	604a      	str	r2, [r1, #4]
 800871e:	608b      	str	r3, [r1, #8]
 8008720:	4648      	mov	r0, r9
 8008722:	f000 feeb 	bl	80094fc <_Bfree>
 8008726:	2200      	movs	r2, #0
 8008728:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	1e2b      	subs	r3, r5, #0
 8008730:	bfaf      	iteee	ge
 8008732:	2300      	movge	r3, #0
 8008734:	2201      	movlt	r2, #1
 8008736:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800873a:	9307      	strlt	r3, [sp, #28]
 800873c:	bfa8      	it	ge
 800873e:	6033      	strge	r3, [r6, #0]
 8008740:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008744:	4b9c      	ldr	r3, [pc, #624]	@ (80089b8 <_dtoa_r+0x2e0>)
 8008746:	bfb8      	it	lt
 8008748:	6032      	strlt	r2, [r6, #0]
 800874a:	ea33 0308 	bics.w	r3, r3, r8
 800874e:	d112      	bne.n	8008776 <_dtoa_r+0x9e>
 8008750:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008754:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800875c:	4323      	orrs	r3, r4
 800875e:	f000 855e 	beq.w	800921e <_dtoa_r+0xb46>
 8008762:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008764:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80089bc <_dtoa_r+0x2e4>
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 8560 	beq.w	800922e <_dtoa_r+0xb56>
 800876e:	f10a 0303 	add.w	r3, sl, #3
 8008772:	f000 bd5a 	b.w	800922a <_dtoa_r+0xb52>
 8008776:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800877a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800877e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008782:	2200      	movs	r2, #0
 8008784:	2300      	movs	r3, #0
 8008786:	f7f8 f90f 	bl	80009a8 <__aeabi_dcmpeq>
 800878a:	4607      	mov	r7, r0
 800878c:	b158      	cbz	r0, 80087a6 <_dtoa_r+0xce>
 800878e:	2301      	movs	r3, #1
 8008790:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008792:	6013      	str	r3, [r2, #0]
 8008794:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008796:	b113      	cbz	r3, 800879e <_dtoa_r+0xc6>
 8008798:	4b89      	ldr	r3, [pc, #548]	@ (80089c0 <_dtoa_r+0x2e8>)
 800879a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80089c4 <_dtoa_r+0x2ec>
 80087a2:	f000 bd44 	b.w	800922e <_dtoa_r+0xb56>
 80087a6:	ab14      	add	r3, sp, #80	@ 0x50
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	ab15      	add	r3, sp, #84	@ 0x54
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	4648      	mov	r0, r9
 80087b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80087b4:	f001 f984 	bl	8009ac0 <__d2b>
 80087b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80087bc:	9003      	str	r0, [sp, #12]
 80087be:	2e00      	cmp	r6, #0
 80087c0:	d078      	beq.n	80088b4 <_dtoa_r+0x1dc>
 80087c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80087cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80087d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80087d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80087da:	4619      	mov	r1, r3
 80087dc:	2200      	movs	r2, #0
 80087de:	4b7a      	ldr	r3, [pc, #488]	@ (80089c8 <_dtoa_r+0x2f0>)
 80087e0:	f7f7 fcc2 	bl	8000168 <__aeabi_dsub>
 80087e4:	a36c      	add	r3, pc, #432	@ (adr r3, 8008998 <_dtoa_r+0x2c0>)
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	f7f7 fe75 	bl	80004d8 <__aeabi_dmul>
 80087ee:	a36c      	add	r3, pc, #432	@ (adr r3, 80089a0 <_dtoa_r+0x2c8>)
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	f7f7 fcba 	bl	800016c <__adddf3>
 80087f8:	4604      	mov	r4, r0
 80087fa:	4630      	mov	r0, r6
 80087fc:	460d      	mov	r5, r1
 80087fe:	f7f7 fe01 	bl	8000404 <__aeabi_i2d>
 8008802:	a369      	add	r3, pc, #420	@ (adr r3, 80089a8 <_dtoa_r+0x2d0>)
 8008804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008808:	f7f7 fe66 	bl	80004d8 <__aeabi_dmul>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	4620      	mov	r0, r4
 8008812:	4629      	mov	r1, r5
 8008814:	f7f7 fcaa 	bl	800016c <__adddf3>
 8008818:	4604      	mov	r4, r0
 800881a:	460d      	mov	r5, r1
 800881c:	f7f8 f90c 	bl	8000a38 <__aeabi_d2iz>
 8008820:	2200      	movs	r2, #0
 8008822:	4607      	mov	r7, r0
 8008824:	2300      	movs	r3, #0
 8008826:	4620      	mov	r0, r4
 8008828:	4629      	mov	r1, r5
 800882a:	f7f8 f8c7 	bl	80009bc <__aeabi_dcmplt>
 800882e:	b140      	cbz	r0, 8008842 <_dtoa_r+0x16a>
 8008830:	4638      	mov	r0, r7
 8008832:	f7f7 fde7 	bl	8000404 <__aeabi_i2d>
 8008836:	4622      	mov	r2, r4
 8008838:	462b      	mov	r3, r5
 800883a:	f7f8 f8b5 	bl	80009a8 <__aeabi_dcmpeq>
 800883e:	b900      	cbnz	r0, 8008842 <_dtoa_r+0x16a>
 8008840:	3f01      	subs	r7, #1
 8008842:	2f16      	cmp	r7, #22
 8008844:	d854      	bhi.n	80088f0 <_dtoa_r+0x218>
 8008846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800884a:	4b60      	ldr	r3, [pc, #384]	@ (80089cc <_dtoa_r+0x2f4>)
 800884c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f7f8 f8b2 	bl	80009bc <__aeabi_dcmplt>
 8008858:	2800      	cmp	r0, #0
 800885a:	d04b      	beq.n	80088f4 <_dtoa_r+0x21c>
 800885c:	2300      	movs	r3, #0
 800885e:	3f01      	subs	r7, #1
 8008860:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008862:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008864:	1b9b      	subs	r3, r3, r6
 8008866:	1e5a      	subs	r2, r3, #1
 8008868:	bf49      	itett	mi
 800886a:	f1c3 0301 	rsbmi	r3, r3, #1
 800886e:	2300      	movpl	r3, #0
 8008870:	9304      	strmi	r3, [sp, #16]
 8008872:	2300      	movmi	r3, #0
 8008874:	9209      	str	r2, [sp, #36]	@ 0x24
 8008876:	bf54      	ite	pl
 8008878:	9304      	strpl	r3, [sp, #16]
 800887a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800887c:	2f00      	cmp	r7, #0
 800887e:	db3b      	blt.n	80088f8 <_dtoa_r+0x220>
 8008880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008882:	970e      	str	r7, [sp, #56]	@ 0x38
 8008884:	443b      	add	r3, r7
 8008886:	9309      	str	r3, [sp, #36]	@ 0x24
 8008888:	2300      	movs	r3, #0
 800888a:	930a      	str	r3, [sp, #40]	@ 0x28
 800888c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800888e:	2b09      	cmp	r3, #9
 8008890:	d865      	bhi.n	800895e <_dtoa_r+0x286>
 8008892:	2b05      	cmp	r3, #5
 8008894:	bfc4      	itt	gt
 8008896:	3b04      	subgt	r3, #4
 8008898:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800889a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800889c:	bfc8      	it	gt
 800889e:	2400      	movgt	r4, #0
 80088a0:	f1a3 0302 	sub.w	r3, r3, #2
 80088a4:	bfd8      	it	le
 80088a6:	2401      	movle	r4, #1
 80088a8:	2b03      	cmp	r3, #3
 80088aa:	d864      	bhi.n	8008976 <_dtoa_r+0x29e>
 80088ac:	e8df f003 	tbb	[pc, r3]
 80088b0:	2c385553 	.word	0x2c385553
 80088b4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80088b8:	441e      	add	r6, r3
 80088ba:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80088be:	2b20      	cmp	r3, #32
 80088c0:	bfc1      	itttt	gt
 80088c2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80088c6:	fa08 f803 	lslgt.w	r8, r8, r3
 80088ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80088ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80088d2:	bfd6      	itet	le
 80088d4:	f1c3 0320 	rsble	r3, r3, #32
 80088d8:	ea48 0003 	orrgt.w	r0, r8, r3
 80088dc:	fa04 f003 	lslle.w	r0, r4, r3
 80088e0:	f7f7 fd80 	bl	80003e4 <__aeabi_ui2d>
 80088e4:	2201      	movs	r2, #1
 80088e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80088ea:	3e01      	subs	r6, #1
 80088ec:	9212      	str	r2, [sp, #72]	@ 0x48
 80088ee:	e774      	b.n	80087da <_dtoa_r+0x102>
 80088f0:	2301      	movs	r3, #1
 80088f2:	e7b5      	b.n	8008860 <_dtoa_r+0x188>
 80088f4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80088f6:	e7b4      	b.n	8008862 <_dtoa_r+0x18a>
 80088f8:	9b04      	ldr	r3, [sp, #16]
 80088fa:	1bdb      	subs	r3, r3, r7
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	427b      	negs	r3, r7
 8008900:	930a      	str	r3, [sp, #40]	@ 0x28
 8008902:	2300      	movs	r3, #0
 8008904:	930e      	str	r3, [sp, #56]	@ 0x38
 8008906:	e7c1      	b.n	800888c <_dtoa_r+0x1b4>
 8008908:	2301      	movs	r3, #1
 800890a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800890c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800890e:	eb07 0b03 	add.w	fp, r7, r3
 8008912:	f10b 0301 	add.w	r3, fp, #1
 8008916:	2b01      	cmp	r3, #1
 8008918:	9308      	str	r3, [sp, #32]
 800891a:	bfb8      	it	lt
 800891c:	2301      	movlt	r3, #1
 800891e:	e006      	b.n	800892e <_dtoa_r+0x256>
 8008920:	2301      	movs	r3, #1
 8008922:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008924:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008926:	2b00      	cmp	r3, #0
 8008928:	dd28      	ble.n	800897c <_dtoa_r+0x2a4>
 800892a:	469b      	mov	fp, r3
 800892c:	9308      	str	r3, [sp, #32]
 800892e:	2100      	movs	r1, #0
 8008930:	2204      	movs	r2, #4
 8008932:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008936:	f102 0514 	add.w	r5, r2, #20
 800893a:	429d      	cmp	r5, r3
 800893c:	d926      	bls.n	800898c <_dtoa_r+0x2b4>
 800893e:	6041      	str	r1, [r0, #4]
 8008940:	4648      	mov	r0, r9
 8008942:	f000 fd9b 	bl	800947c <_Balloc>
 8008946:	4682      	mov	sl, r0
 8008948:	2800      	cmp	r0, #0
 800894a:	d143      	bne.n	80089d4 <_dtoa_r+0x2fc>
 800894c:	4602      	mov	r2, r0
 800894e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008952:	4b1f      	ldr	r3, [pc, #124]	@ (80089d0 <_dtoa_r+0x2f8>)
 8008954:	e6d4      	b.n	8008700 <_dtoa_r+0x28>
 8008956:	2300      	movs	r3, #0
 8008958:	e7e3      	b.n	8008922 <_dtoa_r+0x24a>
 800895a:	2300      	movs	r3, #0
 800895c:	e7d5      	b.n	800890a <_dtoa_r+0x232>
 800895e:	2401      	movs	r4, #1
 8008960:	2300      	movs	r3, #0
 8008962:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008964:	9320      	str	r3, [sp, #128]	@ 0x80
 8008966:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800896a:	2200      	movs	r2, #0
 800896c:	2312      	movs	r3, #18
 800896e:	f8cd b020 	str.w	fp, [sp, #32]
 8008972:	9221      	str	r2, [sp, #132]	@ 0x84
 8008974:	e7db      	b.n	800892e <_dtoa_r+0x256>
 8008976:	2301      	movs	r3, #1
 8008978:	930b      	str	r3, [sp, #44]	@ 0x2c
 800897a:	e7f4      	b.n	8008966 <_dtoa_r+0x28e>
 800897c:	f04f 0b01 	mov.w	fp, #1
 8008980:	465b      	mov	r3, fp
 8008982:	f8cd b020 	str.w	fp, [sp, #32]
 8008986:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800898a:	e7d0      	b.n	800892e <_dtoa_r+0x256>
 800898c:	3101      	adds	r1, #1
 800898e:	0052      	lsls	r2, r2, #1
 8008990:	e7d1      	b.n	8008936 <_dtoa_r+0x25e>
 8008992:	bf00      	nop
 8008994:	f3af 8000 	nop.w
 8008998:	636f4361 	.word	0x636f4361
 800899c:	3fd287a7 	.word	0x3fd287a7
 80089a0:	8b60c8b3 	.word	0x8b60c8b3
 80089a4:	3fc68a28 	.word	0x3fc68a28
 80089a8:	509f79fb 	.word	0x509f79fb
 80089ac:	3fd34413 	.word	0x3fd34413
 80089b0:	0800af13 	.word	0x0800af13
 80089b4:	0800af2a 	.word	0x0800af2a
 80089b8:	7ff00000 	.word	0x7ff00000
 80089bc:	0800af0f 	.word	0x0800af0f
 80089c0:	0800aee3 	.word	0x0800aee3
 80089c4:	0800aee2 	.word	0x0800aee2
 80089c8:	3ff80000 	.word	0x3ff80000
 80089cc:	0800b078 	.word	0x0800b078
 80089d0:	0800af82 	.word	0x0800af82
 80089d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80089d8:	6018      	str	r0, [r3, #0]
 80089da:	9b08      	ldr	r3, [sp, #32]
 80089dc:	2b0e      	cmp	r3, #14
 80089de:	f200 80a1 	bhi.w	8008b24 <_dtoa_r+0x44c>
 80089e2:	2c00      	cmp	r4, #0
 80089e4:	f000 809e 	beq.w	8008b24 <_dtoa_r+0x44c>
 80089e8:	2f00      	cmp	r7, #0
 80089ea:	dd33      	ble.n	8008a54 <_dtoa_r+0x37c>
 80089ec:	4b9c      	ldr	r3, [pc, #624]	@ (8008c60 <_dtoa_r+0x588>)
 80089ee:	f007 020f 	and.w	r2, r7, #15
 80089f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089f6:	05f8      	lsls	r0, r7, #23
 80089f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008a00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008a04:	d516      	bpl.n	8008a34 <_dtoa_r+0x35c>
 8008a06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a0a:	4b96      	ldr	r3, [pc, #600]	@ (8008c64 <_dtoa_r+0x58c>)
 8008a0c:	2603      	movs	r6, #3
 8008a0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a12:	f7f7 fe8b 	bl	800072c <__aeabi_ddiv>
 8008a16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a1a:	f004 040f 	and.w	r4, r4, #15
 8008a1e:	4d91      	ldr	r5, [pc, #580]	@ (8008c64 <_dtoa_r+0x58c>)
 8008a20:	b954      	cbnz	r4, 8008a38 <_dtoa_r+0x360>
 8008a22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a2a:	f7f7 fe7f 	bl	800072c <__aeabi_ddiv>
 8008a2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a32:	e028      	b.n	8008a86 <_dtoa_r+0x3ae>
 8008a34:	2602      	movs	r6, #2
 8008a36:	e7f2      	b.n	8008a1e <_dtoa_r+0x346>
 8008a38:	07e1      	lsls	r1, r4, #31
 8008a3a:	d508      	bpl.n	8008a4e <_dtoa_r+0x376>
 8008a3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a44:	f7f7 fd48 	bl	80004d8 <__aeabi_dmul>
 8008a48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	1064      	asrs	r4, r4, #1
 8008a50:	3508      	adds	r5, #8
 8008a52:	e7e5      	b.n	8008a20 <_dtoa_r+0x348>
 8008a54:	f000 80af 	beq.w	8008bb6 <_dtoa_r+0x4de>
 8008a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a5c:	427c      	negs	r4, r7
 8008a5e:	4b80      	ldr	r3, [pc, #512]	@ (8008c60 <_dtoa_r+0x588>)
 8008a60:	f004 020f 	and.w	r2, r4, #15
 8008a64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	f7f7 fd34 	bl	80004d8 <__aeabi_dmul>
 8008a70:	2602      	movs	r6, #2
 8008a72:	2300      	movs	r3, #0
 8008a74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a78:	4d7a      	ldr	r5, [pc, #488]	@ (8008c64 <_dtoa_r+0x58c>)
 8008a7a:	1124      	asrs	r4, r4, #4
 8008a7c:	2c00      	cmp	r4, #0
 8008a7e:	f040 808f 	bne.w	8008ba0 <_dtoa_r+0x4c8>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1d3      	bne.n	8008a2e <_dtoa_r+0x356>
 8008a86:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008a8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8094 	beq.w	8008bba <_dtoa_r+0x4e2>
 8008a92:	2200      	movs	r2, #0
 8008a94:	4620      	mov	r0, r4
 8008a96:	4629      	mov	r1, r5
 8008a98:	4b73      	ldr	r3, [pc, #460]	@ (8008c68 <_dtoa_r+0x590>)
 8008a9a:	f7f7 ff8f 	bl	80009bc <__aeabi_dcmplt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	f000 808b 	beq.w	8008bba <_dtoa_r+0x4e2>
 8008aa4:	9b08      	ldr	r3, [sp, #32]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 8087 	beq.w	8008bba <_dtoa_r+0x4e2>
 8008aac:	f1bb 0f00 	cmp.w	fp, #0
 8008ab0:	dd34      	ble.n	8008b1c <_dtoa_r+0x444>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8008c6c <_dtoa_r+0x594>)
 8008aba:	f7f7 fd0d 	bl	80004d8 <__aeabi_dmul>
 8008abe:	465c      	mov	r4, fp
 8008ac0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ac4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008ac8:	3601      	adds	r6, #1
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7f7 fc9a 	bl	8000404 <__aeabi_i2d>
 8008ad0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ad4:	f7f7 fd00 	bl	80004d8 <__aeabi_dmul>
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4b65      	ldr	r3, [pc, #404]	@ (8008c70 <_dtoa_r+0x598>)
 8008adc:	f7f7 fb46 	bl	800016c <__adddf3>
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008ae6:	2c00      	cmp	r4, #0
 8008ae8:	d16a      	bne.n	8008bc0 <_dtoa_r+0x4e8>
 8008aea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008aee:	2200      	movs	r2, #0
 8008af0:	4b60      	ldr	r3, [pc, #384]	@ (8008c74 <_dtoa_r+0x59c>)
 8008af2:	f7f7 fb39 	bl	8000168 <__aeabi_dsub>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008afe:	462a      	mov	r2, r5
 8008b00:	4633      	mov	r3, r6
 8008b02:	f7f7 ff79 	bl	80009f8 <__aeabi_dcmpgt>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f040 8298 	bne.w	800903c <_dtoa_r+0x964>
 8008b0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b10:	462a      	mov	r2, r5
 8008b12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008b16:	f7f7 ff51 	bl	80009bc <__aeabi_dcmplt>
 8008b1a:	bb38      	cbnz	r0, 8008b6c <_dtoa_r+0x494>
 8008b1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008b20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008b24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f2c0 8157 	blt.w	8008dda <_dtoa_r+0x702>
 8008b2c:	2f0e      	cmp	r7, #14
 8008b2e:	f300 8154 	bgt.w	8008dda <_dtoa_r+0x702>
 8008b32:	4b4b      	ldr	r3, [pc, #300]	@ (8008c60 <_dtoa_r+0x588>)
 8008b34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008b40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f280 80e5 	bge.w	8008d12 <_dtoa_r+0x63a>
 8008b48:	9b08      	ldr	r3, [sp, #32]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f300 80e1 	bgt.w	8008d12 <_dtoa_r+0x63a>
 8008b50:	d10c      	bne.n	8008b6c <_dtoa_r+0x494>
 8008b52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b56:	2200      	movs	r2, #0
 8008b58:	4b46      	ldr	r3, [pc, #280]	@ (8008c74 <_dtoa_r+0x59c>)
 8008b5a:	f7f7 fcbd 	bl	80004d8 <__aeabi_dmul>
 8008b5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b62:	f7f7 ff3f 	bl	80009e4 <__aeabi_dcmpge>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f000 8266 	beq.w	8009038 <_dtoa_r+0x960>
 8008b6c:	2400      	movs	r4, #0
 8008b6e:	4625      	mov	r5, r4
 8008b70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b72:	4656      	mov	r6, sl
 8008b74:	ea6f 0803 	mvn.w	r8, r3
 8008b78:	2700      	movs	r7, #0
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4648      	mov	r0, r9
 8008b7e:	f000 fcbd 	bl	80094fc <_Bfree>
 8008b82:	2d00      	cmp	r5, #0
 8008b84:	f000 80bd 	beq.w	8008d02 <_dtoa_r+0x62a>
 8008b88:	b12f      	cbz	r7, 8008b96 <_dtoa_r+0x4be>
 8008b8a:	42af      	cmp	r7, r5
 8008b8c:	d003      	beq.n	8008b96 <_dtoa_r+0x4be>
 8008b8e:	4639      	mov	r1, r7
 8008b90:	4648      	mov	r0, r9
 8008b92:	f000 fcb3 	bl	80094fc <_Bfree>
 8008b96:	4629      	mov	r1, r5
 8008b98:	4648      	mov	r0, r9
 8008b9a:	f000 fcaf 	bl	80094fc <_Bfree>
 8008b9e:	e0b0      	b.n	8008d02 <_dtoa_r+0x62a>
 8008ba0:	07e2      	lsls	r2, r4, #31
 8008ba2:	d505      	bpl.n	8008bb0 <_dtoa_r+0x4d8>
 8008ba4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ba8:	f7f7 fc96 	bl	80004d8 <__aeabi_dmul>
 8008bac:	2301      	movs	r3, #1
 8008bae:	3601      	adds	r6, #1
 8008bb0:	1064      	asrs	r4, r4, #1
 8008bb2:	3508      	adds	r5, #8
 8008bb4:	e762      	b.n	8008a7c <_dtoa_r+0x3a4>
 8008bb6:	2602      	movs	r6, #2
 8008bb8:	e765      	b.n	8008a86 <_dtoa_r+0x3ae>
 8008bba:	46b8      	mov	r8, r7
 8008bbc:	9c08      	ldr	r4, [sp, #32]
 8008bbe:	e784      	b.n	8008aca <_dtoa_r+0x3f2>
 8008bc0:	4b27      	ldr	r3, [pc, #156]	@ (8008c60 <_dtoa_r+0x588>)
 8008bc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008bc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bcc:	4454      	add	r4, sl
 8008bce:	2900      	cmp	r1, #0
 8008bd0:	d054      	beq.n	8008c7c <_dtoa_r+0x5a4>
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	4928      	ldr	r1, [pc, #160]	@ (8008c78 <_dtoa_r+0x5a0>)
 8008bd6:	f7f7 fda9 	bl	800072c <__aeabi_ddiv>
 8008bda:	4633      	mov	r3, r6
 8008bdc:	462a      	mov	r2, r5
 8008bde:	f7f7 fac3 	bl	8000168 <__aeabi_dsub>
 8008be2:	4656      	mov	r6, sl
 8008be4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008be8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bec:	f7f7 ff24 	bl	8000a38 <__aeabi_d2iz>
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	f7f7 fc07 	bl	8000404 <__aeabi_i2d>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bfe:	f7f7 fab3 	bl	8000168 <__aeabi_dsub>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	3530      	adds	r5, #48	@ 0x30
 8008c08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c10:	f806 5b01 	strb.w	r5, [r6], #1
 8008c14:	f7f7 fed2 	bl	80009bc <__aeabi_dcmplt>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d172      	bne.n	8008d02 <_dtoa_r+0x62a>
 8008c1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c20:	2000      	movs	r0, #0
 8008c22:	4911      	ldr	r1, [pc, #68]	@ (8008c68 <_dtoa_r+0x590>)
 8008c24:	f7f7 faa0 	bl	8000168 <__aeabi_dsub>
 8008c28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c2c:	f7f7 fec6 	bl	80009bc <__aeabi_dcmplt>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	f040 80b4 	bne.w	8008d9e <_dtoa_r+0x6c6>
 8008c36:	42a6      	cmp	r6, r4
 8008c38:	f43f af70 	beq.w	8008b1c <_dtoa_r+0x444>
 8008c3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c40:	2200      	movs	r2, #0
 8008c42:	4b0a      	ldr	r3, [pc, #40]	@ (8008c6c <_dtoa_r+0x594>)
 8008c44:	f7f7 fc48 	bl	80004d8 <__aeabi_dmul>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c52:	4b06      	ldr	r3, [pc, #24]	@ (8008c6c <_dtoa_r+0x594>)
 8008c54:	f7f7 fc40 	bl	80004d8 <__aeabi_dmul>
 8008c58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c5c:	e7c4      	b.n	8008be8 <_dtoa_r+0x510>
 8008c5e:	bf00      	nop
 8008c60:	0800b078 	.word	0x0800b078
 8008c64:	0800b050 	.word	0x0800b050
 8008c68:	3ff00000 	.word	0x3ff00000
 8008c6c:	40240000 	.word	0x40240000
 8008c70:	401c0000 	.word	0x401c0000
 8008c74:	40140000 	.word	0x40140000
 8008c78:	3fe00000 	.word	0x3fe00000
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f7f7 fc2a 	bl	80004d8 <__aeabi_dmul>
 8008c84:	4656      	mov	r6, sl
 8008c86:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c8a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c90:	f7f7 fed2 	bl	8000a38 <__aeabi_d2iz>
 8008c94:	4605      	mov	r5, r0
 8008c96:	f7f7 fbb5 	bl	8000404 <__aeabi_i2d>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ca2:	f7f7 fa61 	bl	8000168 <__aeabi_dsub>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	3530      	adds	r5, #48	@ 0x30
 8008cac:	f806 5b01 	strb.w	r5, [r6], #1
 8008cb0:	42a6      	cmp	r6, r4
 8008cb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008cb6:	f04f 0200 	mov.w	r2, #0
 8008cba:	d124      	bne.n	8008d06 <_dtoa_r+0x62e>
 8008cbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008cc0:	4bae      	ldr	r3, [pc, #696]	@ (8008f7c <_dtoa_r+0x8a4>)
 8008cc2:	f7f7 fa53 	bl	800016c <__adddf3>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cce:	f7f7 fe93 	bl	80009f8 <__aeabi_dcmpgt>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d163      	bne.n	8008d9e <_dtoa_r+0x6c6>
 8008cd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cda:	2000      	movs	r0, #0
 8008cdc:	49a7      	ldr	r1, [pc, #668]	@ (8008f7c <_dtoa_r+0x8a4>)
 8008cde:	f7f7 fa43 	bl	8000168 <__aeabi_dsub>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cea:	f7f7 fe67 	bl	80009bc <__aeabi_dcmplt>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	f43f af14 	beq.w	8008b1c <_dtoa_r+0x444>
 8008cf4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008cf6:	1e73      	subs	r3, r6, #1
 8008cf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cfe:	2b30      	cmp	r3, #48	@ 0x30
 8008d00:	d0f8      	beq.n	8008cf4 <_dtoa_r+0x61c>
 8008d02:	4647      	mov	r7, r8
 8008d04:	e03b      	b.n	8008d7e <_dtoa_r+0x6a6>
 8008d06:	4b9e      	ldr	r3, [pc, #632]	@ (8008f80 <_dtoa_r+0x8a8>)
 8008d08:	f7f7 fbe6 	bl	80004d8 <__aeabi_dmul>
 8008d0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d10:	e7bc      	b.n	8008c8c <_dtoa_r+0x5b4>
 8008d12:	4656      	mov	r6, sl
 8008d14:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	4629      	mov	r1, r5
 8008d20:	f7f7 fd04 	bl	800072c <__aeabi_ddiv>
 8008d24:	f7f7 fe88 	bl	8000a38 <__aeabi_d2iz>
 8008d28:	4680      	mov	r8, r0
 8008d2a:	f7f7 fb6b 	bl	8000404 <__aeabi_i2d>
 8008d2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d32:	f7f7 fbd1 	bl	80004d8 <__aeabi_dmul>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f7f7 fa13 	bl	8000168 <__aeabi_dsub>
 8008d42:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d46:	9d08      	ldr	r5, [sp, #32]
 8008d48:	f806 4b01 	strb.w	r4, [r6], #1
 8008d4c:	eba6 040a 	sub.w	r4, r6, sl
 8008d50:	42a5      	cmp	r5, r4
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	d133      	bne.n	8008dc0 <_dtoa_r+0x6e8>
 8008d58:	f7f7 fa08 	bl	800016c <__adddf3>
 8008d5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d60:	4604      	mov	r4, r0
 8008d62:	460d      	mov	r5, r1
 8008d64:	f7f7 fe48 	bl	80009f8 <__aeabi_dcmpgt>
 8008d68:	b9c0      	cbnz	r0, 8008d9c <_dtoa_r+0x6c4>
 8008d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 fe19 	bl	80009a8 <__aeabi_dcmpeq>
 8008d76:	b110      	cbz	r0, 8008d7e <_dtoa_r+0x6a6>
 8008d78:	f018 0f01 	tst.w	r8, #1
 8008d7c:	d10e      	bne.n	8008d9c <_dtoa_r+0x6c4>
 8008d7e:	4648      	mov	r0, r9
 8008d80:	9903      	ldr	r1, [sp, #12]
 8008d82:	f000 fbbb 	bl	80094fc <_Bfree>
 8008d86:	2300      	movs	r3, #0
 8008d88:	7033      	strb	r3, [r6, #0]
 8008d8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008d8c:	3701      	adds	r7, #1
 8008d8e:	601f      	str	r7, [r3, #0]
 8008d90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 824b 	beq.w	800922e <_dtoa_r+0xb56>
 8008d98:	601e      	str	r6, [r3, #0]
 8008d9a:	e248      	b.n	800922e <_dtoa_r+0xb56>
 8008d9c:	46b8      	mov	r8, r7
 8008d9e:	4633      	mov	r3, r6
 8008da0:	461e      	mov	r6, r3
 8008da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008da6:	2a39      	cmp	r2, #57	@ 0x39
 8008da8:	d106      	bne.n	8008db8 <_dtoa_r+0x6e0>
 8008daa:	459a      	cmp	sl, r3
 8008dac:	d1f8      	bne.n	8008da0 <_dtoa_r+0x6c8>
 8008dae:	2230      	movs	r2, #48	@ 0x30
 8008db0:	f108 0801 	add.w	r8, r8, #1
 8008db4:	f88a 2000 	strb.w	r2, [sl]
 8008db8:	781a      	ldrb	r2, [r3, #0]
 8008dba:	3201      	adds	r2, #1
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	e7a0      	b.n	8008d02 <_dtoa_r+0x62a>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8008f80 <_dtoa_r+0x8a8>)
 8008dc4:	f7f7 fb88 	bl	80004d8 <__aeabi_dmul>
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2300      	movs	r3, #0
 8008dcc:	4604      	mov	r4, r0
 8008dce:	460d      	mov	r5, r1
 8008dd0:	f7f7 fdea 	bl	80009a8 <__aeabi_dcmpeq>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d09f      	beq.n	8008d18 <_dtoa_r+0x640>
 8008dd8:	e7d1      	b.n	8008d7e <_dtoa_r+0x6a6>
 8008dda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ddc:	2a00      	cmp	r2, #0
 8008dde:	f000 80ea 	beq.w	8008fb6 <_dtoa_r+0x8de>
 8008de2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008de4:	2a01      	cmp	r2, #1
 8008de6:	f300 80cd 	bgt.w	8008f84 <_dtoa_r+0x8ac>
 8008dea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008dec:	2a00      	cmp	r2, #0
 8008dee:	f000 80c1 	beq.w	8008f74 <_dtoa_r+0x89c>
 8008df2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008df6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008df8:	9e04      	ldr	r6, [sp, #16]
 8008dfa:	9a04      	ldr	r2, [sp, #16]
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	441a      	add	r2, r3
 8008e00:	9204      	str	r2, [sp, #16]
 8008e02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e04:	4648      	mov	r0, r9
 8008e06:	441a      	add	r2, r3
 8008e08:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e0a:	f000 fc2b 	bl	8009664 <__i2b>
 8008e0e:	4605      	mov	r5, r0
 8008e10:	b166      	cbz	r6, 8008e2c <_dtoa_r+0x754>
 8008e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	dd09      	ble.n	8008e2c <_dtoa_r+0x754>
 8008e18:	42b3      	cmp	r3, r6
 8008e1a:	bfa8      	it	ge
 8008e1c:	4633      	movge	r3, r6
 8008e1e:	9a04      	ldr	r2, [sp, #16]
 8008e20:	1af6      	subs	r6, r6, r3
 8008e22:	1ad2      	subs	r2, r2, r3
 8008e24:	9204      	str	r2, [sp, #16]
 8008e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e2e:	b30b      	cbz	r3, 8008e74 <_dtoa_r+0x79c>
 8008e30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 80c6 	beq.w	8008fc4 <_dtoa_r+0x8ec>
 8008e38:	2c00      	cmp	r4, #0
 8008e3a:	f000 80c0 	beq.w	8008fbe <_dtoa_r+0x8e6>
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4622      	mov	r2, r4
 8008e42:	4648      	mov	r0, r9
 8008e44:	f000 fcc6 	bl	80097d4 <__pow5mult>
 8008e48:	9a03      	ldr	r2, [sp, #12]
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	4648      	mov	r0, r9
 8008e50:	f000 fc1e 	bl	8009690 <__multiply>
 8008e54:	9903      	ldr	r1, [sp, #12]
 8008e56:	4680      	mov	r8, r0
 8008e58:	4648      	mov	r0, r9
 8008e5a:	f000 fb4f 	bl	80094fc <_Bfree>
 8008e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e60:	1b1b      	subs	r3, r3, r4
 8008e62:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e64:	f000 80b1 	beq.w	8008fca <_dtoa_r+0x8f2>
 8008e68:	4641      	mov	r1, r8
 8008e6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e6c:	4648      	mov	r0, r9
 8008e6e:	f000 fcb1 	bl	80097d4 <__pow5mult>
 8008e72:	9003      	str	r0, [sp, #12]
 8008e74:	2101      	movs	r1, #1
 8008e76:	4648      	mov	r0, r9
 8008e78:	f000 fbf4 	bl	8009664 <__i2b>
 8008e7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e7e:	4604      	mov	r4, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 81d8 	beq.w	8009236 <_dtoa_r+0xb5e>
 8008e86:	461a      	mov	r2, r3
 8008e88:	4601      	mov	r1, r0
 8008e8a:	4648      	mov	r0, r9
 8008e8c:	f000 fca2 	bl	80097d4 <__pow5mult>
 8008e90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e92:	4604      	mov	r4, r0
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	f300 809f 	bgt.w	8008fd8 <_dtoa_r+0x900>
 8008e9a:	9b06      	ldr	r3, [sp, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f040 8097 	bne.w	8008fd0 <_dtoa_r+0x8f8>
 8008ea2:	9b07      	ldr	r3, [sp, #28]
 8008ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f040 8093 	bne.w	8008fd4 <_dtoa_r+0x8fc>
 8008eae:	9b07      	ldr	r3, [sp, #28]
 8008eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008eb4:	0d1b      	lsrs	r3, r3, #20
 8008eb6:	051b      	lsls	r3, r3, #20
 8008eb8:	b133      	cbz	r3, 8008ec8 <_dtoa_r+0x7f0>
 8008eba:	9b04      	ldr	r3, [sp, #16]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	9304      	str	r3, [sp, #16]
 8008ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 81b8 	beq.w	8009242 <_dtoa_r+0xb6a>
 8008ed2:	6923      	ldr	r3, [r4, #16]
 8008ed4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ed8:	6918      	ldr	r0, [r3, #16]
 8008eda:	f000 fb77 	bl	80095cc <__hi0bits>
 8008ede:	f1c0 0020 	rsb	r0, r0, #32
 8008ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee4:	4418      	add	r0, r3
 8008ee6:	f010 001f 	ands.w	r0, r0, #31
 8008eea:	f000 8082 	beq.w	8008ff2 <_dtoa_r+0x91a>
 8008eee:	f1c0 0320 	rsb	r3, r0, #32
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	dd73      	ble.n	8008fde <_dtoa_r+0x906>
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	f1c0 001c 	rsb	r0, r0, #28
 8008efc:	4403      	add	r3, r0
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f02:	4406      	add	r6, r0
 8008f04:	4403      	add	r3, r0
 8008f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f08:	9b04      	ldr	r3, [sp, #16]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	dd05      	ble.n	8008f1a <_dtoa_r+0x842>
 8008f0e:	461a      	mov	r2, r3
 8008f10:	4648      	mov	r0, r9
 8008f12:	9903      	ldr	r1, [sp, #12]
 8008f14:	f000 fcb8 	bl	8009888 <__lshift>
 8008f18:	9003      	str	r0, [sp, #12]
 8008f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dd05      	ble.n	8008f2c <_dtoa_r+0x854>
 8008f20:	4621      	mov	r1, r4
 8008f22:	461a      	mov	r2, r3
 8008f24:	4648      	mov	r0, r9
 8008f26:	f000 fcaf 	bl	8009888 <__lshift>
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d061      	beq.n	8008ff6 <_dtoa_r+0x91e>
 8008f32:	4621      	mov	r1, r4
 8008f34:	9803      	ldr	r0, [sp, #12]
 8008f36:	f000 fd13 	bl	8009960 <__mcmp>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	da5b      	bge.n	8008ff6 <_dtoa_r+0x91e>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	220a      	movs	r2, #10
 8008f42:	4648      	mov	r0, r9
 8008f44:	9903      	ldr	r1, [sp, #12]
 8008f46:	f000 fafb 	bl	8009540 <__multadd>
 8008f4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f4c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008f50:	9003      	str	r0, [sp, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 8177 	beq.w	8009246 <_dtoa_r+0xb6e>
 8008f58:	4629      	mov	r1, r5
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	220a      	movs	r2, #10
 8008f5e:	4648      	mov	r0, r9
 8008f60:	f000 faee 	bl	8009540 <__multadd>
 8008f64:	f1bb 0f00 	cmp.w	fp, #0
 8008f68:	4605      	mov	r5, r0
 8008f6a:	dc6f      	bgt.n	800904c <_dtoa_r+0x974>
 8008f6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	dc49      	bgt.n	8009006 <_dtoa_r+0x92e>
 8008f72:	e06b      	b.n	800904c <_dtoa_r+0x974>
 8008f74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008f76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f7a:	e73c      	b.n	8008df6 <_dtoa_r+0x71e>
 8008f7c:	3fe00000 	.word	0x3fe00000
 8008f80:	40240000 	.word	0x40240000
 8008f84:	9b08      	ldr	r3, [sp, #32]
 8008f86:	1e5c      	subs	r4, r3, #1
 8008f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	db09      	blt.n	8008fa2 <_dtoa_r+0x8ca>
 8008f8e:	1b1c      	subs	r4, r3, r4
 8008f90:	9b08      	ldr	r3, [sp, #32]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f6bf af30 	bge.w	8008df8 <_dtoa_r+0x720>
 8008f98:	9b04      	ldr	r3, [sp, #16]
 8008f9a:	9a08      	ldr	r2, [sp, #32]
 8008f9c:	1a9e      	subs	r6, r3, r2
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e72b      	b.n	8008dfa <_dtoa_r+0x722>
 8008fa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fa6:	1ae3      	subs	r3, r4, r3
 8008fa8:	441a      	add	r2, r3
 8008faa:	940a      	str	r4, [sp, #40]	@ 0x28
 8008fac:	9e04      	ldr	r6, [sp, #16]
 8008fae:	2400      	movs	r4, #0
 8008fb0:	9b08      	ldr	r3, [sp, #32]
 8008fb2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fb4:	e721      	b.n	8008dfa <_dtoa_r+0x722>
 8008fb6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008fb8:	9e04      	ldr	r6, [sp, #16]
 8008fba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008fbc:	e728      	b.n	8008e10 <_dtoa_r+0x738>
 8008fbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008fc2:	e751      	b.n	8008e68 <_dtoa_r+0x790>
 8008fc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fc6:	9903      	ldr	r1, [sp, #12]
 8008fc8:	e750      	b.n	8008e6c <_dtoa_r+0x794>
 8008fca:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fce:	e751      	b.n	8008e74 <_dtoa_r+0x79c>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e779      	b.n	8008ec8 <_dtoa_r+0x7f0>
 8008fd4:	9b06      	ldr	r3, [sp, #24]
 8008fd6:	e777      	b.n	8008ec8 <_dtoa_r+0x7f0>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fdc:	e779      	b.n	8008ed2 <_dtoa_r+0x7fa>
 8008fde:	d093      	beq.n	8008f08 <_dtoa_r+0x830>
 8008fe0:	9a04      	ldr	r2, [sp, #16]
 8008fe2:	331c      	adds	r3, #28
 8008fe4:	441a      	add	r2, r3
 8008fe6:	9204      	str	r2, [sp, #16]
 8008fe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fea:	441e      	add	r6, r3
 8008fec:	441a      	add	r2, r3
 8008fee:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ff0:	e78a      	b.n	8008f08 <_dtoa_r+0x830>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	e7f4      	b.n	8008fe0 <_dtoa_r+0x908>
 8008ff6:	9b08      	ldr	r3, [sp, #32]
 8008ff8:	46b8      	mov	r8, r7
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dc20      	bgt.n	8009040 <_dtoa_r+0x968>
 8008ffe:	469b      	mov	fp, r3
 8009000:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009002:	2b02      	cmp	r3, #2
 8009004:	dd1e      	ble.n	8009044 <_dtoa_r+0x96c>
 8009006:	f1bb 0f00 	cmp.w	fp, #0
 800900a:	f47f adb1 	bne.w	8008b70 <_dtoa_r+0x498>
 800900e:	4621      	mov	r1, r4
 8009010:	465b      	mov	r3, fp
 8009012:	2205      	movs	r2, #5
 8009014:	4648      	mov	r0, r9
 8009016:	f000 fa93 	bl	8009540 <__multadd>
 800901a:	4601      	mov	r1, r0
 800901c:	4604      	mov	r4, r0
 800901e:	9803      	ldr	r0, [sp, #12]
 8009020:	f000 fc9e 	bl	8009960 <__mcmp>
 8009024:	2800      	cmp	r0, #0
 8009026:	f77f ada3 	ble.w	8008b70 <_dtoa_r+0x498>
 800902a:	4656      	mov	r6, sl
 800902c:	2331      	movs	r3, #49	@ 0x31
 800902e:	f108 0801 	add.w	r8, r8, #1
 8009032:	f806 3b01 	strb.w	r3, [r6], #1
 8009036:	e59f      	b.n	8008b78 <_dtoa_r+0x4a0>
 8009038:	46b8      	mov	r8, r7
 800903a:	9c08      	ldr	r4, [sp, #32]
 800903c:	4625      	mov	r5, r4
 800903e:	e7f4      	b.n	800902a <_dtoa_r+0x952>
 8009040:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009044:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 8101 	beq.w	800924e <_dtoa_r+0xb76>
 800904c:	2e00      	cmp	r6, #0
 800904e:	dd05      	ble.n	800905c <_dtoa_r+0x984>
 8009050:	4629      	mov	r1, r5
 8009052:	4632      	mov	r2, r6
 8009054:	4648      	mov	r0, r9
 8009056:	f000 fc17 	bl	8009888 <__lshift>
 800905a:	4605      	mov	r5, r0
 800905c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800905e:	2b00      	cmp	r3, #0
 8009060:	d05c      	beq.n	800911c <_dtoa_r+0xa44>
 8009062:	4648      	mov	r0, r9
 8009064:	6869      	ldr	r1, [r5, #4]
 8009066:	f000 fa09 	bl	800947c <_Balloc>
 800906a:	4606      	mov	r6, r0
 800906c:	b928      	cbnz	r0, 800907a <_dtoa_r+0x9a2>
 800906e:	4602      	mov	r2, r0
 8009070:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009074:	4b80      	ldr	r3, [pc, #512]	@ (8009278 <_dtoa_r+0xba0>)
 8009076:	f7ff bb43 	b.w	8008700 <_dtoa_r+0x28>
 800907a:	692a      	ldr	r2, [r5, #16]
 800907c:	f105 010c 	add.w	r1, r5, #12
 8009080:	3202      	adds	r2, #2
 8009082:	0092      	lsls	r2, r2, #2
 8009084:	300c      	adds	r0, #12
 8009086:	f000 ff9d 	bl	8009fc4 <memcpy>
 800908a:	2201      	movs	r2, #1
 800908c:	4631      	mov	r1, r6
 800908e:	4648      	mov	r0, r9
 8009090:	f000 fbfa 	bl	8009888 <__lshift>
 8009094:	462f      	mov	r7, r5
 8009096:	4605      	mov	r5, r0
 8009098:	f10a 0301 	add.w	r3, sl, #1
 800909c:	9304      	str	r3, [sp, #16]
 800909e:	eb0a 030b 	add.w	r3, sl, fp
 80090a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80090a4:	9b06      	ldr	r3, [sp, #24]
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ac:	9b04      	ldr	r3, [sp, #16]
 80090ae:	4621      	mov	r1, r4
 80090b0:	9803      	ldr	r0, [sp, #12]
 80090b2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80090b6:	f7ff fa86 	bl	80085c6 <quorem>
 80090ba:	4603      	mov	r3, r0
 80090bc:	4639      	mov	r1, r7
 80090be:	3330      	adds	r3, #48	@ 0x30
 80090c0:	9006      	str	r0, [sp, #24]
 80090c2:	9803      	ldr	r0, [sp, #12]
 80090c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090c6:	f000 fc4b 	bl	8009960 <__mcmp>
 80090ca:	462a      	mov	r2, r5
 80090cc:	9008      	str	r0, [sp, #32]
 80090ce:	4621      	mov	r1, r4
 80090d0:	4648      	mov	r0, r9
 80090d2:	f000 fc61 	bl	8009998 <__mdiff>
 80090d6:	68c2      	ldr	r2, [r0, #12]
 80090d8:	4606      	mov	r6, r0
 80090da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090dc:	bb02      	cbnz	r2, 8009120 <_dtoa_r+0xa48>
 80090de:	4601      	mov	r1, r0
 80090e0:	9803      	ldr	r0, [sp, #12]
 80090e2:	f000 fc3d 	bl	8009960 <__mcmp>
 80090e6:	4602      	mov	r2, r0
 80090e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090ea:	4631      	mov	r1, r6
 80090ec:	4648      	mov	r0, r9
 80090ee:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80090f2:	f000 fa03 	bl	80094fc <_Bfree>
 80090f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80090f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80090fa:	9e04      	ldr	r6, [sp, #16]
 80090fc:	ea42 0103 	orr.w	r1, r2, r3
 8009100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009102:	4319      	orrs	r1, r3
 8009104:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009106:	d10d      	bne.n	8009124 <_dtoa_r+0xa4c>
 8009108:	2b39      	cmp	r3, #57	@ 0x39
 800910a:	d027      	beq.n	800915c <_dtoa_r+0xa84>
 800910c:	9a08      	ldr	r2, [sp, #32]
 800910e:	2a00      	cmp	r2, #0
 8009110:	dd01      	ble.n	8009116 <_dtoa_r+0xa3e>
 8009112:	9b06      	ldr	r3, [sp, #24]
 8009114:	3331      	adds	r3, #49	@ 0x31
 8009116:	f88b 3000 	strb.w	r3, [fp]
 800911a:	e52e      	b.n	8008b7a <_dtoa_r+0x4a2>
 800911c:	4628      	mov	r0, r5
 800911e:	e7b9      	b.n	8009094 <_dtoa_r+0x9bc>
 8009120:	2201      	movs	r2, #1
 8009122:	e7e2      	b.n	80090ea <_dtoa_r+0xa12>
 8009124:	9908      	ldr	r1, [sp, #32]
 8009126:	2900      	cmp	r1, #0
 8009128:	db04      	blt.n	8009134 <_dtoa_r+0xa5c>
 800912a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800912c:	4301      	orrs	r1, r0
 800912e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009130:	4301      	orrs	r1, r0
 8009132:	d120      	bne.n	8009176 <_dtoa_r+0xa9e>
 8009134:	2a00      	cmp	r2, #0
 8009136:	ddee      	ble.n	8009116 <_dtoa_r+0xa3e>
 8009138:	2201      	movs	r2, #1
 800913a:	9903      	ldr	r1, [sp, #12]
 800913c:	4648      	mov	r0, r9
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	f000 fba2 	bl	8009888 <__lshift>
 8009144:	4621      	mov	r1, r4
 8009146:	9003      	str	r0, [sp, #12]
 8009148:	f000 fc0a 	bl	8009960 <__mcmp>
 800914c:	2800      	cmp	r0, #0
 800914e:	9b04      	ldr	r3, [sp, #16]
 8009150:	dc02      	bgt.n	8009158 <_dtoa_r+0xa80>
 8009152:	d1e0      	bne.n	8009116 <_dtoa_r+0xa3e>
 8009154:	07da      	lsls	r2, r3, #31
 8009156:	d5de      	bpl.n	8009116 <_dtoa_r+0xa3e>
 8009158:	2b39      	cmp	r3, #57	@ 0x39
 800915a:	d1da      	bne.n	8009112 <_dtoa_r+0xa3a>
 800915c:	2339      	movs	r3, #57	@ 0x39
 800915e:	f88b 3000 	strb.w	r3, [fp]
 8009162:	4633      	mov	r3, r6
 8009164:	461e      	mov	r6, r3
 8009166:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800916a:	3b01      	subs	r3, #1
 800916c:	2a39      	cmp	r2, #57	@ 0x39
 800916e:	d04e      	beq.n	800920e <_dtoa_r+0xb36>
 8009170:	3201      	adds	r2, #1
 8009172:	701a      	strb	r2, [r3, #0]
 8009174:	e501      	b.n	8008b7a <_dtoa_r+0x4a2>
 8009176:	2a00      	cmp	r2, #0
 8009178:	dd03      	ble.n	8009182 <_dtoa_r+0xaaa>
 800917a:	2b39      	cmp	r3, #57	@ 0x39
 800917c:	d0ee      	beq.n	800915c <_dtoa_r+0xa84>
 800917e:	3301      	adds	r3, #1
 8009180:	e7c9      	b.n	8009116 <_dtoa_r+0xa3e>
 8009182:	9a04      	ldr	r2, [sp, #16]
 8009184:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009186:	f802 3c01 	strb.w	r3, [r2, #-1]
 800918a:	428a      	cmp	r2, r1
 800918c:	d028      	beq.n	80091e0 <_dtoa_r+0xb08>
 800918e:	2300      	movs	r3, #0
 8009190:	220a      	movs	r2, #10
 8009192:	9903      	ldr	r1, [sp, #12]
 8009194:	4648      	mov	r0, r9
 8009196:	f000 f9d3 	bl	8009540 <__multadd>
 800919a:	42af      	cmp	r7, r5
 800919c:	9003      	str	r0, [sp, #12]
 800919e:	f04f 0300 	mov.w	r3, #0
 80091a2:	f04f 020a 	mov.w	r2, #10
 80091a6:	4639      	mov	r1, r7
 80091a8:	4648      	mov	r0, r9
 80091aa:	d107      	bne.n	80091bc <_dtoa_r+0xae4>
 80091ac:	f000 f9c8 	bl	8009540 <__multadd>
 80091b0:	4607      	mov	r7, r0
 80091b2:	4605      	mov	r5, r0
 80091b4:	9b04      	ldr	r3, [sp, #16]
 80091b6:	3301      	adds	r3, #1
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	e777      	b.n	80090ac <_dtoa_r+0x9d4>
 80091bc:	f000 f9c0 	bl	8009540 <__multadd>
 80091c0:	4629      	mov	r1, r5
 80091c2:	4607      	mov	r7, r0
 80091c4:	2300      	movs	r3, #0
 80091c6:	220a      	movs	r2, #10
 80091c8:	4648      	mov	r0, r9
 80091ca:	f000 f9b9 	bl	8009540 <__multadd>
 80091ce:	4605      	mov	r5, r0
 80091d0:	e7f0      	b.n	80091b4 <_dtoa_r+0xadc>
 80091d2:	f1bb 0f00 	cmp.w	fp, #0
 80091d6:	bfcc      	ite	gt
 80091d8:	465e      	movgt	r6, fp
 80091da:	2601      	movle	r6, #1
 80091dc:	2700      	movs	r7, #0
 80091de:	4456      	add	r6, sl
 80091e0:	2201      	movs	r2, #1
 80091e2:	9903      	ldr	r1, [sp, #12]
 80091e4:	4648      	mov	r0, r9
 80091e6:	9304      	str	r3, [sp, #16]
 80091e8:	f000 fb4e 	bl	8009888 <__lshift>
 80091ec:	4621      	mov	r1, r4
 80091ee:	9003      	str	r0, [sp, #12]
 80091f0:	f000 fbb6 	bl	8009960 <__mcmp>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	dcb4      	bgt.n	8009162 <_dtoa_r+0xa8a>
 80091f8:	d102      	bne.n	8009200 <_dtoa_r+0xb28>
 80091fa:	9b04      	ldr	r3, [sp, #16]
 80091fc:	07db      	lsls	r3, r3, #31
 80091fe:	d4b0      	bmi.n	8009162 <_dtoa_r+0xa8a>
 8009200:	4633      	mov	r3, r6
 8009202:	461e      	mov	r6, r3
 8009204:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009208:	2a30      	cmp	r2, #48	@ 0x30
 800920a:	d0fa      	beq.n	8009202 <_dtoa_r+0xb2a>
 800920c:	e4b5      	b.n	8008b7a <_dtoa_r+0x4a2>
 800920e:	459a      	cmp	sl, r3
 8009210:	d1a8      	bne.n	8009164 <_dtoa_r+0xa8c>
 8009212:	2331      	movs	r3, #49	@ 0x31
 8009214:	f108 0801 	add.w	r8, r8, #1
 8009218:	f88a 3000 	strb.w	r3, [sl]
 800921c:	e4ad      	b.n	8008b7a <_dtoa_r+0x4a2>
 800921e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009220:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800927c <_dtoa_r+0xba4>
 8009224:	b11b      	cbz	r3, 800922e <_dtoa_r+0xb56>
 8009226:	f10a 0308 	add.w	r3, sl, #8
 800922a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	4650      	mov	r0, sl
 8009230:	b017      	add	sp, #92	@ 0x5c
 8009232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009238:	2b01      	cmp	r3, #1
 800923a:	f77f ae2e 	ble.w	8008e9a <_dtoa_r+0x7c2>
 800923e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009240:	930a      	str	r3, [sp, #40]	@ 0x28
 8009242:	2001      	movs	r0, #1
 8009244:	e64d      	b.n	8008ee2 <_dtoa_r+0x80a>
 8009246:	f1bb 0f00 	cmp.w	fp, #0
 800924a:	f77f aed9 	ble.w	8009000 <_dtoa_r+0x928>
 800924e:	4656      	mov	r6, sl
 8009250:	4621      	mov	r1, r4
 8009252:	9803      	ldr	r0, [sp, #12]
 8009254:	f7ff f9b7 	bl	80085c6 <quorem>
 8009258:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800925c:	f806 3b01 	strb.w	r3, [r6], #1
 8009260:	eba6 020a 	sub.w	r2, r6, sl
 8009264:	4593      	cmp	fp, r2
 8009266:	ddb4      	ble.n	80091d2 <_dtoa_r+0xafa>
 8009268:	2300      	movs	r3, #0
 800926a:	220a      	movs	r2, #10
 800926c:	4648      	mov	r0, r9
 800926e:	9903      	ldr	r1, [sp, #12]
 8009270:	f000 f966 	bl	8009540 <__multadd>
 8009274:	9003      	str	r0, [sp, #12]
 8009276:	e7eb      	b.n	8009250 <_dtoa_r+0xb78>
 8009278:	0800af82 	.word	0x0800af82
 800927c:	0800af06 	.word	0x0800af06

08009280 <_free_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4605      	mov	r5, r0
 8009284:	2900      	cmp	r1, #0
 8009286:	d040      	beq.n	800930a <_free_r+0x8a>
 8009288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800928c:	1f0c      	subs	r4, r1, #4
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfb8      	it	lt
 8009292:	18e4      	addlt	r4, r4, r3
 8009294:	f000 f8e6 	bl	8009464 <__malloc_lock>
 8009298:	4a1c      	ldr	r2, [pc, #112]	@ (800930c <_free_r+0x8c>)
 800929a:	6813      	ldr	r3, [r2, #0]
 800929c:	b933      	cbnz	r3, 80092ac <_free_r+0x2c>
 800929e:	6063      	str	r3, [r4, #4]
 80092a0:	6014      	str	r4, [r2, #0]
 80092a2:	4628      	mov	r0, r5
 80092a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092a8:	f000 b8e2 	b.w	8009470 <__malloc_unlock>
 80092ac:	42a3      	cmp	r3, r4
 80092ae:	d908      	bls.n	80092c2 <_free_r+0x42>
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	1821      	adds	r1, r4, r0
 80092b4:	428b      	cmp	r3, r1
 80092b6:	bf01      	itttt	eq
 80092b8:	6819      	ldreq	r1, [r3, #0]
 80092ba:	685b      	ldreq	r3, [r3, #4]
 80092bc:	1809      	addeq	r1, r1, r0
 80092be:	6021      	streq	r1, [r4, #0]
 80092c0:	e7ed      	b.n	800929e <_free_r+0x1e>
 80092c2:	461a      	mov	r2, r3
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	b10b      	cbz	r3, 80092cc <_free_r+0x4c>
 80092c8:	42a3      	cmp	r3, r4
 80092ca:	d9fa      	bls.n	80092c2 <_free_r+0x42>
 80092cc:	6811      	ldr	r1, [r2, #0]
 80092ce:	1850      	adds	r0, r2, r1
 80092d0:	42a0      	cmp	r0, r4
 80092d2:	d10b      	bne.n	80092ec <_free_r+0x6c>
 80092d4:	6820      	ldr	r0, [r4, #0]
 80092d6:	4401      	add	r1, r0
 80092d8:	1850      	adds	r0, r2, r1
 80092da:	4283      	cmp	r3, r0
 80092dc:	6011      	str	r1, [r2, #0]
 80092de:	d1e0      	bne.n	80092a2 <_free_r+0x22>
 80092e0:	6818      	ldr	r0, [r3, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	4408      	add	r0, r1
 80092e6:	6010      	str	r0, [r2, #0]
 80092e8:	6053      	str	r3, [r2, #4]
 80092ea:	e7da      	b.n	80092a2 <_free_r+0x22>
 80092ec:	d902      	bls.n	80092f4 <_free_r+0x74>
 80092ee:	230c      	movs	r3, #12
 80092f0:	602b      	str	r3, [r5, #0]
 80092f2:	e7d6      	b.n	80092a2 <_free_r+0x22>
 80092f4:	6820      	ldr	r0, [r4, #0]
 80092f6:	1821      	adds	r1, r4, r0
 80092f8:	428b      	cmp	r3, r1
 80092fa:	bf01      	itttt	eq
 80092fc:	6819      	ldreq	r1, [r3, #0]
 80092fe:	685b      	ldreq	r3, [r3, #4]
 8009300:	1809      	addeq	r1, r1, r0
 8009302:	6021      	streq	r1, [r4, #0]
 8009304:	6063      	str	r3, [r4, #4]
 8009306:	6054      	str	r4, [r2, #4]
 8009308:	e7cb      	b.n	80092a2 <_free_r+0x22>
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	20000a08 	.word	0x20000a08

08009310 <malloc>:
 8009310:	4b02      	ldr	r3, [pc, #8]	@ (800931c <malloc+0xc>)
 8009312:	4601      	mov	r1, r0
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	f000 b825 	b.w	8009364 <_malloc_r>
 800931a:	bf00      	nop
 800931c:	2000003c 	.word	0x2000003c

08009320 <sbrk_aligned>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	4e0f      	ldr	r6, [pc, #60]	@ (8009360 <sbrk_aligned+0x40>)
 8009324:	460c      	mov	r4, r1
 8009326:	6831      	ldr	r1, [r6, #0]
 8009328:	4605      	mov	r5, r0
 800932a:	b911      	cbnz	r1, 8009332 <sbrk_aligned+0x12>
 800932c:	f000 fe3a 	bl	8009fa4 <_sbrk_r>
 8009330:	6030      	str	r0, [r6, #0]
 8009332:	4621      	mov	r1, r4
 8009334:	4628      	mov	r0, r5
 8009336:	f000 fe35 	bl	8009fa4 <_sbrk_r>
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	d103      	bne.n	8009346 <sbrk_aligned+0x26>
 800933e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009342:	4620      	mov	r0, r4
 8009344:	bd70      	pop	{r4, r5, r6, pc}
 8009346:	1cc4      	adds	r4, r0, #3
 8009348:	f024 0403 	bic.w	r4, r4, #3
 800934c:	42a0      	cmp	r0, r4
 800934e:	d0f8      	beq.n	8009342 <sbrk_aligned+0x22>
 8009350:	1a21      	subs	r1, r4, r0
 8009352:	4628      	mov	r0, r5
 8009354:	f000 fe26 	bl	8009fa4 <_sbrk_r>
 8009358:	3001      	adds	r0, #1
 800935a:	d1f2      	bne.n	8009342 <sbrk_aligned+0x22>
 800935c:	e7ef      	b.n	800933e <sbrk_aligned+0x1e>
 800935e:	bf00      	nop
 8009360:	20000a04 	.word	0x20000a04

08009364 <_malloc_r>:
 8009364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009368:	1ccd      	adds	r5, r1, #3
 800936a:	f025 0503 	bic.w	r5, r5, #3
 800936e:	3508      	adds	r5, #8
 8009370:	2d0c      	cmp	r5, #12
 8009372:	bf38      	it	cc
 8009374:	250c      	movcc	r5, #12
 8009376:	2d00      	cmp	r5, #0
 8009378:	4606      	mov	r6, r0
 800937a:	db01      	blt.n	8009380 <_malloc_r+0x1c>
 800937c:	42a9      	cmp	r1, r5
 800937e:	d904      	bls.n	800938a <_malloc_r+0x26>
 8009380:	230c      	movs	r3, #12
 8009382:	6033      	str	r3, [r6, #0]
 8009384:	2000      	movs	r0, #0
 8009386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800938a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009460 <_malloc_r+0xfc>
 800938e:	f000 f869 	bl	8009464 <__malloc_lock>
 8009392:	f8d8 3000 	ldr.w	r3, [r8]
 8009396:	461c      	mov	r4, r3
 8009398:	bb44      	cbnz	r4, 80093ec <_malloc_r+0x88>
 800939a:	4629      	mov	r1, r5
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff ffbf 	bl	8009320 <sbrk_aligned>
 80093a2:	1c43      	adds	r3, r0, #1
 80093a4:	4604      	mov	r4, r0
 80093a6:	d158      	bne.n	800945a <_malloc_r+0xf6>
 80093a8:	f8d8 4000 	ldr.w	r4, [r8]
 80093ac:	4627      	mov	r7, r4
 80093ae:	2f00      	cmp	r7, #0
 80093b0:	d143      	bne.n	800943a <_malloc_r+0xd6>
 80093b2:	2c00      	cmp	r4, #0
 80093b4:	d04b      	beq.n	800944e <_malloc_r+0xea>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	4639      	mov	r1, r7
 80093ba:	4630      	mov	r0, r6
 80093bc:	eb04 0903 	add.w	r9, r4, r3
 80093c0:	f000 fdf0 	bl	8009fa4 <_sbrk_r>
 80093c4:	4581      	cmp	r9, r0
 80093c6:	d142      	bne.n	800944e <_malloc_r+0xea>
 80093c8:	6821      	ldr	r1, [r4, #0]
 80093ca:	4630      	mov	r0, r6
 80093cc:	1a6d      	subs	r5, r5, r1
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7ff ffa6 	bl	8009320 <sbrk_aligned>
 80093d4:	3001      	adds	r0, #1
 80093d6:	d03a      	beq.n	800944e <_malloc_r+0xea>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	442b      	add	r3, r5
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	f8d8 3000 	ldr.w	r3, [r8]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	bb62      	cbnz	r2, 8009440 <_malloc_r+0xdc>
 80093e6:	f8c8 7000 	str.w	r7, [r8]
 80093ea:	e00f      	b.n	800940c <_malloc_r+0xa8>
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	1b52      	subs	r2, r2, r5
 80093f0:	d420      	bmi.n	8009434 <_malloc_r+0xd0>
 80093f2:	2a0b      	cmp	r2, #11
 80093f4:	d917      	bls.n	8009426 <_malloc_r+0xc2>
 80093f6:	1961      	adds	r1, r4, r5
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	6025      	str	r5, [r4, #0]
 80093fc:	bf18      	it	ne
 80093fe:	6059      	strne	r1, [r3, #4]
 8009400:	6863      	ldr	r3, [r4, #4]
 8009402:	bf08      	it	eq
 8009404:	f8c8 1000 	streq.w	r1, [r8]
 8009408:	5162      	str	r2, [r4, r5]
 800940a:	604b      	str	r3, [r1, #4]
 800940c:	4630      	mov	r0, r6
 800940e:	f000 f82f 	bl	8009470 <__malloc_unlock>
 8009412:	f104 000b 	add.w	r0, r4, #11
 8009416:	1d23      	adds	r3, r4, #4
 8009418:	f020 0007 	bic.w	r0, r0, #7
 800941c:	1ac2      	subs	r2, r0, r3
 800941e:	bf1c      	itt	ne
 8009420:	1a1b      	subne	r3, r3, r0
 8009422:	50a3      	strne	r3, [r4, r2]
 8009424:	e7af      	b.n	8009386 <_malloc_r+0x22>
 8009426:	6862      	ldr	r2, [r4, #4]
 8009428:	42a3      	cmp	r3, r4
 800942a:	bf0c      	ite	eq
 800942c:	f8c8 2000 	streq.w	r2, [r8]
 8009430:	605a      	strne	r2, [r3, #4]
 8009432:	e7eb      	b.n	800940c <_malloc_r+0xa8>
 8009434:	4623      	mov	r3, r4
 8009436:	6864      	ldr	r4, [r4, #4]
 8009438:	e7ae      	b.n	8009398 <_malloc_r+0x34>
 800943a:	463c      	mov	r4, r7
 800943c:	687f      	ldr	r7, [r7, #4]
 800943e:	e7b6      	b.n	80093ae <_malloc_r+0x4a>
 8009440:	461a      	mov	r2, r3
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	42a3      	cmp	r3, r4
 8009446:	d1fb      	bne.n	8009440 <_malloc_r+0xdc>
 8009448:	2300      	movs	r3, #0
 800944a:	6053      	str	r3, [r2, #4]
 800944c:	e7de      	b.n	800940c <_malloc_r+0xa8>
 800944e:	230c      	movs	r3, #12
 8009450:	4630      	mov	r0, r6
 8009452:	6033      	str	r3, [r6, #0]
 8009454:	f000 f80c 	bl	8009470 <__malloc_unlock>
 8009458:	e794      	b.n	8009384 <_malloc_r+0x20>
 800945a:	6005      	str	r5, [r0, #0]
 800945c:	e7d6      	b.n	800940c <_malloc_r+0xa8>
 800945e:	bf00      	nop
 8009460:	20000a08 	.word	0x20000a08

08009464 <__malloc_lock>:
 8009464:	4801      	ldr	r0, [pc, #4]	@ (800946c <__malloc_lock+0x8>)
 8009466:	f7ff b89e 	b.w	80085a6 <__retarget_lock_acquire_recursive>
 800946a:	bf00      	nop
 800946c:	20000a00 	.word	0x20000a00

08009470 <__malloc_unlock>:
 8009470:	4801      	ldr	r0, [pc, #4]	@ (8009478 <__malloc_unlock+0x8>)
 8009472:	f7ff b899 	b.w	80085a8 <__retarget_lock_release_recursive>
 8009476:	bf00      	nop
 8009478:	20000a00 	.word	0x20000a00

0800947c <_Balloc>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	69c6      	ldr	r6, [r0, #28]
 8009480:	4604      	mov	r4, r0
 8009482:	460d      	mov	r5, r1
 8009484:	b976      	cbnz	r6, 80094a4 <_Balloc+0x28>
 8009486:	2010      	movs	r0, #16
 8009488:	f7ff ff42 	bl	8009310 <malloc>
 800948c:	4602      	mov	r2, r0
 800948e:	61e0      	str	r0, [r4, #28]
 8009490:	b920      	cbnz	r0, 800949c <_Balloc+0x20>
 8009492:	216b      	movs	r1, #107	@ 0x6b
 8009494:	4b17      	ldr	r3, [pc, #92]	@ (80094f4 <_Balloc+0x78>)
 8009496:	4818      	ldr	r0, [pc, #96]	@ (80094f8 <_Balloc+0x7c>)
 8009498:	f000 fda2 	bl	8009fe0 <__assert_func>
 800949c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094a0:	6006      	str	r6, [r0, #0]
 80094a2:	60c6      	str	r6, [r0, #12]
 80094a4:	69e6      	ldr	r6, [r4, #28]
 80094a6:	68f3      	ldr	r3, [r6, #12]
 80094a8:	b183      	cbz	r3, 80094cc <_Balloc+0x50>
 80094aa:	69e3      	ldr	r3, [r4, #28]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094b2:	b9b8      	cbnz	r0, 80094e4 <_Balloc+0x68>
 80094b4:	2101      	movs	r1, #1
 80094b6:	fa01 f605 	lsl.w	r6, r1, r5
 80094ba:	1d72      	adds	r2, r6, #5
 80094bc:	4620      	mov	r0, r4
 80094be:	0092      	lsls	r2, r2, #2
 80094c0:	f000 fdac 	bl	800a01c <_calloc_r>
 80094c4:	b160      	cbz	r0, 80094e0 <_Balloc+0x64>
 80094c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094ca:	e00e      	b.n	80094ea <_Balloc+0x6e>
 80094cc:	2221      	movs	r2, #33	@ 0x21
 80094ce:	2104      	movs	r1, #4
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fda3 	bl	800a01c <_calloc_r>
 80094d6:	69e3      	ldr	r3, [r4, #28]
 80094d8:	60f0      	str	r0, [r6, #12]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1e4      	bne.n	80094aa <_Balloc+0x2e>
 80094e0:	2000      	movs	r0, #0
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	6802      	ldr	r2, [r0, #0]
 80094e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094ea:	2300      	movs	r3, #0
 80094ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094f0:	e7f7      	b.n	80094e2 <_Balloc+0x66>
 80094f2:	bf00      	nop
 80094f4:	0800af13 	.word	0x0800af13
 80094f8:	0800af93 	.word	0x0800af93

080094fc <_Bfree>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	69c6      	ldr	r6, [r0, #28]
 8009500:	4605      	mov	r5, r0
 8009502:	460c      	mov	r4, r1
 8009504:	b976      	cbnz	r6, 8009524 <_Bfree+0x28>
 8009506:	2010      	movs	r0, #16
 8009508:	f7ff ff02 	bl	8009310 <malloc>
 800950c:	4602      	mov	r2, r0
 800950e:	61e8      	str	r0, [r5, #28]
 8009510:	b920      	cbnz	r0, 800951c <_Bfree+0x20>
 8009512:	218f      	movs	r1, #143	@ 0x8f
 8009514:	4b08      	ldr	r3, [pc, #32]	@ (8009538 <_Bfree+0x3c>)
 8009516:	4809      	ldr	r0, [pc, #36]	@ (800953c <_Bfree+0x40>)
 8009518:	f000 fd62 	bl	8009fe0 <__assert_func>
 800951c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009520:	6006      	str	r6, [r0, #0]
 8009522:	60c6      	str	r6, [r0, #12]
 8009524:	b13c      	cbz	r4, 8009536 <_Bfree+0x3a>
 8009526:	69eb      	ldr	r3, [r5, #28]
 8009528:	6862      	ldr	r2, [r4, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009530:	6021      	str	r1, [r4, #0]
 8009532:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009536:	bd70      	pop	{r4, r5, r6, pc}
 8009538:	0800af13 	.word	0x0800af13
 800953c:	0800af93 	.word	0x0800af93

08009540 <__multadd>:
 8009540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009544:	4607      	mov	r7, r0
 8009546:	460c      	mov	r4, r1
 8009548:	461e      	mov	r6, r3
 800954a:	2000      	movs	r0, #0
 800954c:	690d      	ldr	r5, [r1, #16]
 800954e:	f101 0c14 	add.w	ip, r1, #20
 8009552:	f8dc 3000 	ldr.w	r3, [ip]
 8009556:	3001      	adds	r0, #1
 8009558:	b299      	uxth	r1, r3
 800955a:	fb02 6101 	mla	r1, r2, r1, r6
 800955e:	0c1e      	lsrs	r6, r3, #16
 8009560:	0c0b      	lsrs	r3, r1, #16
 8009562:	fb02 3306 	mla	r3, r2, r6, r3
 8009566:	b289      	uxth	r1, r1
 8009568:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800956c:	4285      	cmp	r5, r0
 800956e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009572:	f84c 1b04 	str.w	r1, [ip], #4
 8009576:	dcec      	bgt.n	8009552 <__multadd+0x12>
 8009578:	b30e      	cbz	r6, 80095be <__multadd+0x7e>
 800957a:	68a3      	ldr	r3, [r4, #8]
 800957c:	42ab      	cmp	r3, r5
 800957e:	dc19      	bgt.n	80095b4 <__multadd+0x74>
 8009580:	6861      	ldr	r1, [r4, #4]
 8009582:	4638      	mov	r0, r7
 8009584:	3101      	adds	r1, #1
 8009586:	f7ff ff79 	bl	800947c <_Balloc>
 800958a:	4680      	mov	r8, r0
 800958c:	b928      	cbnz	r0, 800959a <__multadd+0x5a>
 800958e:	4602      	mov	r2, r0
 8009590:	21ba      	movs	r1, #186	@ 0xba
 8009592:	4b0c      	ldr	r3, [pc, #48]	@ (80095c4 <__multadd+0x84>)
 8009594:	480c      	ldr	r0, [pc, #48]	@ (80095c8 <__multadd+0x88>)
 8009596:	f000 fd23 	bl	8009fe0 <__assert_func>
 800959a:	6922      	ldr	r2, [r4, #16]
 800959c:	f104 010c 	add.w	r1, r4, #12
 80095a0:	3202      	adds	r2, #2
 80095a2:	0092      	lsls	r2, r2, #2
 80095a4:	300c      	adds	r0, #12
 80095a6:	f000 fd0d 	bl	8009fc4 <memcpy>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4638      	mov	r0, r7
 80095ae:	f7ff ffa5 	bl	80094fc <_Bfree>
 80095b2:	4644      	mov	r4, r8
 80095b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095b8:	3501      	adds	r5, #1
 80095ba:	615e      	str	r6, [r3, #20]
 80095bc:	6125      	str	r5, [r4, #16]
 80095be:	4620      	mov	r0, r4
 80095c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c4:	0800af82 	.word	0x0800af82
 80095c8:	0800af93 	.word	0x0800af93

080095cc <__hi0bits>:
 80095cc:	4603      	mov	r3, r0
 80095ce:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80095d2:	bf3a      	itte	cc
 80095d4:	0403      	lslcc	r3, r0, #16
 80095d6:	2010      	movcc	r0, #16
 80095d8:	2000      	movcs	r0, #0
 80095da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095de:	bf3c      	itt	cc
 80095e0:	021b      	lslcc	r3, r3, #8
 80095e2:	3008      	addcc	r0, #8
 80095e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095e8:	bf3c      	itt	cc
 80095ea:	011b      	lslcc	r3, r3, #4
 80095ec:	3004      	addcc	r0, #4
 80095ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f2:	bf3c      	itt	cc
 80095f4:	009b      	lslcc	r3, r3, #2
 80095f6:	3002      	addcc	r0, #2
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	db05      	blt.n	8009608 <__hi0bits+0x3c>
 80095fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009600:	f100 0001 	add.w	r0, r0, #1
 8009604:	bf08      	it	eq
 8009606:	2020      	moveq	r0, #32
 8009608:	4770      	bx	lr

0800960a <__lo0bits>:
 800960a:	6803      	ldr	r3, [r0, #0]
 800960c:	4602      	mov	r2, r0
 800960e:	f013 0007 	ands.w	r0, r3, #7
 8009612:	d00b      	beq.n	800962c <__lo0bits+0x22>
 8009614:	07d9      	lsls	r1, r3, #31
 8009616:	d421      	bmi.n	800965c <__lo0bits+0x52>
 8009618:	0798      	lsls	r0, r3, #30
 800961a:	bf49      	itett	mi
 800961c:	085b      	lsrmi	r3, r3, #1
 800961e:	089b      	lsrpl	r3, r3, #2
 8009620:	2001      	movmi	r0, #1
 8009622:	6013      	strmi	r3, [r2, #0]
 8009624:	bf5c      	itt	pl
 8009626:	2002      	movpl	r0, #2
 8009628:	6013      	strpl	r3, [r2, #0]
 800962a:	4770      	bx	lr
 800962c:	b299      	uxth	r1, r3
 800962e:	b909      	cbnz	r1, 8009634 <__lo0bits+0x2a>
 8009630:	2010      	movs	r0, #16
 8009632:	0c1b      	lsrs	r3, r3, #16
 8009634:	b2d9      	uxtb	r1, r3
 8009636:	b909      	cbnz	r1, 800963c <__lo0bits+0x32>
 8009638:	3008      	adds	r0, #8
 800963a:	0a1b      	lsrs	r3, r3, #8
 800963c:	0719      	lsls	r1, r3, #28
 800963e:	bf04      	itt	eq
 8009640:	091b      	lsreq	r3, r3, #4
 8009642:	3004      	addeq	r0, #4
 8009644:	0799      	lsls	r1, r3, #30
 8009646:	bf04      	itt	eq
 8009648:	089b      	lsreq	r3, r3, #2
 800964a:	3002      	addeq	r0, #2
 800964c:	07d9      	lsls	r1, r3, #31
 800964e:	d403      	bmi.n	8009658 <__lo0bits+0x4e>
 8009650:	085b      	lsrs	r3, r3, #1
 8009652:	f100 0001 	add.w	r0, r0, #1
 8009656:	d003      	beq.n	8009660 <__lo0bits+0x56>
 8009658:	6013      	str	r3, [r2, #0]
 800965a:	4770      	bx	lr
 800965c:	2000      	movs	r0, #0
 800965e:	4770      	bx	lr
 8009660:	2020      	movs	r0, #32
 8009662:	4770      	bx	lr

08009664 <__i2b>:
 8009664:	b510      	push	{r4, lr}
 8009666:	460c      	mov	r4, r1
 8009668:	2101      	movs	r1, #1
 800966a:	f7ff ff07 	bl	800947c <_Balloc>
 800966e:	4602      	mov	r2, r0
 8009670:	b928      	cbnz	r0, 800967e <__i2b+0x1a>
 8009672:	f240 1145 	movw	r1, #325	@ 0x145
 8009676:	4b04      	ldr	r3, [pc, #16]	@ (8009688 <__i2b+0x24>)
 8009678:	4804      	ldr	r0, [pc, #16]	@ (800968c <__i2b+0x28>)
 800967a:	f000 fcb1 	bl	8009fe0 <__assert_func>
 800967e:	2301      	movs	r3, #1
 8009680:	6144      	str	r4, [r0, #20]
 8009682:	6103      	str	r3, [r0, #16]
 8009684:	bd10      	pop	{r4, pc}
 8009686:	bf00      	nop
 8009688:	0800af82 	.word	0x0800af82
 800968c:	0800af93 	.word	0x0800af93

08009690 <__multiply>:
 8009690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	4617      	mov	r7, r2
 8009696:	690a      	ldr	r2, [r1, #16]
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	4689      	mov	r9, r1
 800969c:	429a      	cmp	r2, r3
 800969e:	bfa2      	ittt	ge
 80096a0:	463b      	movge	r3, r7
 80096a2:	460f      	movge	r7, r1
 80096a4:	4699      	movge	r9, r3
 80096a6:	693d      	ldr	r5, [r7, #16]
 80096a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	eb05 060a 	add.w	r6, r5, sl
 80096b4:	42b3      	cmp	r3, r6
 80096b6:	b085      	sub	sp, #20
 80096b8:	bfb8      	it	lt
 80096ba:	3101      	addlt	r1, #1
 80096bc:	f7ff fede 	bl	800947c <_Balloc>
 80096c0:	b930      	cbnz	r0, 80096d0 <__multiply+0x40>
 80096c2:	4602      	mov	r2, r0
 80096c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80096c8:	4b40      	ldr	r3, [pc, #256]	@ (80097cc <__multiply+0x13c>)
 80096ca:	4841      	ldr	r0, [pc, #260]	@ (80097d0 <__multiply+0x140>)
 80096cc:	f000 fc88 	bl	8009fe0 <__assert_func>
 80096d0:	f100 0414 	add.w	r4, r0, #20
 80096d4:	4623      	mov	r3, r4
 80096d6:	2200      	movs	r2, #0
 80096d8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80096dc:	4573      	cmp	r3, lr
 80096de:	d320      	bcc.n	8009722 <__multiply+0x92>
 80096e0:	f107 0814 	add.w	r8, r7, #20
 80096e4:	f109 0114 	add.w	r1, r9, #20
 80096e8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80096ec:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80096f0:	9302      	str	r3, [sp, #8]
 80096f2:	1beb      	subs	r3, r5, r7
 80096f4:	3b15      	subs	r3, #21
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	3304      	adds	r3, #4
 80096fc:	3715      	adds	r7, #21
 80096fe:	42bd      	cmp	r5, r7
 8009700:	bf38      	it	cc
 8009702:	2304      	movcc	r3, #4
 8009704:	9301      	str	r3, [sp, #4]
 8009706:	9b02      	ldr	r3, [sp, #8]
 8009708:	9103      	str	r1, [sp, #12]
 800970a:	428b      	cmp	r3, r1
 800970c:	d80c      	bhi.n	8009728 <__multiply+0x98>
 800970e:	2e00      	cmp	r6, #0
 8009710:	dd03      	ble.n	800971a <__multiply+0x8a>
 8009712:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009716:	2b00      	cmp	r3, #0
 8009718:	d055      	beq.n	80097c6 <__multiply+0x136>
 800971a:	6106      	str	r6, [r0, #16]
 800971c:	b005      	add	sp, #20
 800971e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009722:	f843 2b04 	str.w	r2, [r3], #4
 8009726:	e7d9      	b.n	80096dc <__multiply+0x4c>
 8009728:	f8b1 a000 	ldrh.w	sl, [r1]
 800972c:	f1ba 0f00 	cmp.w	sl, #0
 8009730:	d01f      	beq.n	8009772 <__multiply+0xe2>
 8009732:	46c4      	mov	ip, r8
 8009734:	46a1      	mov	r9, r4
 8009736:	2700      	movs	r7, #0
 8009738:	f85c 2b04 	ldr.w	r2, [ip], #4
 800973c:	f8d9 3000 	ldr.w	r3, [r9]
 8009740:	fa1f fb82 	uxth.w	fp, r2
 8009744:	b29b      	uxth	r3, r3
 8009746:	fb0a 330b 	mla	r3, sl, fp, r3
 800974a:	443b      	add	r3, r7
 800974c:	f8d9 7000 	ldr.w	r7, [r9]
 8009750:	0c12      	lsrs	r2, r2, #16
 8009752:	0c3f      	lsrs	r7, r7, #16
 8009754:	fb0a 7202 	mla	r2, sl, r2, r7
 8009758:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800975c:	b29b      	uxth	r3, r3
 800975e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009762:	4565      	cmp	r5, ip
 8009764:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009768:	f849 3b04 	str.w	r3, [r9], #4
 800976c:	d8e4      	bhi.n	8009738 <__multiply+0xa8>
 800976e:	9b01      	ldr	r3, [sp, #4]
 8009770:	50e7      	str	r7, [r4, r3]
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	3104      	adds	r1, #4
 8009776:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800977a:	f1b9 0f00 	cmp.w	r9, #0
 800977e:	d020      	beq.n	80097c2 <__multiply+0x132>
 8009780:	4647      	mov	r7, r8
 8009782:	46a4      	mov	ip, r4
 8009784:	f04f 0a00 	mov.w	sl, #0
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	f8b7 b000 	ldrh.w	fp, [r7]
 800978e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009792:	b29b      	uxth	r3, r3
 8009794:	fb09 220b 	mla	r2, r9, fp, r2
 8009798:	4452      	add	r2, sl
 800979a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800979e:	f84c 3b04 	str.w	r3, [ip], #4
 80097a2:	f857 3b04 	ldr.w	r3, [r7], #4
 80097a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097aa:	f8bc 3000 	ldrh.w	r3, [ip]
 80097ae:	42bd      	cmp	r5, r7
 80097b0:	fb09 330a 	mla	r3, r9, sl, r3
 80097b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80097b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097bc:	d8e5      	bhi.n	800978a <__multiply+0xfa>
 80097be:	9a01      	ldr	r2, [sp, #4]
 80097c0:	50a3      	str	r3, [r4, r2]
 80097c2:	3404      	adds	r4, #4
 80097c4:	e79f      	b.n	8009706 <__multiply+0x76>
 80097c6:	3e01      	subs	r6, #1
 80097c8:	e7a1      	b.n	800970e <__multiply+0x7e>
 80097ca:	bf00      	nop
 80097cc:	0800af82 	.word	0x0800af82
 80097d0:	0800af93 	.word	0x0800af93

080097d4 <__pow5mult>:
 80097d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d8:	4615      	mov	r5, r2
 80097da:	f012 0203 	ands.w	r2, r2, #3
 80097de:	4607      	mov	r7, r0
 80097e0:	460e      	mov	r6, r1
 80097e2:	d007      	beq.n	80097f4 <__pow5mult+0x20>
 80097e4:	4c25      	ldr	r4, [pc, #148]	@ (800987c <__pow5mult+0xa8>)
 80097e6:	3a01      	subs	r2, #1
 80097e8:	2300      	movs	r3, #0
 80097ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097ee:	f7ff fea7 	bl	8009540 <__multadd>
 80097f2:	4606      	mov	r6, r0
 80097f4:	10ad      	asrs	r5, r5, #2
 80097f6:	d03d      	beq.n	8009874 <__pow5mult+0xa0>
 80097f8:	69fc      	ldr	r4, [r7, #28]
 80097fa:	b97c      	cbnz	r4, 800981c <__pow5mult+0x48>
 80097fc:	2010      	movs	r0, #16
 80097fe:	f7ff fd87 	bl	8009310 <malloc>
 8009802:	4602      	mov	r2, r0
 8009804:	61f8      	str	r0, [r7, #28]
 8009806:	b928      	cbnz	r0, 8009814 <__pow5mult+0x40>
 8009808:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800980c:	4b1c      	ldr	r3, [pc, #112]	@ (8009880 <__pow5mult+0xac>)
 800980e:	481d      	ldr	r0, [pc, #116]	@ (8009884 <__pow5mult+0xb0>)
 8009810:	f000 fbe6 	bl	8009fe0 <__assert_func>
 8009814:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009818:	6004      	str	r4, [r0, #0]
 800981a:	60c4      	str	r4, [r0, #12]
 800981c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009820:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009824:	b94c      	cbnz	r4, 800983a <__pow5mult+0x66>
 8009826:	f240 2171 	movw	r1, #625	@ 0x271
 800982a:	4638      	mov	r0, r7
 800982c:	f7ff ff1a 	bl	8009664 <__i2b>
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	f8c8 0008 	str.w	r0, [r8, #8]
 8009838:	6003      	str	r3, [r0, #0]
 800983a:	f04f 0900 	mov.w	r9, #0
 800983e:	07eb      	lsls	r3, r5, #31
 8009840:	d50a      	bpl.n	8009858 <__pow5mult+0x84>
 8009842:	4631      	mov	r1, r6
 8009844:	4622      	mov	r2, r4
 8009846:	4638      	mov	r0, r7
 8009848:	f7ff ff22 	bl	8009690 <__multiply>
 800984c:	4680      	mov	r8, r0
 800984e:	4631      	mov	r1, r6
 8009850:	4638      	mov	r0, r7
 8009852:	f7ff fe53 	bl	80094fc <_Bfree>
 8009856:	4646      	mov	r6, r8
 8009858:	106d      	asrs	r5, r5, #1
 800985a:	d00b      	beq.n	8009874 <__pow5mult+0xa0>
 800985c:	6820      	ldr	r0, [r4, #0]
 800985e:	b938      	cbnz	r0, 8009870 <__pow5mult+0x9c>
 8009860:	4622      	mov	r2, r4
 8009862:	4621      	mov	r1, r4
 8009864:	4638      	mov	r0, r7
 8009866:	f7ff ff13 	bl	8009690 <__multiply>
 800986a:	6020      	str	r0, [r4, #0]
 800986c:	f8c0 9000 	str.w	r9, [r0]
 8009870:	4604      	mov	r4, r0
 8009872:	e7e4      	b.n	800983e <__pow5mult+0x6a>
 8009874:	4630      	mov	r0, r6
 8009876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987a:	bf00      	nop
 800987c:	0800b044 	.word	0x0800b044
 8009880:	0800af13 	.word	0x0800af13
 8009884:	0800af93 	.word	0x0800af93

08009888 <__lshift>:
 8009888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800988c:	460c      	mov	r4, r1
 800988e:	4607      	mov	r7, r0
 8009890:	4691      	mov	r9, r2
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	6849      	ldr	r1, [r1, #4]
 8009896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098a0:	f108 0601 	add.w	r6, r8, #1
 80098a4:	42b3      	cmp	r3, r6
 80098a6:	db0b      	blt.n	80098c0 <__lshift+0x38>
 80098a8:	4638      	mov	r0, r7
 80098aa:	f7ff fde7 	bl	800947c <_Balloc>
 80098ae:	4605      	mov	r5, r0
 80098b0:	b948      	cbnz	r0, 80098c6 <__lshift+0x3e>
 80098b2:	4602      	mov	r2, r0
 80098b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80098b8:	4b27      	ldr	r3, [pc, #156]	@ (8009958 <__lshift+0xd0>)
 80098ba:	4828      	ldr	r0, [pc, #160]	@ (800995c <__lshift+0xd4>)
 80098bc:	f000 fb90 	bl	8009fe0 <__assert_func>
 80098c0:	3101      	adds	r1, #1
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	e7ee      	b.n	80098a4 <__lshift+0x1c>
 80098c6:	2300      	movs	r3, #0
 80098c8:	f100 0114 	add.w	r1, r0, #20
 80098cc:	f100 0210 	add.w	r2, r0, #16
 80098d0:	4618      	mov	r0, r3
 80098d2:	4553      	cmp	r3, sl
 80098d4:	db33      	blt.n	800993e <__lshift+0xb6>
 80098d6:	6920      	ldr	r0, [r4, #16]
 80098d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098dc:	f104 0314 	add.w	r3, r4, #20
 80098e0:	f019 091f 	ands.w	r9, r9, #31
 80098e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098ec:	d02b      	beq.n	8009946 <__lshift+0xbe>
 80098ee:	468a      	mov	sl, r1
 80098f0:	2200      	movs	r2, #0
 80098f2:	f1c9 0e20 	rsb	lr, r9, #32
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	fa00 f009 	lsl.w	r0, r0, r9
 80098fc:	4310      	orrs	r0, r2
 80098fe:	f84a 0b04 	str.w	r0, [sl], #4
 8009902:	f853 2b04 	ldr.w	r2, [r3], #4
 8009906:	459c      	cmp	ip, r3
 8009908:	fa22 f20e 	lsr.w	r2, r2, lr
 800990c:	d8f3      	bhi.n	80098f6 <__lshift+0x6e>
 800990e:	ebac 0304 	sub.w	r3, ip, r4
 8009912:	3b15      	subs	r3, #21
 8009914:	f023 0303 	bic.w	r3, r3, #3
 8009918:	3304      	adds	r3, #4
 800991a:	f104 0015 	add.w	r0, r4, #21
 800991e:	4560      	cmp	r0, ip
 8009920:	bf88      	it	hi
 8009922:	2304      	movhi	r3, #4
 8009924:	50ca      	str	r2, [r1, r3]
 8009926:	b10a      	cbz	r2, 800992c <__lshift+0xa4>
 8009928:	f108 0602 	add.w	r6, r8, #2
 800992c:	3e01      	subs	r6, #1
 800992e:	4638      	mov	r0, r7
 8009930:	4621      	mov	r1, r4
 8009932:	612e      	str	r6, [r5, #16]
 8009934:	f7ff fde2 	bl	80094fc <_Bfree>
 8009938:	4628      	mov	r0, r5
 800993a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800993e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009942:	3301      	adds	r3, #1
 8009944:	e7c5      	b.n	80098d2 <__lshift+0x4a>
 8009946:	3904      	subs	r1, #4
 8009948:	f853 2b04 	ldr.w	r2, [r3], #4
 800994c:	459c      	cmp	ip, r3
 800994e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009952:	d8f9      	bhi.n	8009948 <__lshift+0xc0>
 8009954:	e7ea      	b.n	800992c <__lshift+0xa4>
 8009956:	bf00      	nop
 8009958:	0800af82 	.word	0x0800af82
 800995c:	0800af93 	.word	0x0800af93

08009960 <__mcmp>:
 8009960:	4603      	mov	r3, r0
 8009962:	690a      	ldr	r2, [r1, #16]
 8009964:	6900      	ldr	r0, [r0, #16]
 8009966:	b530      	push	{r4, r5, lr}
 8009968:	1a80      	subs	r0, r0, r2
 800996a:	d10e      	bne.n	800998a <__mcmp+0x2a>
 800996c:	3314      	adds	r3, #20
 800996e:	3114      	adds	r1, #20
 8009970:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009974:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009978:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800997c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009980:	4295      	cmp	r5, r2
 8009982:	d003      	beq.n	800998c <__mcmp+0x2c>
 8009984:	d205      	bcs.n	8009992 <__mcmp+0x32>
 8009986:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800998a:	bd30      	pop	{r4, r5, pc}
 800998c:	42a3      	cmp	r3, r4
 800998e:	d3f3      	bcc.n	8009978 <__mcmp+0x18>
 8009990:	e7fb      	b.n	800998a <__mcmp+0x2a>
 8009992:	2001      	movs	r0, #1
 8009994:	e7f9      	b.n	800998a <__mcmp+0x2a>
	...

08009998 <__mdiff>:
 8009998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	4689      	mov	r9, r1
 800999e:	4606      	mov	r6, r0
 80099a0:	4611      	mov	r1, r2
 80099a2:	4648      	mov	r0, r9
 80099a4:	4614      	mov	r4, r2
 80099a6:	f7ff ffdb 	bl	8009960 <__mcmp>
 80099aa:	1e05      	subs	r5, r0, #0
 80099ac:	d112      	bne.n	80099d4 <__mdiff+0x3c>
 80099ae:	4629      	mov	r1, r5
 80099b0:	4630      	mov	r0, r6
 80099b2:	f7ff fd63 	bl	800947c <_Balloc>
 80099b6:	4602      	mov	r2, r0
 80099b8:	b928      	cbnz	r0, 80099c6 <__mdiff+0x2e>
 80099ba:	f240 2137 	movw	r1, #567	@ 0x237
 80099be:	4b3e      	ldr	r3, [pc, #248]	@ (8009ab8 <__mdiff+0x120>)
 80099c0:	483e      	ldr	r0, [pc, #248]	@ (8009abc <__mdiff+0x124>)
 80099c2:	f000 fb0d 	bl	8009fe0 <__assert_func>
 80099c6:	2301      	movs	r3, #1
 80099c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099cc:	4610      	mov	r0, r2
 80099ce:	b003      	add	sp, #12
 80099d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d4:	bfbc      	itt	lt
 80099d6:	464b      	movlt	r3, r9
 80099d8:	46a1      	movlt	r9, r4
 80099da:	4630      	mov	r0, r6
 80099dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80099e0:	bfba      	itte	lt
 80099e2:	461c      	movlt	r4, r3
 80099e4:	2501      	movlt	r5, #1
 80099e6:	2500      	movge	r5, #0
 80099e8:	f7ff fd48 	bl	800947c <_Balloc>
 80099ec:	4602      	mov	r2, r0
 80099ee:	b918      	cbnz	r0, 80099f8 <__mdiff+0x60>
 80099f0:	f240 2145 	movw	r1, #581	@ 0x245
 80099f4:	4b30      	ldr	r3, [pc, #192]	@ (8009ab8 <__mdiff+0x120>)
 80099f6:	e7e3      	b.n	80099c0 <__mdiff+0x28>
 80099f8:	f100 0b14 	add.w	fp, r0, #20
 80099fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a00:	f109 0310 	add.w	r3, r9, #16
 8009a04:	60c5      	str	r5, [r0, #12]
 8009a06:	f04f 0c00 	mov.w	ip, #0
 8009a0a:	f109 0514 	add.w	r5, r9, #20
 8009a0e:	46d9      	mov	r9, fp
 8009a10:	6926      	ldr	r6, [r4, #16]
 8009a12:	f104 0e14 	add.w	lr, r4, #20
 8009a16:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a1a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	9b01      	ldr	r3, [sp, #4]
 8009a22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a2a:	b281      	uxth	r1, r0
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	fa1f f38a 	uxth.w	r3, sl
 8009a32:	1a5b      	subs	r3, r3, r1
 8009a34:	0c00      	lsrs	r0, r0, #16
 8009a36:	4463      	add	r3, ip
 8009a38:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a3c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a46:	4576      	cmp	r6, lr
 8009a48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a4c:	f849 3b04 	str.w	r3, [r9], #4
 8009a50:	d8e6      	bhi.n	8009a20 <__mdiff+0x88>
 8009a52:	1b33      	subs	r3, r6, r4
 8009a54:	3b15      	subs	r3, #21
 8009a56:	f023 0303 	bic.w	r3, r3, #3
 8009a5a:	3415      	adds	r4, #21
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	42a6      	cmp	r6, r4
 8009a60:	bf38      	it	cc
 8009a62:	2304      	movcc	r3, #4
 8009a64:	441d      	add	r5, r3
 8009a66:	445b      	add	r3, fp
 8009a68:	461e      	mov	r6, r3
 8009a6a:	462c      	mov	r4, r5
 8009a6c:	4544      	cmp	r4, r8
 8009a6e:	d30e      	bcc.n	8009a8e <__mdiff+0xf6>
 8009a70:	f108 0103 	add.w	r1, r8, #3
 8009a74:	1b49      	subs	r1, r1, r5
 8009a76:	f021 0103 	bic.w	r1, r1, #3
 8009a7a:	3d03      	subs	r5, #3
 8009a7c:	45a8      	cmp	r8, r5
 8009a7e:	bf38      	it	cc
 8009a80:	2100      	movcc	r1, #0
 8009a82:	440b      	add	r3, r1
 8009a84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a88:	b199      	cbz	r1, 8009ab2 <__mdiff+0x11a>
 8009a8a:	6117      	str	r7, [r2, #16]
 8009a8c:	e79e      	b.n	80099cc <__mdiff+0x34>
 8009a8e:	46e6      	mov	lr, ip
 8009a90:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a94:	fa1f fc81 	uxth.w	ip, r1
 8009a98:	44f4      	add	ip, lr
 8009a9a:	0c08      	lsrs	r0, r1, #16
 8009a9c:	4471      	add	r1, lr
 8009a9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009aa2:	b289      	uxth	r1, r1
 8009aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009aa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009aac:	f846 1b04 	str.w	r1, [r6], #4
 8009ab0:	e7dc      	b.n	8009a6c <__mdiff+0xd4>
 8009ab2:	3f01      	subs	r7, #1
 8009ab4:	e7e6      	b.n	8009a84 <__mdiff+0xec>
 8009ab6:	bf00      	nop
 8009ab8:	0800af82 	.word	0x0800af82
 8009abc:	0800af93 	.word	0x0800af93

08009ac0 <__d2b>:
 8009ac0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	4690      	mov	r8, r2
 8009ac8:	4699      	mov	r9, r3
 8009aca:	9e08      	ldr	r6, [sp, #32]
 8009acc:	f7ff fcd6 	bl	800947c <_Balloc>
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	b930      	cbnz	r0, 8009ae2 <__d2b+0x22>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ada:	4b23      	ldr	r3, [pc, #140]	@ (8009b68 <__d2b+0xa8>)
 8009adc:	4823      	ldr	r0, [pc, #140]	@ (8009b6c <__d2b+0xac>)
 8009ade:	f000 fa7f 	bl	8009fe0 <__assert_func>
 8009ae2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ae6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009aea:	b10d      	cbz	r5, 8009af0 <__d2b+0x30>
 8009aec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	f1b8 0300 	subs.w	r3, r8, #0
 8009af6:	d024      	beq.n	8009b42 <__d2b+0x82>
 8009af8:	4668      	mov	r0, sp
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	f7ff fd85 	bl	800960a <__lo0bits>
 8009b00:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b04:	b1d8      	cbz	r0, 8009b3e <__d2b+0x7e>
 8009b06:	f1c0 0320 	rsb	r3, r0, #32
 8009b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0e:	430b      	orrs	r3, r1
 8009b10:	40c2      	lsrs	r2, r0
 8009b12:	6163      	str	r3, [r4, #20]
 8009b14:	9201      	str	r2, [sp, #4]
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	bf0c      	ite	eq
 8009b1c:	2201      	moveq	r2, #1
 8009b1e:	2202      	movne	r2, #2
 8009b20:	61a3      	str	r3, [r4, #24]
 8009b22:	6122      	str	r2, [r4, #16]
 8009b24:	b1ad      	cbz	r5, 8009b52 <__d2b+0x92>
 8009b26:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009b2a:	4405      	add	r5, r0
 8009b2c:	6035      	str	r5, [r6, #0]
 8009b2e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b34:	6018      	str	r0, [r3, #0]
 8009b36:	4620      	mov	r0, r4
 8009b38:	b002      	add	sp, #8
 8009b3a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009b3e:	6161      	str	r1, [r4, #20]
 8009b40:	e7e9      	b.n	8009b16 <__d2b+0x56>
 8009b42:	a801      	add	r0, sp, #4
 8009b44:	f7ff fd61 	bl	800960a <__lo0bits>
 8009b48:	9b01      	ldr	r3, [sp, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	6163      	str	r3, [r4, #20]
 8009b4e:	3020      	adds	r0, #32
 8009b50:	e7e7      	b.n	8009b22 <__d2b+0x62>
 8009b52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009b56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b5a:	6030      	str	r0, [r6, #0]
 8009b5c:	6918      	ldr	r0, [r3, #16]
 8009b5e:	f7ff fd35 	bl	80095cc <__hi0bits>
 8009b62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b66:	e7e4      	b.n	8009b32 <__d2b+0x72>
 8009b68:	0800af82 	.word	0x0800af82
 8009b6c:	0800af93 	.word	0x0800af93

08009b70 <__ssputs_r>:
 8009b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b74:	461f      	mov	r7, r3
 8009b76:	688e      	ldr	r6, [r1, #8]
 8009b78:	4682      	mov	sl, r0
 8009b7a:	42be      	cmp	r6, r7
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	4690      	mov	r8, r2
 8009b80:	680b      	ldr	r3, [r1, #0]
 8009b82:	d82d      	bhi.n	8009be0 <__ssputs_r+0x70>
 8009b84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b8c:	d026      	beq.n	8009bdc <__ssputs_r+0x6c>
 8009b8e:	6965      	ldr	r5, [r4, #20]
 8009b90:	6909      	ldr	r1, [r1, #16]
 8009b92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b96:	eba3 0901 	sub.w	r9, r3, r1
 8009b9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b9e:	1c7b      	adds	r3, r7, #1
 8009ba0:	444b      	add	r3, r9
 8009ba2:	106d      	asrs	r5, r5, #1
 8009ba4:	429d      	cmp	r5, r3
 8009ba6:	bf38      	it	cc
 8009ba8:	461d      	movcc	r5, r3
 8009baa:	0553      	lsls	r3, r2, #21
 8009bac:	d527      	bpl.n	8009bfe <__ssputs_r+0x8e>
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f7ff fbd8 	bl	8009364 <_malloc_r>
 8009bb4:	4606      	mov	r6, r0
 8009bb6:	b360      	cbz	r0, 8009c12 <__ssputs_r+0xa2>
 8009bb8:	464a      	mov	r2, r9
 8009bba:	6921      	ldr	r1, [r4, #16]
 8009bbc:	f000 fa02 	bl	8009fc4 <memcpy>
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	6126      	str	r6, [r4, #16]
 8009bce:	444e      	add	r6, r9
 8009bd0:	6026      	str	r6, [r4, #0]
 8009bd2:	463e      	mov	r6, r7
 8009bd4:	6165      	str	r5, [r4, #20]
 8009bd6:	eba5 0509 	sub.w	r5, r5, r9
 8009bda:	60a5      	str	r5, [r4, #8]
 8009bdc:	42be      	cmp	r6, r7
 8009bde:	d900      	bls.n	8009be2 <__ssputs_r+0x72>
 8009be0:	463e      	mov	r6, r7
 8009be2:	4632      	mov	r2, r6
 8009be4:	4641      	mov	r1, r8
 8009be6:	6820      	ldr	r0, [r4, #0]
 8009be8:	f000 f9c2 	bl	8009f70 <memmove>
 8009bec:	2000      	movs	r0, #0
 8009bee:	68a3      	ldr	r3, [r4, #8]
 8009bf0:	1b9b      	subs	r3, r3, r6
 8009bf2:	60a3      	str	r3, [r4, #8]
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	4433      	add	r3, r6
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfe:	462a      	mov	r2, r5
 8009c00:	f000 fa32 	bl	800a068 <_realloc_r>
 8009c04:	4606      	mov	r6, r0
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d1e0      	bne.n	8009bcc <__ssputs_r+0x5c>
 8009c0a:	4650      	mov	r0, sl
 8009c0c:	6921      	ldr	r1, [r4, #16]
 8009c0e:	f7ff fb37 	bl	8009280 <_free_r>
 8009c12:	230c      	movs	r3, #12
 8009c14:	f8ca 3000 	str.w	r3, [sl]
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c22:	81a3      	strh	r3, [r4, #12]
 8009c24:	e7e9      	b.n	8009bfa <__ssputs_r+0x8a>
	...

08009c28 <_svfiprintf_r>:
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	4698      	mov	r8, r3
 8009c2e:	898b      	ldrh	r3, [r1, #12]
 8009c30:	4607      	mov	r7, r0
 8009c32:	061b      	lsls	r3, r3, #24
 8009c34:	460d      	mov	r5, r1
 8009c36:	4614      	mov	r4, r2
 8009c38:	b09d      	sub	sp, #116	@ 0x74
 8009c3a:	d510      	bpl.n	8009c5e <_svfiprintf_r+0x36>
 8009c3c:	690b      	ldr	r3, [r1, #16]
 8009c3e:	b973      	cbnz	r3, 8009c5e <_svfiprintf_r+0x36>
 8009c40:	2140      	movs	r1, #64	@ 0x40
 8009c42:	f7ff fb8f 	bl	8009364 <_malloc_r>
 8009c46:	6028      	str	r0, [r5, #0]
 8009c48:	6128      	str	r0, [r5, #16]
 8009c4a:	b930      	cbnz	r0, 8009c5a <_svfiprintf_r+0x32>
 8009c4c:	230c      	movs	r3, #12
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c54:	b01d      	add	sp, #116	@ 0x74
 8009c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5a:	2340      	movs	r3, #64	@ 0x40
 8009c5c:	616b      	str	r3, [r5, #20]
 8009c5e:	2300      	movs	r3, #0
 8009c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c62:	2320      	movs	r3, #32
 8009c64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c68:	2330      	movs	r3, #48	@ 0x30
 8009c6a:	f04f 0901 	mov.w	r9, #1
 8009c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c72:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009e0c <_svfiprintf_r+0x1e4>
 8009c76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	469a      	mov	sl, r3
 8009c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c82:	b10a      	cbz	r2, 8009c88 <_svfiprintf_r+0x60>
 8009c84:	2a25      	cmp	r2, #37	@ 0x25
 8009c86:	d1f9      	bne.n	8009c7c <_svfiprintf_r+0x54>
 8009c88:	ebba 0b04 	subs.w	fp, sl, r4
 8009c8c:	d00b      	beq.n	8009ca6 <_svfiprintf_r+0x7e>
 8009c8e:	465b      	mov	r3, fp
 8009c90:	4622      	mov	r2, r4
 8009c92:	4629      	mov	r1, r5
 8009c94:	4638      	mov	r0, r7
 8009c96:	f7ff ff6b 	bl	8009b70 <__ssputs_r>
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	f000 80a7 	beq.w	8009dee <_svfiprintf_r+0x1c6>
 8009ca0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ca2:	445a      	add	r2, fp
 8009ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f000 809f 	beq.w	8009dee <_svfiprintf_r+0x1c6>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cba:	f10a 0a01 	add.w	sl, sl, #1
 8009cbe:	9304      	str	r3, [sp, #16]
 8009cc0:	9307      	str	r3, [sp, #28]
 8009cc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cc8:	4654      	mov	r4, sl
 8009cca:	2205      	movs	r2, #5
 8009ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd0:	484e      	ldr	r0, [pc, #312]	@ (8009e0c <_svfiprintf_r+0x1e4>)
 8009cd2:	f7fe fc6a 	bl	80085aa <memchr>
 8009cd6:	9a04      	ldr	r2, [sp, #16]
 8009cd8:	b9d8      	cbnz	r0, 8009d12 <_svfiprintf_r+0xea>
 8009cda:	06d0      	lsls	r0, r2, #27
 8009cdc:	bf44      	itt	mi
 8009cde:	2320      	movmi	r3, #32
 8009ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ce4:	0711      	lsls	r1, r2, #28
 8009ce6:	bf44      	itt	mi
 8009ce8:	232b      	movmi	r3, #43	@ 0x2b
 8009cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cee:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cf4:	d015      	beq.n	8009d22 <_svfiprintf_r+0xfa>
 8009cf6:	4654      	mov	r4, sl
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	f04f 0c0a 	mov.w	ip, #10
 8009cfe:	9a07      	ldr	r2, [sp, #28]
 8009d00:	4621      	mov	r1, r4
 8009d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d06:	3b30      	subs	r3, #48	@ 0x30
 8009d08:	2b09      	cmp	r3, #9
 8009d0a:	d94b      	bls.n	8009da4 <_svfiprintf_r+0x17c>
 8009d0c:	b1b0      	cbz	r0, 8009d3c <_svfiprintf_r+0x114>
 8009d0e:	9207      	str	r2, [sp, #28]
 8009d10:	e014      	b.n	8009d3c <_svfiprintf_r+0x114>
 8009d12:	eba0 0308 	sub.w	r3, r0, r8
 8009d16:	fa09 f303 	lsl.w	r3, r9, r3
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	46a2      	mov	sl, r4
 8009d1e:	9304      	str	r3, [sp, #16]
 8009d20:	e7d2      	b.n	8009cc8 <_svfiprintf_r+0xa0>
 8009d22:	9b03      	ldr	r3, [sp, #12]
 8009d24:	1d19      	adds	r1, r3, #4
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	9103      	str	r1, [sp, #12]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	bfbb      	ittet	lt
 8009d2e:	425b      	neglt	r3, r3
 8009d30:	f042 0202 	orrlt.w	r2, r2, #2
 8009d34:	9307      	strge	r3, [sp, #28]
 8009d36:	9307      	strlt	r3, [sp, #28]
 8009d38:	bfb8      	it	lt
 8009d3a:	9204      	strlt	r2, [sp, #16]
 8009d3c:	7823      	ldrb	r3, [r4, #0]
 8009d3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d40:	d10a      	bne.n	8009d58 <_svfiprintf_r+0x130>
 8009d42:	7863      	ldrb	r3, [r4, #1]
 8009d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d46:	d132      	bne.n	8009dae <_svfiprintf_r+0x186>
 8009d48:	9b03      	ldr	r3, [sp, #12]
 8009d4a:	3402      	adds	r4, #2
 8009d4c:	1d1a      	adds	r2, r3, #4
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	9203      	str	r2, [sp, #12]
 8009d52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d56:	9305      	str	r3, [sp, #20]
 8009d58:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009e10 <_svfiprintf_r+0x1e8>
 8009d5c:	2203      	movs	r2, #3
 8009d5e:	4650      	mov	r0, sl
 8009d60:	7821      	ldrb	r1, [r4, #0]
 8009d62:	f7fe fc22 	bl	80085aa <memchr>
 8009d66:	b138      	cbz	r0, 8009d78 <_svfiprintf_r+0x150>
 8009d68:	2240      	movs	r2, #64	@ 0x40
 8009d6a:	9b04      	ldr	r3, [sp, #16]
 8009d6c:	eba0 000a 	sub.w	r0, r0, sl
 8009d70:	4082      	lsls	r2, r0
 8009d72:	4313      	orrs	r3, r2
 8009d74:	3401      	adds	r4, #1
 8009d76:	9304      	str	r3, [sp, #16]
 8009d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d7c:	2206      	movs	r2, #6
 8009d7e:	4825      	ldr	r0, [pc, #148]	@ (8009e14 <_svfiprintf_r+0x1ec>)
 8009d80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d84:	f7fe fc11 	bl	80085aa <memchr>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d036      	beq.n	8009dfa <_svfiprintf_r+0x1d2>
 8009d8c:	4b22      	ldr	r3, [pc, #136]	@ (8009e18 <_svfiprintf_r+0x1f0>)
 8009d8e:	bb1b      	cbnz	r3, 8009dd8 <_svfiprintf_r+0x1b0>
 8009d90:	9b03      	ldr	r3, [sp, #12]
 8009d92:	3307      	adds	r3, #7
 8009d94:	f023 0307 	bic.w	r3, r3, #7
 8009d98:	3308      	adds	r3, #8
 8009d9a:	9303      	str	r3, [sp, #12]
 8009d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9e:	4433      	add	r3, r6
 8009da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009da2:	e76a      	b.n	8009c7a <_svfiprintf_r+0x52>
 8009da4:	460c      	mov	r4, r1
 8009da6:	2001      	movs	r0, #1
 8009da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dac:	e7a8      	b.n	8009d00 <_svfiprintf_r+0xd8>
 8009dae:	2300      	movs	r3, #0
 8009db0:	f04f 0c0a 	mov.w	ip, #10
 8009db4:	4619      	mov	r1, r3
 8009db6:	3401      	adds	r4, #1
 8009db8:	9305      	str	r3, [sp, #20]
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dc0:	3a30      	subs	r2, #48	@ 0x30
 8009dc2:	2a09      	cmp	r2, #9
 8009dc4:	d903      	bls.n	8009dce <_svfiprintf_r+0x1a6>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d0c6      	beq.n	8009d58 <_svfiprintf_r+0x130>
 8009dca:	9105      	str	r1, [sp, #20]
 8009dcc:	e7c4      	b.n	8009d58 <_svfiprintf_r+0x130>
 8009dce:	4604      	mov	r4, r0
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dd6:	e7f0      	b.n	8009dba <_svfiprintf_r+0x192>
 8009dd8:	ab03      	add	r3, sp, #12
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	462a      	mov	r2, r5
 8009dde:	4638      	mov	r0, r7
 8009de0:	4b0e      	ldr	r3, [pc, #56]	@ (8009e1c <_svfiprintf_r+0x1f4>)
 8009de2:	a904      	add	r1, sp, #16
 8009de4:	f7fd fe7e 	bl	8007ae4 <_printf_float>
 8009de8:	1c42      	adds	r2, r0, #1
 8009dea:	4606      	mov	r6, r0
 8009dec:	d1d6      	bne.n	8009d9c <_svfiprintf_r+0x174>
 8009dee:	89ab      	ldrh	r3, [r5, #12]
 8009df0:	065b      	lsls	r3, r3, #25
 8009df2:	f53f af2d 	bmi.w	8009c50 <_svfiprintf_r+0x28>
 8009df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009df8:	e72c      	b.n	8009c54 <_svfiprintf_r+0x2c>
 8009dfa:	ab03      	add	r3, sp, #12
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	462a      	mov	r2, r5
 8009e00:	4638      	mov	r0, r7
 8009e02:	4b06      	ldr	r3, [pc, #24]	@ (8009e1c <_svfiprintf_r+0x1f4>)
 8009e04:	a904      	add	r1, sp, #16
 8009e06:	f7fe f90b 	bl	8008020 <_printf_i>
 8009e0a:	e7ed      	b.n	8009de8 <_svfiprintf_r+0x1c0>
 8009e0c:	0800afec 	.word	0x0800afec
 8009e10:	0800aff2 	.word	0x0800aff2
 8009e14:	0800aff6 	.word	0x0800aff6
 8009e18:	08007ae5 	.word	0x08007ae5
 8009e1c:	08009b71 	.word	0x08009b71

08009e20 <__sflush_r>:
 8009e20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	0716      	lsls	r6, r2, #28
 8009e28:	4605      	mov	r5, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	d454      	bmi.n	8009ed8 <__sflush_r+0xb8>
 8009e2e:	684b      	ldr	r3, [r1, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	dc02      	bgt.n	8009e3a <__sflush_r+0x1a>
 8009e34:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	dd48      	ble.n	8009ecc <__sflush_r+0xac>
 8009e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e3c:	2e00      	cmp	r6, #0
 8009e3e:	d045      	beq.n	8009ecc <__sflush_r+0xac>
 8009e40:	2300      	movs	r3, #0
 8009e42:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e46:	682f      	ldr	r7, [r5, #0]
 8009e48:	6a21      	ldr	r1, [r4, #32]
 8009e4a:	602b      	str	r3, [r5, #0]
 8009e4c:	d030      	beq.n	8009eb0 <__sflush_r+0x90>
 8009e4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	0759      	lsls	r1, r3, #29
 8009e54:	d505      	bpl.n	8009e62 <__sflush_r+0x42>
 8009e56:	6863      	ldr	r3, [r4, #4]
 8009e58:	1ad2      	subs	r2, r2, r3
 8009e5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e5c:	b10b      	cbz	r3, 8009e62 <__sflush_r+0x42>
 8009e5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e60:	1ad2      	subs	r2, r2, r3
 8009e62:	2300      	movs	r3, #0
 8009e64:	4628      	mov	r0, r5
 8009e66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e68:	6a21      	ldr	r1, [r4, #32]
 8009e6a:	47b0      	blx	r6
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	d106      	bne.n	8009e80 <__sflush_r+0x60>
 8009e72:	6829      	ldr	r1, [r5, #0]
 8009e74:	291d      	cmp	r1, #29
 8009e76:	d82b      	bhi.n	8009ed0 <__sflush_r+0xb0>
 8009e78:	4a28      	ldr	r2, [pc, #160]	@ (8009f1c <__sflush_r+0xfc>)
 8009e7a:	40ca      	lsrs	r2, r1
 8009e7c:	07d6      	lsls	r6, r2, #31
 8009e7e:	d527      	bpl.n	8009ed0 <__sflush_r+0xb0>
 8009e80:	2200      	movs	r2, #0
 8009e82:	6062      	str	r2, [r4, #4]
 8009e84:	6922      	ldr	r2, [r4, #16]
 8009e86:	04d9      	lsls	r1, r3, #19
 8009e88:	6022      	str	r2, [r4, #0]
 8009e8a:	d504      	bpl.n	8009e96 <__sflush_r+0x76>
 8009e8c:	1c42      	adds	r2, r0, #1
 8009e8e:	d101      	bne.n	8009e94 <__sflush_r+0x74>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b903      	cbnz	r3, 8009e96 <__sflush_r+0x76>
 8009e94:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e98:	602f      	str	r7, [r5, #0]
 8009e9a:	b1b9      	cbz	r1, 8009ecc <__sflush_r+0xac>
 8009e9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ea0:	4299      	cmp	r1, r3
 8009ea2:	d002      	beq.n	8009eaa <__sflush_r+0x8a>
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f7ff f9eb 	bl	8009280 <_free_r>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	6363      	str	r3, [r4, #52]	@ 0x34
 8009eae:	e00d      	b.n	8009ecc <__sflush_r+0xac>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	47b0      	blx	r6
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	1c50      	adds	r0, r2, #1
 8009eba:	d1c9      	bne.n	8009e50 <__sflush_r+0x30>
 8009ebc:	682b      	ldr	r3, [r5, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0c6      	beq.n	8009e50 <__sflush_r+0x30>
 8009ec2:	2b1d      	cmp	r3, #29
 8009ec4:	d001      	beq.n	8009eca <__sflush_r+0xaa>
 8009ec6:	2b16      	cmp	r3, #22
 8009ec8:	d11d      	bne.n	8009f06 <__sflush_r+0xe6>
 8009eca:	602f      	str	r7, [r5, #0]
 8009ecc:	2000      	movs	r0, #0
 8009ece:	e021      	b.n	8009f14 <__sflush_r+0xf4>
 8009ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ed4:	b21b      	sxth	r3, r3
 8009ed6:	e01a      	b.n	8009f0e <__sflush_r+0xee>
 8009ed8:	690f      	ldr	r7, [r1, #16]
 8009eda:	2f00      	cmp	r7, #0
 8009edc:	d0f6      	beq.n	8009ecc <__sflush_r+0xac>
 8009ede:	0793      	lsls	r3, r2, #30
 8009ee0:	bf18      	it	ne
 8009ee2:	2300      	movne	r3, #0
 8009ee4:	680e      	ldr	r6, [r1, #0]
 8009ee6:	bf08      	it	eq
 8009ee8:	694b      	ldreq	r3, [r1, #20]
 8009eea:	1bf6      	subs	r6, r6, r7
 8009eec:	600f      	str	r7, [r1, #0]
 8009eee:	608b      	str	r3, [r1, #8]
 8009ef0:	2e00      	cmp	r6, #0
 8009ef2:	ddeb      	ble.n	8009ecc <__sflush_r+0xac>
 8009ef4:	4633      	mov	r3, r6
 8009ef6:	463a      	mov	r2, r7
 8009ef8:	4628      	mov	r0, r5
 8009efa:	6a21      	ldr	r1, [r4, #32]
 8009efc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009f00:	47e0      	blx	ip
 8009f02:	2800      	cmp	r0, #0
 8009f04:	dc07      	bgt.n	8009f16 <__sflush_r+0xf6>
 8009f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f12:	81a3      	strh	r3, [r4, #12]
 8009f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f16:	4407      	add	r7, r0
 8009f18:	1a36      	subs	r6, r6, r0
 8009f1a:	e7e9      	b.n	8009ef0 <__sflush_r+0xd0>
 8009f1c:	20400001 	.word	0x20400001

08009f20 <_fflush_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	690b      	ldr	r3, [r1, #16]
 8009f24:	4605      	mov	r5, r0
 8009f26:	460c      	mov	r4, r1
 8009f28:	b913      	cbnz	r3, 8009f30 <_fflush_r+0x10>
 8009f2a:	2500      	movs	r5, #0
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	b118      	cbz	r0, 8009f3a <_fflush_r+0x1a>
 8009f32:	6a03      	ldr	r3, [r0, #32]
 8009f34:	b90b      	cbnz	r3, 8009f3a <_fflush_r+0x1a>
 8009f36:	f7fe fa1d 	bl	8008374 <__sinit>
 8009f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0f3      	beq.n	8009f2a <_fflush_r+0xa>
 8009f42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f44:	07d0      	lsls	r0, r2, #31
 8009f46:	d404      	bmi.n	8009f52 <_fflush_r+0x32>
 8009f48:	0599      	lsls	r1, r3, #22
 8009f4a:	d402      	bmi.n	8009f52 <_fflush_r+0x32>
 8009f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f4e:	f7fe fb2a 	bl	80085a6 <__retarget_lock_acquire_recursive>
 8009f52:	4628      	mov	r0, r5
 8009f54:	4621      	mov	r1, r4
 8009f56:	f7ff ff63 	bl	8009e20 <__sflush_r>
 8009f5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	07da      	lsls	r2, r3, #31
 8009f60:	d4e4      	bmi.n	8009f2c <_fflush_r+0xc>
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	059b      	lsls	r3, r3, #22
 8009f66:	d4e1      	bmi.n	8009f2c <_fflush_r+0xc>
 8009f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f6a:	f7fe fb1d 	bl	80085a8 <__retarget_lock_release_recursive>
 8009f6e:	e7dd      	b.n	8009f2c <_fflush_r+0xc>

08009f70 <memmove>:
 8009f70:	4288      	cmp	r0, r1
 8009f72:	b510      	push	{r4, lr}
 8009f74:	eb01 0402 	add.w	r4, r1, r2
 8009f78:	d902      	bls.n	8009f80 <memmove+0x10>
 8009f7a:	4284      	cmp	r4, r0
 8009f7c:	4623      	mov	r3, r4
 8009f7e:	d807      	bhi.n	8009f90 <memmove+0x20>
 8009f80:	1e43      	subs	r3, r0, #1
 8009f82:	42a1      	cmp	r1, r4
 8009f84:	d008      	beq.n	8009f98 <memmove+0x28>
 8009f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f8e:	e7f8      	b.n	8009f82 <memmove+0x12>
 8009f90:	4601      	mov	r1, r0
 8009f92:	4402      	add	r2, r0
 8009f94:	428a      	cmp	r2, r1
 8009f96:	d100      	bne.n	8009f9a <memmove+0x2a>
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009fa2:	e7f7      	b.n	8009f94 <memmove+0x24>

08009fa4 <_sbrk_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	4d05      	ldr	r5, [pc, #20]	@ (8009fc0 <_sbrk_r+0x1c>)
 8009faa:	4604      	mov	r4, r0
 8009fac:	4608      	mov	r0, r1
 8009fae:	602b      	str	r3, [r5, #0]
 8009fb0:	f7f9 f804 	bl	8002fbc <_sbrk>
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	d102      	bne.n	8009fbe <_sbrk_r+0x1a>
 8009fb8:	682b      	ldr	r3, [r5, #0]
 8009fba:	b103      	cbz	r3, 8009fbe <_sbrk_r+0x1a>
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	200009fc 	.word	0x200009fc

08009fc4 <memcpy>:
 8009fc4:	440a      	add	r2, r1
 8009fc6:	4291      	cmp	r1, r2
 8009fc8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009fcc:	d100      	bne.n	8009fd0 <memcpy+0xc>
 8009fce:	4770      	bx	lr
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fd6:	4291      	cmp	r1, r2
 8009fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fdc:	d1f9      	bne.n	8009fd2 <memcpy+0xe>
 8009fde:	bd10      	pop	{r4, pc}

08009fe0 <__assert_func>:
 8009fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fe2:	4614      	mov	r4, r2
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	4b09      	ldr	r3, [pc, #36]	@ (800a00c <__assert_func+0x2c>)
 8009fe8:	4605      	mov	r5, r0
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68d8      	ldr	r0, [r3, #12]
 8009fee:	b14c      	cbz	r4, 800a004 <__assert_func+0x24>
 8009ff0:	4b07      	ldr	r3, [pc, #28]	@ (800a010 <__assert_func+0x30>)
 8009ff2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ff6:	9100      	str	r1, [sp, #0]
 8009ff8:	462b      	mov	r3, r5
 8009ffa:	4906      	ldr	r1, [pc, #24]	@ (800a014 <__assert_func+0x34>)
 8009ffc:	f000 f870 	bl	800a0e0 <fiprintf>
 800a000:	f000 f880 	bl	800a104 <abort>
 800a004:	4b04      	ldr	r3, [pc, #16]	@ (800a018 <__assert_func+0x38>)
 800a006:	461c      	mov	r4, r3
 800a008:	e7f3      	b.n	8009ff2 <__assert_func+0x12>
 800a00a:	bf00      	nop
 800a00c:	2000003c 	.word	0x2000003c
 800a010:	0800b007 	.word	0x0800b007
 800a014:	0800b014 	.word	0x0800b014
 800a018:	0800b042 	.word	0x0800b042

0800a01c <_calloc_r>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	fba1 5402 	umull	r5, r4, r1, r2
 800a022:	b934      	cbnz	r4, 800a032 <_calloc_r+0x16>
 800a024:	4629      	mov	r1, r5
 800a026:	f7ff f99d 	bl	8009364 <_malloc_r>
 800a02a:	4606      	mov	r6, r0
 800a02c:	b928      	cbnz	r0, 800a03a <_calloc_r+0x1e>
 800a02e:	4630      	mov	r0, r6
 800a030:	bd70      	pop	{r4, r5, r6, pc}
 800a032:	220c      	movs	r2, #12
 800a034:	2600      	movs	r6, #0
 800a036:	6002      	str	r2, [r0, #0]
 800a038:	e7f9      	b.n	800a02e <_calloc_r+0x12>
 800a03a:	462a      	mov	r2, r5
 800a03c:	4621      	mov	r1, r4
 800a03e:	f7fe fa34 	bl	80084aa <memset>
 800a042:	e7f4      	b.n	800a02e <_calloc_r+0x12>

0800a044 <__ascii_mbtowc>:
 800a044:	b082      	sub	sp, #8
 800a046:	b901      	cbnz	r1, 800a04a <__ascii_mbtowc+0x6>
 800a048:	a901      	add	r1, sp, #4
 800a04a:	b142      	cbz	r2, 800a05e <__ascii_mbtowc+0x1a>
 800a04c:	b14b      	cbz	r3, 800a062 <__ascii_mbtowc+0x1e>
 800a04e:	7813      	ldrb	r3, [r2, #0]
 800a050:	600b      	str	r3, [r1, #0]
 800a052:	7812      	ldrb	r2, [r2, #0]
 800a054:	1e10      	subs	r0, r2, #0
 800a056:	bf18      	it	ne
 800a058:	2001      	movne	r0, #1
 800a05a:	b002      	add	sp, #8
 800a05c:	4770      	bx	lr
 800a05e:	4610      	mov	r0, r2
 800a060:	e7fb      	b.n	800a05a <__ascii_mbtowc+0x16>
 800a062:	f06f 0001 	mvn.w	r0, #1
 800a066:	e7f8      	b.n	800a05a <__ascii_mbtowc+0x16>

0800a068 <_realloc_r>:
 800a068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06c:	4607      	mov	r7, r0
 800a06e:	4614      	mov	r4, r2
 800a070:	460d      	mov	r5, r1
 800a072:	b921      	cbnz	r1, 800a07e <_realloc_r+0x16>
 800a074:	4611      	mov	r1, r2
 800a076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a07a:	f7ff b973 	b.w	8009364 <_malloc_r>
 800a07e:	b92a      	cbnz	r2, 800a08c <_realloc_r+0x24>
 800a080:	f7ff f8fe 	bl	8009280 <_free_r>
 800a084:	4625      	mov	r5, r4
 800a086:	4628      	mov	r0, r5
 800a088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a08c:	f000 f841 	bl	800a112 <_malloc_usable_size_r>
 800a090:	4284      	cmp	r4, r0
 800a092:	4606      	mov	r6, r0
 800a094:	d802      	bhi.n	800a09c <_realloc_r+0x34>
 800a096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a09a:	d8f4      	bhi.n	800a086 <_realloc_r+0x1e>
 800a09c:	4621      	mov	r1, r4
 800a09e:	4638      	mov	r0, r7
 800a0a0:	f7ff f960 	bl	8009364 <_malloc_r>
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	b908      	cbnz	r0, 800a0ac <_realloc_r+0x44>
 800a0a8:	4645      	mov	r5, r8
 800a0aa:	e7ec      	b.n	800a086 <_realloc_r+0x1e>
 800a0ac:	42b4      	cmp	r4, r6
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	bf28      	it	cs
 800a0b4:	4632      	movcs	r2, r6
 800a0b6:	f7ff ff85 	bl	8009fc4 <memcpy>
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	4638      	mov	r0, r7
 800a0be:	f7ff f8df 	bl	8009280 <_free_r>
 800a0c2:	e7f1      	b.n	800a0a8 <_realloc_r+0x40>

0800a0c4 <__ascii_wctomb>:
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	b141      	cbz	r1, 800a0dc <__ascii_wctomb+0x18>
 800a0ca:	2aff      	cmp	r2, #255	@ 0xff
 800a0cc:	d904      	bls.n	800a0d8 <__ascii_wctomb+0x14>
 800a0ce:	228a      	movs	r2, #138	@ 0x8a
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	4770      	bx	lr
 800a0d8:	2001      	movs	r0, #1
 800a0da:	700a      	strb	r2, [r1, #0]
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <fiprintf>:
 800a0e0:	b40e      	push	{r1, r2, r3}
 800a0e2:	b503      	push	{r0, r1, lr}
 800a0e4:	4601      	mov	r1, r0
 800a0e6:	ab03      	add	r3, sp, #12
 800a0e8:	4805      	ldr	r0, [pc, #20]	@ (800a100 <fiprintf+0x20>)
 800a0ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ee:	6800      	ldr	r0, [r0, #0]
 800a0f0:	9301      	str	r3, [sp, #4]
 800a0f2:	f000 f83d 	bl	800a170 <_vfiprintf_r>
 800a0f6:	b002      	add	sp, #8
 800a0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0fc:	b003      	add	sp, #12
 800a0fe:	4770      	bx	lr
 800a100:	2000003c 	.word	0x2000003c

0800a104 <abort>:
 800a104:	2006      	movs	r0, #6
 800a106:	b508      	push	{r3, lr}
 800a108:	f000 fa06 	bl	800a518 <raise>
 800a10c:	2001      	movs	r0, #1
 800a10e:	f7f8 fee0 	bl	8002ed2 <_exit>

0800a112 <_malloc_usable_size_r>:
 800a112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a116:	1f18      	subs	r0, r3, #4
 800a118:	2b00      	cmp	r3, #0
 800a11a:	bfbc      	itt	lt
 800a11c:	580b      	ldrlt	r3, [r1, r0]
 800a11e:	18c0      	addlt	r0, r0, r3
 800a120:	4770      	bx	lr

0800a122 <__sfputc_r>:
 800a122:	6893      	ldr	r3, [r2, #8]
 800a124:	b410      	push	{r4}
 800a126:	3b01      	subs	r3, #1
 800a128:	2b00      	cmp	r3, #0
 800a12a:	6093      	str	r3, [r2, #8]
 800a12c:	da07      	bge.n	800a13e <__sfputc_r+0x1c>
 800a12e:	6994      	ldr	r4, [r2, #24]
 800a130:	42a3      	cmp	r3, r4
 800a132:	db01      	blt.n	800a138 <__sfputc_r+0x16>
 800a134:	290a      	cmp	r1, #10
 800a136:	d102      	bne.n	800a13e <__sfputc_r+0x1c>
 800a138:	bc10      	pop	{r4}
 800a13a:	f000 b931 	b.w	800a3a0 <__swbuf_r>
 800a13e:	6813      	ldr	r3, [r2, #0]
 800a140:	1c58      	adds	r0, r3, #1
 800a142:	6010      	str	r0, [r2, #0]
 800a144:	7019      	strb	r1, [r3, #0]
 800a146:	4608      	mov	r0, r1
 800a148:	bc10      	pop	{r4}
 800a14a:	4770      	bx	lr

0800a14c <__sfputs_r>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	4606      	mov	r6, r0
 800a150:	460f      	mov	r7, r1
 800a152:	4614      	mov	r4, r2
 800a154:	18d5      	adds	r5, r2, r3
 800a156:	42ac      	cmp	r4, r5
 800a158:	d101      	bne.n	800a15e <__sfputs_r+0x12>
 800a15a:	2000      	movs	r0, #0
 800a15c:	e007      	b.n	800a16e <__sfputs_r+0x22>
 800a15e:	463a      	mov	r2, r7
 800a160:	4630      	mov	r0, r6
 800a162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a166:	f7ff ffdc 	bl	800a122 <__sfputc_r>
 800a16a:	1c43      	adds	r3, r0, #1
 800a16c:	d1f3      	bne.n	800a156 <__sfputs_r+0xa>
 800a16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a170 <_vfiprintf_r>:
 800a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a174:	460d      	mov	r5, r1
 800a176:	4614      	mov	r4, r2
 800a178:	4698      	mov	r8, r3
 800a17a:	4606      	mov	r6, r0
 800a17c:	b09d      	sub	sp, #116	@ 0x74
 800a17e:	b118      	cbz	r0, 800a188 <_vfiprintf_r+0x18>
 800a180:	6a03      	ldr	r3, [r0, #32]
 800a182:	b90b      	cbnz	r3, 800a188 <_vfiprintf_r+0x18>
 800a184:	f7fe f8f6 	bl	8008374 <__sinit>
 800a188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a18a:	07d9      	lsls	r1, r3, #31
 800a18c:	d405      	bmi.n	800a19a <_vfiprintf_r+0x2a>
 800a18e:	89ab      	ldrh	r3, [r5, #12]
 800a190:	059a      	lsls	r2, r3, #22
 800a192:	d402      	bmi.n	800a19a <_vfiprintf_r+0x2a>
 800a194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a196:	f7fe fa06 	bl	80085a6 <__retarget_lock_acquire_recursive>
 800a19a:	89ab      	ldrh	r3, [r5, #12]
 800a19c:	071b      	lsls	r3, r3, #28
 800a19e:	d501      	bpl.n	800a1a4 <_vfiprintf_r+0x34>
 800a1a0:	692b      	ldr	r3, [r5, #16]
 800a1a2:	b99b      	cbnz	r3, 800a1cc <_vfiprintf_r+0x5c>
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f000 f938 	bl	800a41c <__swsetup_r>
 800a1ac:	b170      	cbz	r0, 800a1cc <_vfiprintf_r+0x5c>
 800a1ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1b0:	07dc      	lsls	r4, r3, #31
 800a1b2:	d504      	bpl.n	800a1be <_vfiprintf_r+0x4e>
 800a1b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1b8:	b01d      	add	sp, #116	@ 0x74
 800a1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1be:	89ab      	ldrh	r3, [r5, #12]
 800a1c0:	0598      	lsls	r0, r3, #22
 800a1c2:	d4f7      	bmi.n	800a1b4 <_vfiprintf_r+0x44>
 800a1c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1c6:	f7fe f9ef 	bl	80085a8 <__retarget_lock_release_recursive>
 800a1ca:	e7f3      	b.n	800a1b4 <_vfiprintf_r+0x44>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1d0:	2320      	movs	r3, #32
 800a1d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1d6:	2330      	movs	r3, #48	@ 0x30
 800a1d8:	f04f 0901 	mov.w	r9, #1
 800a1dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1e0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a38c <_vfiprintf_r+0x21c>
 800a1e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1e8:	4623      	mov	r3, r4
 800a1ea:	469a      	mov	sl, r3
 800a1ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1f0:	b10a      	cbz	r2, 800a1f6 <_vfiprintf_r+0x86>
 800a1f2:	2a25      	cmp	r2, #37	@ 0x25
 800a1f4:	d1f9      	bne.n	800a1ea <_vfiprintf_r+0x7a>
 800a1f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a1fa:	d00b      	beq.n	800a214 <_vfiprintf_r+0xa4>
 800a1fc:	465b      	mov	r3, fp
 800a1fe:	4622      	mov	r2, r4
 800a200:	4629      	mov	r1, r5
 800a202:	4630      	mov	r0, r6
 800a204:	f7ff ffa2 	bl	800a14c <__sfputs_r>
 800a208:	3001      	adds	r0, #1
 800a20a:	f000 80a7 	beq.w	800a35c <_vfiprintf_r+0x1ec>
 800a20e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a210:	445a      	add	r2, fp
 800a212:	9209      	str	r2, [sp, #36]	@ 0x24
 800a214:	f89a 3000 	ldrb.w	r3, [sl]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 809f 	beq.w	800a35c <_vfiprintf_r+0x1ec>
 800a21e:	2300      	movs	r3, #0
 800a220:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a228:	f10a 0a01 	add.w	sl, sl, #1
 800a22c:	9304      	str	r3, [sp, #16]
 800a22e:	9307      	str	r3, [sp, #28]
 800a230:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a234:	931a      	str	r3, [sp, #104]	@ 0x68
 800a236:	4654      	mov	r4, sl
 800a238:	2205      	movs	r2, #5
 800a23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23e:	4853      	ldr	r0, [pc, #332]	@ (800a38c <_vfiprintf_r+0x21c>)
 800a240:	f7fe f9b3 	bl	80085aa <memchr>
 800a244:	9a04      	ldr	r2, [sp, #16]
 800a246:	b9d8      	cbnz	r0, 800a280 <_vfiprintf_r+0x110>
 800a248:	06d1      	lsls	r1, r2, #27
 800a24a:	bf44      	itt	mi
 800a24c:	2320      	movmi	r3, #32
 800a24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a252:	0713      	lsls	r3, r2, #28
 800a254:	bf44      	itt	mi
 800a256:	232b      	movmi	r3, #43	@ 0x2b
 800a258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a25c:	f89a 3000 	ldrb.w	r3, [sl]
 800a260:	2b2a      	cmp	r3, #42	@ 0x2a
 800a262:	d015      	beq.n	800a290 <_vfiprintf_r+0x120>
 800a264:	4654      	mov	r4, sl
 800a266:	2000      	movs	r0, #0
 800a268:	f04f 0c0a 	mov.w	ip, #10
 800a26c:	9a07      	ldr	r2, [sp, #28]
 800a26e:	4621      	mov	r1, r4
 800a270:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a274:	3b30      	subs	r3, #48	@ 0x30
 800a276:	2b09      	cmp	r3, #9
 800a278:	d94b      	bls.n	800a312 <_vfiprintf_r+0x1a2>
 800a27a:	b1b0      	cbz	r0, 800a2aa <_vfiprintf_r+0x13a>
 800a27c:	9207      	str	r2, [sp, #28]
 800a27e:	e014      	b.n	800a2aa <_vfiprintf_r+0x13a>
 800a280:	eba0 0308 	sub.w	r3, r0, r8
 800a284:	fa09 f303 	lsl.w	r3, r9, r3
 800a288:	4313      	orrs	r3, r2
 800a28a:	46a2      	mov	sl, r4
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	e7d2      	b.n	800a236 <_vfiprintf_r+0xc6>
 800a290:	9b03      	ldr	r3, [sp, #12]
 800a292:	1d19      	adds	r1, r3, #4
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	9103      	str	r1, [sp, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	bfbb      	ittet	lt
 800a29c:	425b      	neglt	r3, r3
 800a29e:	f042 0202 	orrlt.w	r2, r2, #2
 800a2a2:	9307      	strge	r3, [sp, #28]
 800a2a4:	9307      	strlt	r3, [sp, #28]
 800a2a6:	bfb8      	it	lt
 800a2a8:	9204      	strlt	r2, [sp, #16]
 800a2aa:	7823      	ldrb	r3, [r4, #0]
 800a2ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2ae:	d10a      	bne.n	800a2c6 <_vfiprintf_r+0x156>
 800a2b0:	7863      	ldrb	r3, [r4, #1]
 800a2b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2b4:	d132      	bne.n	800a31c <_vfiprintf_r+0x1ac>
 800a2b6:	9b03      	ldr	r3, [sp, #12]
 800a2b8:	3402      	adds	r4, #2
 800a2ba:	1d1a      	adds	r2, r3, #4
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	9203      	str	r2, [sp, #12]
 800a2c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2c4:	9305      	str	r3, [sp, #20]
 800a2c6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a390 <_vfiprintf_r+0x220>
 800a2ca:	2203      	movs	r2, #3
 800a2cc:	4650      	mov	r0, sl
 800a2ce:	7821      	ldrb	r1, [r4, #0]
 800a2d0:	f7fe f96b 	bl	80085aa <memchr>
 800a2d4:	b138      	cbz	r0, 800a2e6 <_vfiprintf_r+0x176>
 800a2d6:	2240      	movs	r2, #64	@ 0x40
 800a2d8:	9b04      	ldr	r3, [sp, #16]
 800a2da:	eba0 000a 	sub.w	r0, r0, sl
 800a2de:	4082      	lsls	r2, r0
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	3401      	adds	r4, #1
 800a2e4:	9304      	str	r3, [sp, #16]
 800a2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ea:	2206      	movs	r2, #6
 800a2ec:	4829      	ldr	r0, [pc, #164]	@ (800a394 <_vfiprintf_r+0x224>)
 800a2ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2f2:	f7fe f95a 	bl	80085aa <memchr>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d03f      	beq.n	800a37a <_vfiprintf_r+0x20a>
 800a2fa:	4b27      	ldr	r3, [pc, #156]	@ (800a398 <_vfiprintf_r+0x228>)
 800a2fc:	bb1b      	cbnz	r3, 800a346 <_vfiprintf_r+0x1d6>
 800a2fe:	9b03      	ldr	r3, [sp, #12]
 800a300:	3307      	adds	r3, #7
 800a302:	f023 0307 	bic.w	r3, r3, #7
 800a306:	3308      	adds	r3, #8
 800a308:	9303      	str	r3, [sp, #12]
 800a30a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a30c:	443b      	add	r3, r7
 800a30e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a310:	e76a      	b.n	800a1e8 <_vfiprintf_r+0x78>
 800a312:	460c      	mov	r4, r1
 800a314:	2001      	movs	r0, #1
 800a316:	fb0c 3202 	mla	r2, ip, r2, r3
 800a31a:	e7a8      	b.n	800a26e <_vfiprintf_r+0xfe>
 800a31c:	2300      	movs	r3, #0
 800a31e:	f04f 0c0a 	mov.w	ip, #10
 800a322:	4619      	mov	r1, r3
 800a324:	3401      	adds	r4, #1
 800a326:	9305      	str	r3, [sp, #20]
 800a328:	4620      	mov	r0, r4
 800a32a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a32e:	3a30      	subs	r2, #48	@ 0x30
 800a330:	2a09      	cmp	r2, #9
 800a332:	d903      	bls.n	800a33c <_vfiprintf_r+0x1cc>
 800a334:	2b00      	cmp	r3, #0
 800a336:	d0c6      	beq.n	800a2c6 <_vfiprintf_r+0x156>
 800a338:	9105      	str	r1, [sp, #20]
 800a33a:	e7c4      	b.n	800a2c6 <_vfiprintf_r+0x156>
 800a33c:	4604      	mov	r4, r0
 800a33e:	2301      	movs	r3, #1
 800a340:	fb0c 2101 	mla	r1, ip, r1, r2
 800a344:	e7f0      	b.n	800a328 <_vfiprintf_r+0x1b8>
 800a346:	ab03      	add	r3, sp, #12
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	462a      	mov	r2, r5
 800a34c:	4630      	mov	r0, r6
 800a34e:	4b13      	ldr	r3, [pc, #76]	@ (800a39c <_vfiprintf_r+0x22c>)
 800a350:	a904      	add	r1, sp, #16
 800a352:	f7fd fbc7 	bl	8007ae4 <_printf_float>
 800a356:	4607      	mov	r7, r0
 800a358:	1c78      	adds	r0, r7, #1
 800a35a:	d1d6      	bne.n	800a30a <_vfiprintf_r+0x19a>
 800a35c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a35e:	07d9      	lsls	r1, r3, #31
 800a360:	d405      	bmi.n	800a36e <_vfiprintf_r+0x1fe>
 800a362:	89ab      	ldrh	r3, [r5, #12]
 800a364:	059a      	lsls	r2, r3, #22
 800a366:	d402      	bmi.n	800a36e <_vfiprintf_r+0x1fe>
 800a368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a36a:	f7fe f91d 	bl	80085a8 <__retarget_lock_release_recursive>
 800a36e:	89ab      	ldrh	r3, [r5, #12]
 800a370:	065b      	lsls	r3, r3, #25
 800a372:	f53f af1f 	bmi.w	800a1b4 <_vfiprintf_r+0x44>
 800a376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a378:	e71e      	b.n	800a1b8 <_vfiprintf_r+0x48>
 800a37a:	ab03      	add	r3, sp, #12
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	462a      	mov	r2, r5
 800a380:	4630      	mov	r0, r6
 800a382:	4b06      	ldr	r3, [pc, #24]	@ (800a39c <_vfiprintf_r+0x22c>)
 800a384:	a904      	add	r1, sp, #16
 800a386:	f7fd fe4b 	bl	8008020 <_printf_i>
 800a38a:	e7e4      	b.n	800a356 <_vfiprintf_r+0x1e6>
 800a38c:	0800afec 	.word	0x0800afec
 800a390:	0800aff2 	.word	0x0800aff2
 800a394:	0800aff6 	.word	0x0800aff6
 800a398:	08007ae5 	.word	0x08007ae5
 800a39c:	0800a14d 	.word	0x0800a14d

0800a3a0 <__swbuf_r>:
 800a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a2:	460e      	mov	r6, r1
 800a3a4:	4614      	mov	r4, r2
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	b118      	cbz	r0, 800a3b2 <__swbuf_r+0x12>
 800a3aa:	6a03      	ldr	r3, [r0, #32]
 800a3ac:	b90b      	cbnz	r3, 800a3b2 <__swbuf_r+0x12>
 800a3ae:	f7fd ffe1 	bl	8008374 <__sinit>
 800a3b2:	69a3      	ldr	r3, [r4, #24]
 800a3b4:	60a3      	str	r3, [r4, #8]
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	071a      	lsls	r2, r3, #28
 800a3ba:	d501      	bpl.n	800a3c0 <__swbuf_r+0x20>
 800a3bc:	6923      	ldr	r3, [r4, #16]
 800a3be:	b943      	cbnz	r3, 800a3d2 <__swbuf_r+0x32>
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f000 f82a 	bl	800a41c <__swsetup_r>
 800a3c8:	b118      	cbz	r0, 800a3d2 <__swbuf_r+0x32>
 800a3ca:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	6922      	ldr	r2, [r4, #16]
 800a3d6:	b2f6      	uxtb	r6, r6
 800a3d8:	1a98      	subs	r0, r3, r2
 800a3da:	6963      	ldr	r3, [r4, #20]
 800a3dc:	4637      	mov	r7, r6
 800a3de:	4283      	cmp	r3, r0
 800a3e0:	dc05      	bgt.n	800a3ee <__swbuf_r+0x4e>
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	f7ff fd9b 	bl	8009f20 <_fflush_r>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d1ed      	bne.n	800a3ca <__swbuf_r+0x2a>
 800a3ee:	68a3      	ldr	r3, [r4, #8]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	60a3      	str	r3, [r4, #8]
 800a3f4:	6823      	ldr	r3, [r4, #0]
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	6022      	str	r2, [r4, #0]
 800a3fa:	701e      	strb	r6, [r3, #0]
 800a3fc:	6962      	ldr	r2, [r4, #20]
 800a3fe:	1c43      	adds	r3, r0, #1
 800a400:	429a      	cmp	r2, r3
 800a402:	d004      	beq.n	800a40e <__swbuf_r+0x6e>
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	07db      	lsls	r3, r3, #31
 800a408:	d5e1      	bpl.n	800a3ce <__swbuf_r+0x2e>
 800a40a:	2e0a      	cmp	r6, #10
 800a40c:	d1df      	bne.n	800a3ce <__swbuf_r+0x2e>
 800a40e:	4621      	mov	r1, r4
 800a410:	4628      	mov	r0, r5
 800a412:	f7ff fd85 	bl	8009f20 <_fflush_r>
 800a416:	2800      	cmp	r0, #0
 800a418:	d0d9      	beq.n	800a3ce <__swbuf_r+0x2e>
 800a41a:	e7d6      	b.n	800a3ca <__swbuf_r+0x2a>

0800a41c <__swsetup_r>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	4b29      	ldr	r3, [pc, #164]	@ (800a4c4 <__swsetup_r+0xa8>)
 800a420:	4605      	mov	r5, r0
 800a422:	6818      	ldr	r0, [r3, #0]
 800a424:	460c      	mov	r4, r1
 800a426:	b118      	cbz	r0, 800a430 <__swsetup_r+0x14>
 800a428:	6a03      	ldr	r3, [r0, #32]
 800a42a:	b90b      	cbnz	r3, 800a430 <__swsetup_r+0x14>
 800a42c:	f7fd ffa2 	bl	8008374 <__sinit>
 800a430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a434:	0719      	lsls	r1, r3, #28
 800a436:	d422      	bmi.n	800a47e <__swsetup_r+0x62>
 800a438:	06da      	lsls	r2, r3, #27
 800a43a:	d407      	bmi.n	800a44c <__swsetup_r+0x30>
 800a43c:	2209      	movs	r2, #9
 800a43e:	602a      	str	r2, [r5, #0]
 800a440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a448:	81a3      	strh	r3, [r4, #12]
 800a44a:	e033      	b.n	800a4b4 <__swsetup_r+0x98>
 800a44c:	0758      	lsls	r0, r3, #29
 800a44e:	d512      	bpl.n	800a476 <__swsetup_r+0x5a>
 800a450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a452:	b141      	cbz	r1, 800a466 <__swsetup_r+0x4a>
 800a454:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a458:	4299      	cmp	r1, r3
 800a45a:	d002      	beq.n	800a462 <__swsetup_r+0x46>
 800a45c:	4628      	mov	r0, r5
 800a45e:	f7fe ff0f 	bl	8009280 <_free_r>
 800a462:	2300      	movs	r3, #0
 800a464:	6363      	str	r3, [r4, #52]	@ 0x34
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a46c:	81a3      	strh	r3, [r4, #12]
 800a46e:	2300      	movs	r3, #0
 800a470:	6063      	str	r3, [r4, #4]
 800a472:	6923      	ldr	r3, [r4, #16]
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	f043 0308 	orr.w	r3, r3, #8
 800a47c:	81a3      	strh	r3, [r4, #12]
 800a47e:	6923      	ldr	r3, [r4, #16]
 800a480:	b94b      	cbnz	r3, 800a496 <__swsetup_r+0x7a>
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a48c:	d003      	beq.n	800a496 <__swsetup_r+0x7a>
 800a48e:	4621      	mov	r1, r4
 800a490:	4628      	mov	r0, r5
 800a492:	f000 f882 	bl	800a59a <__smakebuf_r>
 800a496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a49a:	f013 0201 	ands.w	r2, r3, #1
 800a49e:	d00a      	beq.n	800a4b6 <__swsetup_r+0x9a>
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	60a2      	str	r2, [r4, #8]
 800a4a4:	6962      	ldr	r2, [r4, #20]
 800a4a6:	4252      	negs	r2, r2
 800a4a8:	61a2      	str	r2, [r4, #24]
 800a4aa:	6922      	ldr	r2, [r4, #16]
 800a4ac:	b942      	cbnz	r2, 800a4c0 <__swsetup_r+0xa4>
 800a4ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4b2:	d1c5      	bne.n	800a440 <__swsetup_r+0x24>
 800a4b4:	bd38      	pop	{r3, r4, r5, pc}
 800a4b6:	0799      	lsls	r1, r3, #30
 800a4b8:	bf58      	it	pl
 800a4ba:	6962      	ldrpl	r2, [r4, #20]
 800a4bc:	60a2      	str	r2, [r4, #8]
 800a4be:	e7f4      	b.n	800a4aa <__swsetup_r+0x8e>
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	e7f7      	b.n	800a4b4 <__swsetup_r+0x98>
 800a4c4:	2000003c 	.word	0x2000003c

0800a4c8 <_raise_r>:
 800a4c8:	291f      	cmp	r1, #31
 800a4ca:	b538      	push	{r3, r4, r5, lr}
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	d904      	bls.n	800a4dc <_raise_r+0x14>
 800a4d2:	2316      	movs	r3, #22
 800a4d4:	6003      	str	r3, [r0, #0]
 800a4d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a4de:	b112      	cbz	r2, 800a4e6 <_raise_r+0x1e>
 800a4e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4e4:	b94b      	cbnz	r3, 800a4fa <_raise_r+0x32>
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f000 f830 	bl	800a54c <_getpid_r>
 800a4ec:	4622      	mov	r2, r4
 800a4ee:	4601      	mov	r1, r0
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4f6:	f000 b817 	b.w	800a528 <_kill_r>
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d00a      	beq.n	800a514 <_raise_r+0x4c>
 800a4fe:	1c59      	adds	r1, r3, #1
 800a500:	d103      	bne.n	800a50a <_raise_r+0x42>
 800a502:	2316      	movs	r3, #22
 800a504:	6003      	str	r3, [r0, #0]
 800a506:	2001      	movs	r0, #1
 800a508:	e7e7      	b.n	800a4da <_raise_r+0x12>
 800a50a:	2100      	movs	r1, #0
 800a50c:	4620      	mov	r0, r4
 800a50e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a512:	4798      	blx	r3
 800a514:	2000      	movs	r0, #0
 800a516:	e7e0      	b.n	800a4da <_raise_r+0x12>

0800a518 <raise>:
 800a518:	4b02      	ldr	r3, [pc, #8]	@ (800a524 <raise+0xc>)
 800a51a:	4601      	mov	r1, r0
 800a51c:	6818      	ldr	r0, [r3, #0]
 800a51e:	f7ff bfd3 	b.w	800a4c8 <_raise_r>
 800a522:	bf00      	nop
 800a524:	2000003c 	.word	0x2000003c

0800a528 <_kill_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	2300      	movs	r3, #0
 800a52c:	4d06      	ldr	r5, [pc, #24]	@ (800a548 <_kill_r+0x20>)
 800a52e:	4604      	mov	r4, r0
 800a530:	4608      	mov	r0, r1
 800a532:	4611      	mov	r1, r2
 800a534:	602b      	str	r3, [r5, #0]
 800a536:	f7f8 fcbc 	bl	8002eb2 <_kill>
 800a53a:	1c43      	adds	r3, r0, #1
 800a53c:	d102      	bne.n	800a544 <_kill_r+0x1c>
 800a53e:	682b      	ldr	r3, [r5, #0]
 800a540:	b103      	cbz	r3, 800a544 <_kill_r+0x1c>
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	bd38      	pop	{r3, r4, r5, pc}
 800a546:	bf00      	nop
 800a548:	200009fc 	.word	0x200009fc

0800a54c <_getpid_r>:
 800a54c:	f7f8 bcaa 	b.w	8002ea4 <_getpid>

0800a550 <__swhatbuf_r>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	460c      	mov	r4, r1
 800a554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a558:	4615      	mov	r5, r2
 800a55a:	2900      	cmp	r1, #0
 800a55c:	461e      	mov	r6, r3
 800a55e:	b096      	sub	sp, #88	@ 0x58
 800a560:	da0c      	bge.n	800a57c <__swhatbuf_r+0x2c>
 800a562:	89a3      	ldrh	r3, [r4, #12]
 800a564:	2100      	movs	r1, #0
 800a566:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a56a:	bf14      	ite	ne
 800a56c:	2340      	movne	r3, #64	@ 0x40
 800a56e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a572:	2000      	movs	r0, #0
 800a574:	6031      	str	r1, [r6, #0]
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	b016      	add	sp, #88	@ 0x58
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	466a      	mov	r2, sp
 800a57e:	f000 f849 	bl	800a614 <_fstat_r>
 800a582:	2800      	cmp	r0, #0
 800a584:	dbed      	blt.n	800a562 <__swhatbuf_r+0x12>
 800a586:	9901      	ldr	r1, [sp, #4]
 800a588:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a58c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a590:	4259      	negs	r1, r3
 800a592:	4159      	adcs	r1, r3
 800a594:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a598:	e7eb      	b.n	800a572 <__swhatbuf_r+0x22>

0800a59a <__smakebuf_r>:
 800a59a:	898b      	ldrh	r3, [r1, #12]
 800a59c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a59e:	079d      	lsls	r5, r3, #30
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	d507      	bpl.n	800a5b6 <__smakebuf_r+0x1c>
 800a5a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	6123      	str	r3, [r4, #16]
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	6163      	str	r3, [r4, #20]
 800a5b2:	b003      	add	sp, #12
 800a5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5b6:	466a      	mov	r2, sp
 800a5b8:	ab01      	add	r3, sp, #4
 800a5ba:	f7ff ffc9 	bl	800a550 <__swhatbuf_r>
 800a5be:	9f00      	ldr	r7, [sp, #0]
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f7fe fecd 	bl	8009364 <_malloc_r>
 800a5ca:	b948      	cbnz	r0, 800a5e0 <__smakebuf_r+0x46>
 800a5cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d0:	059a      	lsls	r2, r3, #22
 800a5d2:	d4ee      	bmi.n	800a5b2 <__smakebuf_r+0x18>
 800a5d4:	f023 0303 	bic.w	r3, r3, #3
 800a5d8:	f043 0302 	orr.w	r3, r3, #2
 800a5dc:	81a3      	strh	r3, [r4, #12]
 800a5de:	e7e2      	b.n	800a5a6 <__smakebuf_r+0xc>
 800a5e0:	89a3      	ldrh	r3, [r4, #12]
 800a5e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a5e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5ea:	81a3      	strh	r3, [r4, #12]
 800a5ec:	9b01      	ldr	r3, [sp, #4]
 800a5ee:	6020      	str	r0, [r4, #0]
 800a5f0:	b15b      	cbz	r3, 800a60a <__smakebuf_r+0x70>
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5f8:	f000 f81e 	bl	800a638 <_isatty_r>
 800a5fc:	b128      	cbz	r0, 800a60a <__smakebuf_r+0x70>
 800a5fe:	89a3      	ldrh	r3, [r4, #12]
 800a600:	f023 0303 	bic.w	r3, r3, #3
 800a604:	f043 0301 	orr.w	r3, r3, #1
 800a608:	81a3      	strh	r3, [r4, #12]
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	431d      	orrs	r5, r3
 800a60e:	81a5      	strh	r5, [r4, #12]
 800a610:	e7cf      	b.n	800a5b2 <__smakebuf_r+0x18>
	...

0800a614 <_fstat_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	2300      	movs	r3, #0
 800a618:	4d06      	ldr	r5, [pc, #24]	@ (800a634 <_fstat_r+0x20>)
 800a61a:	4604      	mov	r4, r0
 800a61c:	4608      	mov	r0, r1
 800a61e:	4611      	mov	r1, r2
 800a620:	602b      	str	r3, [r5, #0]
 800a622:	f7f8 fca5 	bl	8002f70 <_fstat>
 800a626:	1c43      	adds	r3, r0, #1
 800a628:	d102      	bne.n	800a630 <_fstat_r+0x1c>
 800a62a:	682b      	ldr	r3, [r5, #0]
 800a62c:	b103      	cbz	r3, 800a630 <_fstat_r+0x1c>
 800a62e:	6023      	str	r3, [r4, #0]
 800a630:	bd38      	pop	{r3, r4, r5, pc}
 800a632:	bf00      	nop
 800a634:	200009fc 	.word	0x200009fc

0800a638 <_isatty_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	2300      	movs	r3, #0
 800a63c:	4d05      	ldr	r5, [pc, #20]	@ (800a654 <_isatty_r+0x1c>)
 800a63e:	4604      	mov	r4, r0
 800a640:	4608      	mov	r0, r1
 800a642:	602b      	str	r3, [r5, #0]
 800a644:	f7f8 fca3 	bl	8002f8e <_isatty>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d102      	bne.n	800a652 <_isatty_r+0x1a>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	b103      	cbz	r3, 800a652 <_isatty_r+0x1a>
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	200009fc 	.word	0x200009fc

0800a658 <_init>:
 800a658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65a:	bf00      	nop
 800a65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a65e:	bc08      	pop	{r3}
 800a660:	469e      	mov	lr, r3
 800a662:	4770      	bx	lr

0800a664 <_fini>:
 800a664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a666:	bf00      	nop
 800a668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a66a:	bc08      	pop	{r3}
 800a66c:	469e      	mov	lr, r3
 800a66e:	4770      	bx	lr
